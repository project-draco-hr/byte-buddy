{
  FieldList<?> fields=new TypeDescription.ForLoadedType(GenericTypes.class).getDeclaredFields();
  collectionRaw=fields.filter(named("collectionRaw")).getOnly().getType();
  collectionWildcard=fields.filter(named("collectionWildcard")).getOnly().getType();
  collectionTypeVariableT=fields.filter(named("collectionTypeVariableT")).getOnly().getType();
  collectionTypeVariableS=fields.filter(named("collectionTypeVariableS")).getOnly().getType();
  collectionTypeVariableU=fields.filter(named("collectionTypeVariableU")).getOnly().getType();
  collectionUpperBoundTypeVariableT=fields.filter(named("collectionUpperBoundTypeVariableT")).getOnly().getType();
  collectionUpperBoundTypeVariableS=fields.filter(named("collectionUpperBoundTypeVariableS")).getOnly().getType();
  collectionUpperBoundTypeVariableU=fields.filter(named("collectionUpperBoundTypeVariableU")).getOnly().getType();
  collectionLowerBoundTypeVariableT=fields.filter(named("collectionLowerBoundTypeVariableT")).getOnly().getType();
  collectionLowerBoundTypeVariableS=fields.filter(named("collectionLowerBoundTypeVariableS")).getOnly().getType();
  collectionLowerBoundTypeVariableU=fields.filter(named("collectionLowerBoundTypeVariableU")).getOnly().getType();
  listRaw=fields.filter(named("listRaw")).getOnly().getType();
  listWildcard=fields.filter(named("listWildcard")).getOnly().getType();
  arrayListTypeVariableT=fields.filter(named("arrayListTypeVariableT")).getOnly().getType();
  arrayListTypeVariableS=fields.filter(named("arrayListTypeVariableS")).getOnly().getType();
  TypeDescription.Generic arrayListTypeVariableU=fields.filter(named("arrayListTypeVariableU")).getOnly().getType();
  TypeDescription.Generic arrayListTypeVariableV=fields.filter(named("arrayListTypeVariableV")).getOnly().getType();
  abstractListRaw=fields.filter(named("abstractListRaw")).getOnly().getType();
  callableWildcard=fields.filter(named("callableWildcard")).getOnly().getType();
  arrayListRaw=fields.filter(named("arrayListRaw")).getOnly().getType();
  arrayListWildcard=fields.filter(named("arrayListWildcard")).getOnly().getType();
  collectionRawArray=fields.filter(named("collectionRawArray")).getOnly().getType();
  listRawArray=fields.filter(named("listRawArray")).getOnly().getType();
  listWildcardArray=fields.filter(named("listWildcardArray")).getOnly().getType();
  arrayListRawArray=fields.filter(named("arrayListRawArray")).getOnly().getType();
  stringArray=new TypeDescription.Generic.OfNonGenericType.ForLoadedType(String[].class);
  objectArray=new TypeDescription.Generic.OfNonGenericType.ForLoadedType(Object[].class);
  objectNestedArray=new TypeDescription.Generic.OfNonGenericType.ForLoadedType(Object[][].class);
  unboundWildcard=listWildcard.getTypeArguments().getOnly();
  typeVariableT=arrayListTypeVariableT.getTypeArguments().getOnly();
  typeVariableS=arrayListTypeVariableS.getTypeArguments().getOnly();
  typeVariableU=arrayListTypeVariableU.getTypeArguments().getOnly();
  typeVariableV=arrayListTypeVariableV.getTypeArguments().getOnly();
  arrayTypeVariableT=fields.filter(named("arrayTypeVariableT")).getOnly().getType();
  arrayTypeVariableS=fields.filter(named("arrayTypeVariableS")).getOnly().getType();
  arrayTypeVariableU=fields.filter(named("arrayTypeVariableU")).getOnly().getType();
  arrayNestedTypeVariableT=fields.filter(named("arrayNestedTypeVariableT")).getOnly().getType();
}
