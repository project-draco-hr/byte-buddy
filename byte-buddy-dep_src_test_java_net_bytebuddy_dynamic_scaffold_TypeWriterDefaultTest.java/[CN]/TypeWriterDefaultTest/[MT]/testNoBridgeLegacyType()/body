{
  Class<?> base=new ByteBuddy(ClassFileVersion.JAVA_V4).subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).modifiers(Visibility.PACKAGE_PRIVATE).defineConstructor(Visibility.PUBLIC).intercept(SuperMethodCall.INSTANCE).defineMethod("foo",void.class,Visibility.PUBLIC).intercept(StubMethod.INSTANCE).defineMethod("bar",Object.class).intercept(StubMethod.INSTANCE).defineMethod("bar",String.class).intercept(StubMethod.INSTANCE).make().load(null,ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  Class<?> subclass=new ByteBuddy(ClassFileVersion.JAVA_V4).subclass(base).modifiers(Visibility.PUBLIC).method(named("bar")).intercept(StubMethod.INSTANCE).make().load(base.getClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded();
  assertThat(subclass.getDeclaredMethods().length,is(1));
  assertThat(subclass.getDeclaredMethod("bar").isBridge(),is(false));
  assertThat(subclass.getDeclaredMethod("bar").getReturnType(),is((Object)String.class));
}
