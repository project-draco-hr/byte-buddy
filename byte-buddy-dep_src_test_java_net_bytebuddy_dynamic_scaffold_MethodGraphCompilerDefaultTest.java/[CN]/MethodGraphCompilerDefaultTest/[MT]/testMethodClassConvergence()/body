{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(MethodClassConvergence.Inner.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(TypeDescription.OBJECT.getDeclaredMethods().filter(isVirtual()).size() + 1));
  MethodDescription methodDescription=typeDescription.getDeclaredMethods().filter(isMethod().and(ElementMatchers.not(isBridge()))).getOnly();
  MethodDescription genericMethod=typeDescription.getSuperClass().getDeclaredMethods().filter(isMethod().and(definedMethod(takesArguments(Object.class)))).getOnly();
  MethodDescription nonGenericMethod=typeDescription.getSuperClass().getDeclaredMethods().filter(isMethod().and(definedMethod(takesArguments(Void.class)))).getOnly();
  MethodGraph.Node methodNode=methodGraph.locate(methodDescription.asSignatureToken());
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
  assertThat(methodNode,is(methodGraph.locate(genericMethod.asDefined().asSignatureToken())));
  assertThat(methodNode,is(methodGraph.locate(nonGenericMethod.asDefined().asSignatureToken())));
  assertThat(methodNode.getMethodTypes().size(),is(2));
  assertThat(methodNode.getMethodTypes().contains(methodDescription.asTypeToken()),is(true));
  assertThat(methodNode.getMethodTypes().contains(methodDescription.asDefined().asTypeToken()),is(true));
  assertThat(methodNode.getRepresentative(),is(methodDescription));
  MethodGraph superGraph=methodGraph.getSuperGraph();
  MethodGraph.Node superNode=superGraph.locate(methodDescription.asSignatureToken());
  assertThat(superNode.getSort(),is(MethodGraph.Node.Sort.AMBIGUOUS));
  assertThat(superNode.getMethodTypes().size(),is(2));
  assertThat(superNode.getMethodTypes().contains(methodDescription.asTypeToken()),is(true));
  assertThat(superNode.getMethodTypes().contains(methodDescription.asDefined().asTypeToken()),is(true));
  assertThat(superNode.getRepresentative(),is(nonGenericMethod));
  assertThat(superNode.getRepresentative(),is(genericMethod));
}
