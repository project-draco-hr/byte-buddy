{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(GenericVisibilityBridgeTarget.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(TypeDescription.OBJECT.getDeclaredMethods().filter(isVirtual()).size() + 1));
  MethodDescription methodDescription=typeDescription.getSuperType().getDeclaredMethods().filter(isMethod().and(ElementMatchers.not(isBridge()))).getOnly();
  MethodDescription.SignatureToken bridgeToken=typeDescription.getSuperType().getSuperType().getDeclaredMethods().filter(isMethod()).getOnly().asSignatureToken();
  MethodGraph.Node methodNode=methodGraph.locate(methodDescription.asSignatureToken());
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.VISIBLE));
  assertThat(methodNode,is(methodGraph.locate(bridgeToken)));
  assertThat(methodNode.getMethodTypes().size(),is(2));
  assertThat(methodNode.getMethodTypes().contains(methodDescription.asTypeToken()),is(true));
  assertThat(methodNode.getMethodTypes().contains(methodDescription.asDefined().asTypeToken()),is(true));
  assertThat(methodNode.getRepresentative(),is(methodDescription));
}
