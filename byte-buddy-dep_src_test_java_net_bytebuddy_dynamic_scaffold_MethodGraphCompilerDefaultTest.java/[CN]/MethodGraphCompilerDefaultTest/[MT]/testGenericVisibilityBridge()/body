{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(GenericVisibilityBridgeTarget.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().make(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(TypeDescription.OBJECT.getDeclaredMethods().filter(isVirtual()).size() + 2));
  MethodDescription methodDescription=typeDescription.getSuperType().getDeclaredMethods().filter(isMethod().and(ElementMatchers.not(isBridge()))).getOnly();
  MethodDescription.Token bridgeToken=typeDescription.getSuperType().getSuperType().getDeclaredMethods().filter(isMethod()).getOnly().asToken();
  MethodGraph.Node methodNode=methodGraph.locate(methodDescription.asToken());
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
  assertThat(methodNode,is(methodGraph.locate(bridgeToken)));
  assertThat(methodNode.isMadeVisible(),is(true));
  assertThat(methodNode.getBridges().size(),is(1));
  assertThat(methodNode.getRepresentative(),is(methodDescription));
}
