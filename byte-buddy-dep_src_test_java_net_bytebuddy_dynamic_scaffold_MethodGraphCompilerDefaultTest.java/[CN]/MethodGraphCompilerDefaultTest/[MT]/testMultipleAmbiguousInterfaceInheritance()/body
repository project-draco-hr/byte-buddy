{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(AmbiguousInterfaceBase.InterfaceTarget.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(1));
  MethodDescription first=typeDescription.getInterfaces().filter(rawType(InterfaceBase.class)).getOnly().getDeclaredMethods().filter(isMethod()).getOnly();
  MethodDescription second=typeDescription.getInterfaces().filter(rawType(AmbiguousInterfaceBase.class)).getOnly().getDeclaredMethods().filter(isMethod()).getOnly();
  MethodGraph.Node methodNode=methodGraph.locate(first.asToken());
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.AMBIGUOUS));
  assertThat(methodNode.getVisibility(),is(MethodGraph.Node.Visibility.PLAIN));
  assertThat(methodNode.getBridges().size(),is(0));
  assertThat(methodNode.getRepresentative(),is(first));
  assertThat(methodNode.getRepresentative(),not(second));
  assertThat(methodNode,is(methodGraph.locate(second.asToken())));
  MethodGraph.Node firstBaseNode=methodGraph.getInterfaceGraph(new TypeDescription.ForLoadedType(InterfaceBase.class)).locate(first.asToken());
  assertThat(methodNode,not(is(firstBaseNode)));
  assertThat(firstBaseNode.getRepresentative(),is(first));
  MethodGraph.Node secondBaseNode=methodGraph.getInterfaceGraph(new TypeDescription.ForLoadedType(InterfaceBase.class)).locate(second.asToken());
  assertThat(methodNode,not(is(secondBaseNode)));
  assertThat(secondBaseNode.getRepresentative(),is(first));
}
