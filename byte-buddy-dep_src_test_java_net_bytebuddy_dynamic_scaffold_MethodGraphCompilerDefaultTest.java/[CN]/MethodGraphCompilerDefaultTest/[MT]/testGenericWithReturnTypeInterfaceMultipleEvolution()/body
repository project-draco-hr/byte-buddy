{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(GenericWithReturnTypeInterfaceBase.Intermediate.Inner.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(1));
  MethodGraph.Node methodNode=methodGraph.locate(typeDescription.getDeclaredMethods().getOnly().asToken());
  MethodDescription.Token firstBridgeToken=typeDescription.getInterfaces().getOnly().getDeclaredMethods().getOnly().asDefined().asToken();
  MethodDescription.Token secondBridgeToken=typeDescription.getInterfaces().getOnly().getInterfaces().getOnly().getDeclaredMethods().getOnly().asDefined().asToken();
  assertThat(methodNode,is(methodGraph.locate(firstBridgeToken)));
  assertThat(methodNode,is(methodGraph.locate(secondBridgeToken)));
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
  assertThat(methodNode.getVisibility(),is(MethodGraph.Node.Visibility.PLAIN));
  assertThat(methodNode.getBridges().size(),is(2));
  assertThat(methodNode.getBridges().contains(firstBridgeToken),is(true));
  assertThat(methodNode.getBridges().contains(secondBridgeToken),is(true));
}
