{
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(TypeDescription.OBJECT);
  assertThat(methodGraph.listNodes().size(),is(TypeDescription.OBJECT.getDeclaredMethods().filter(isVirtual()).size()));
  assertThat(methodGraph.getSuperGraph().listNodes().size(),is(0));
  assertThat(methodGraph.getInterfaceGraph(mock(TypeDescription.class)).listNodes().size(),is(0));
  for (  MethodDescription methodDescription : TypeDescription.OBJECT.getDeclaredMethods().filter(isVirtual())) {
    MethodGraph.Node node=methodGraph.locate(methodDescription.asSignatureToken());
    assertThat(node.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
    assertThat(node.getMethodTypes().size(),is(1));
    assertThat(node.getMethodTypes().contains(methodDescription.asTypeToken()),is(true));
    assertThat(node.getRepresentative(),is(methodDescription));
    assertThat(methodGraph.listNodes().contains(node),is(true));
  }
}
