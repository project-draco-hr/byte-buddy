{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(GenericWithReturnTypeInterfaceBase.Inner.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(1));
  MethodGraph.Node methodNode=methodGraph.locate(typeDescription.getDeclaredMethods().filter(isMethod().and(ElementMatchers.not(isBridge()))).getOnly().asToken());
  MethodDescription.Token bridgeToken=typeDescription.getInterfaces().getOnly().getDeclaredMethods().filter(isMethod()).getOnly().asDefined().asToken();
  assertThat(methodNode,is(methodGraph.locate(bridgeToken)));
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
  assertThat(methodNode.isMadeVisible(),is(MethodGraph.Node.Visibility.PLAIN));
  assertThat(methodNode.getBridges().size(),is(1));
  assertThat(methodNode.getBridges().contains(bridgeToken),is(true));
}
