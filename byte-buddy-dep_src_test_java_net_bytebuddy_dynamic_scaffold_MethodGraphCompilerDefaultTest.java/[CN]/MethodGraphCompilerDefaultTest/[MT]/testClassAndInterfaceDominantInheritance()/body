{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(ClassAndInterfaceInheritance.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(TypeDescription.OBJECT.getDeclaredMethods().filter(isVirtual()).size() + 1));
  MethodDescription method=typeDescription.getSuperType().getDeclaredMethods().filter(isMethod()).getOnly();
  MethodGraph.Node methodNode=methodGraph.locate(method.asToken());
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
  assertThat(methodNode.getMethodTypes().size(),is(1));
  assertThat(methodNode.getMethodTypes().contains(method.asTypeToken()),is(true));
  assertThat(methodNode.getRepresentative(),is(method));
  MethodGraph.Node baseNode=methodGraph.getInterfaceGraph(new TypeDescription.ForLoadedType(InterfaceBase.class)).locate(method.asToken());
  assertThat(methodNode,not(baseNode));
  assertThat(baseNode.getRepresentative(),is((MethodDescription)typeDescription.getInterfaces().getOnly().getDeclaredMethods().getOnly()));
}
