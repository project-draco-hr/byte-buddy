{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(InterfaceBase.InnerInterface.class);
  MethodGraph.Linked methodGraph=MethodGraph.Compiler.Default.forJavaHierarchy().compile(typeDescription);
  assertThat(methodGraph.listNodes().size(),is(1));
  MethodDescription method=typeDescription.getInterfaces().getOnly().getDeclaredMethods().getOnly();
  MethodGraph.Node methodNode=methodGraph.locate(method.asToken());
  assertThat(methodNode.getSort(),is(MethodGraph.Node.Sort.RESOLVED));
  assertThat(methodNode.getVisibility(),is(MethodGraph.Node.Visibility.PLAIN));
  assertThat(methodNode.getBridges().size(),is(0));
  assertThat(methodNode.getRepresentative(),is(method));
  assertThat(methodGraph.listNodes().contains(methodNode),is(true));
}
