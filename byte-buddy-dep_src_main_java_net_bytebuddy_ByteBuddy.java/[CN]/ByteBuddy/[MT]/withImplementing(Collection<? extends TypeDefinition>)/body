{
  return new OptionalMethodInterception(classFileVersion,namingStrategy,auxiliaryTypeNamingStrategy,implementationContextFactory,joinUniqueRaw(interfaceTypes,new TypeList.Generic.Explicit(toList(isImplementable(typeDefinitions)))),ignoredMethods,classVisitorWrapper,methodRegistry,modifiers,typeAttributeAppender,methodGraphCompiler,defaultFieldAttributeAppenderFactory,defaultMethodAttributeAppenderFactory,new LatentMethodMatcher.Resolved(isDeclaredBy(anyOf(new TypeList.Generic.Explicit(toList(typeDefinitions)).asErasures()))));
}
