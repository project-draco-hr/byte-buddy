{
  return new OptionalMethodInterception(classFileVersion,namingStrategy,auxiliaryTypeNamingStrategy,implementationContextFactory,CompoundList.of(interfaceTypes,new TypeList.Generic.Explicit(toList(typeDefinitions))),ignoredMethods,asmVisitorWrapper,methodRegistry,modifiers,typeAttributeAppender,methodGraphCompiler,defaultFieldAttributeAppenderFactory,defaultMethodAttributeAppenderFactory,new LatentMatcher.Resolved<MethodDescription>(isDeclaredBy(anyOf(new TypeList.Generic.Explicit(toList(typeDefinitions)).asErasures()))));
}
