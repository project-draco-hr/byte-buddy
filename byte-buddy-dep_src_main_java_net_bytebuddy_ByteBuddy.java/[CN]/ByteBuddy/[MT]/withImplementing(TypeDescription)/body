{
  return new OptionalMethodInterception(classFileVersion,namingStrategy,auxiliaryTypeNamingStrategy,joinUnique(interfaceTypes,isInterface(Arrays.asList(type))),ignoredMethods,bridgeMethodResolverFactory,classVisitorWrapperChain,methodRegistry,modifiers,typeAttributeAppender,methodLookupEngineFactory,defaultFieldAttributeAppenderFactory,defaultMethodAttributeAppenderFactory,new LatentMethodMatcher.Simple(isDeclaredBy(anyOf((Object[])type))));
}
