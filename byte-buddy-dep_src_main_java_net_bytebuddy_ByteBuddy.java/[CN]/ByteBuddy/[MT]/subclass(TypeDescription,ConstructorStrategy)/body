{
  TypeDescription actualSuperType=isExtendable(superType);
  List<TypeDescription> interfaceTypes=this.interfaceTypes;
  if (nonNull(superType).isInterface()) {
    actualSuperType=TypeDescription.OBJECT;
    interfaceTypes=joinUnique(superType,interfaceTypes);
  }
  return new SubclassDynamicTypeBuilder<T>(classFileVersion,nonNull(namingStrategy.subclass(superType)),actualSuperType,interfaceTypes,modifiers.resolve(superType.getModifiers() & ~TypeManifestation.ANNOTATION.getMask()),typeAttributeAppender,ignoredMethods,bridgeMethodResolverFactory,classVisitorWrapperChain,new FieldRegistry.Default(),methodRegistry,methodLookupEngineFactory,defaultFieldAttributeAppenderFactory,defaultMethodAttributeAppenderFactory,nonNull(constructorStrategy));
}
