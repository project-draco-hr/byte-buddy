{
  TypeDescription.Generic actualSuperType;
  TypeList.Generic interfaceTypes;
  if (superType.isPrimitive() || superType.isArray() || superType.asErasure().isFinal()) {
    throw new IllegalArgumentException("Cannot subclass primitive, array or final types: " + superType);
  }
 else   if (superType.asErasure().isInterface()) {
    interfaceTypes=new TypeList.Generic.Explicit(superType.asGenericType());
    actualSuperType=TypeDescription.Generic.OBJECT;
  }
 else {
    interfaceTypes=new TypeList.Generic.Empty();
    actualSuperType=superType.asGenericType();
  }
  return new SubclassDynamicTypeBuilder<T>(InstrumentedType.Default.subclass(namingStrategy.subclass(superType.asGenericType()),ModifierContributor.Resolver.of(Visibility.PUBLIC,TypeManifestation.PLAIN).resolve(superType.asErasure().getModifiers()),actualSuperType).withInterfaces(interfaceTypes),classFileVersion,auxiliaryTypeNamingStrategy,annotationValueFilterFactory,annotationRetention,implementationContextFactory,methodGraphCompiler,ignoredMethods,constructorStrategy);
}
