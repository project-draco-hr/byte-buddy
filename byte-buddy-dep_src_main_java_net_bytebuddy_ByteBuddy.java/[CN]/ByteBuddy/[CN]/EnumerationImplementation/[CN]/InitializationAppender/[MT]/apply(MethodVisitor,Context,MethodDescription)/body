{
  TypeDescription instrumentedType=instrumentedMethod.getDeclaringType().asErasure();
  MethodDescription enumConstructor=instrumentedType.getDeclaredMethods().filter(isConstructor().and(takesArguments(String.class,int.class))).getOnly();
  int ordinal=0;
  StackManipulation stackManipulation=StackManipulation.Trivial.INSTANCE;
  List<FieldDescription> enumerationFields=new ArrayList<FieldDescription>(values.size());
  for (  String value : values) {
    FieldDescription fieldDescription=instrumentedType.getDeclaredFields().filter(named(value)).getOnly();
    stackManipulation=new StackManipulation.Compound(stackManipulation,TypeCreation.forType(instrumentedType),Duplication.SINGLE,new TextConstant(value),IntegerConstant.forValue(ordinal++),MethodInvocation.invoke(enumConstructor),FieldAccess.forField(fieldDescription).putter());
    enumerationFields.add(fieldDescription);
  }
  List<StackManipulation> fieldGetters=new ArrayList<StackManipulation>(values.size());
  for (  FieldDescription fieldDescription : enumerationFields) {
    fieldGetters.add(FieldAccess.forField(fieldDescription).getter());
  }
  stackManipulation=new StackManipulation.Compound(stackManipulation,ArrayFactory.forType(instrumentedType.asGenericType()).withValues(fieldGetters),FieldAccess.forField(instrumentedType.getDeclaredFields().filter(named(ENUM_VALUES)).getOnly()).putter());
  return new Size(stackManipulation.apply(methodVisitor,implementationContext).getMaximalSize(),instrumentedMethod.getStackSize());
}
