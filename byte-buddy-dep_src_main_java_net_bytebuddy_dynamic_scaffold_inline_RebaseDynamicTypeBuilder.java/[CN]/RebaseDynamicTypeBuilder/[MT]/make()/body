{
  MethodRegistry.Prepared preparedMethodRegistry=methodRegistry.prepare(new InstrumentedType.Default(namingStrategy.name(new NamingStrategy.UnnamedType.Default(targetType.getSuperType(),interfaceTypes,modifiers,classFileVersion)),modifiers,targetType.getTypeVariables().accept(new GenericTypeDescription.Visitor.Substitutor.ForDetachment(is(targetType))),targetType.getSuperType(),interfaceTypes,fieldTokens,methodTokens,targetType.getDeclaredAnnotations(),InstrumentedType.TypeInitializer.None.INSTANCE,LoadedTypeInitializer.NoOp.INSTANCE,targetType.getDeclaringType(),targetType.getEnclosingMethod(),targetType.getEnclosingType(),targetType.isMemberClass(),targetType.isAnonymousClass(),targetType.isLocalClass()),methodGraphCompiler,InliningImplementationMatcher.of(ignoredMethods,targetType));
  MethodRebaseResolver methodRebaseResolver=MethodRebaseResolver.Default.make(preparedMethodRegistry.getInstrumentedMethods(),preparedMethodRegistry.getInstrumentedType(),classFileVersion,auxiliaryTypeNamingStrategy,methodNameTransformer);
  MethodRegistry.Compiled compiledMethodRegistry=preparedMethodRegistry.compile(new RebaseImplementationTarget.Factory(methodRebaseResolver));
  return TypeWriter.Default.<T>forRebasing(compiledMethodRegistry,fieldRegistry.compile(compiledMethodRegistry.getInstrumentedType()),auxiliaryTypeNamingStrategy,classVisitorWrapperChain,attributeAppender,classFileVersion,classFileLocator,targetType,methodRebaseResolver).make();
}
