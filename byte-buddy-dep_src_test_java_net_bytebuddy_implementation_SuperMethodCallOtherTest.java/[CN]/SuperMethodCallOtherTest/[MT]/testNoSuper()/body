{
  when(typeDescription.getSuperType()).thenReturn(genericSuperType);
  when(methodDescription.getParameters()).thenReturn((ParameterList)new ParameterList.Empty<ParameterDescription>());
  when(methodDescription.getReturnType()).thenReturn(genericReturnType);
  when(methodDescription.getDeclaringType()).thenReturn(declaringType);
  when(declaringType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(returnType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(superType.getDeclaredMethods()).thenReturn(superTypeMethods);
  when(superTypeMethods.filter(any(ElementMatcher.class))).thenReturn(superTypeMethods);
  when(implementationTarget.invokeDominant(methodToken)).thenReturn(Implementation.SpecialMethodInvocation.Illegal.INSTANCE);
  SuperMethodCall.INSTANCE.appender(implementationTarget).apply(methodVisitor,implementationContext,methodDescription);
}
