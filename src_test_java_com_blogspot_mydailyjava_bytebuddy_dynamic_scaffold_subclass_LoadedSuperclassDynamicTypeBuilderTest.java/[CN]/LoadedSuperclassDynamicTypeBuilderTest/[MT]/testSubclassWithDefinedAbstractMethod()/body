{
  Class<?> loaded=new LoadedSuperclassDynamicTypeBuilder<Object>(ClassFormatVersion.forCurrentJavaVersion(),new NamingStrategy.Fixed(FOO),Object.class,Arrays.<Class<?>>asList(Serializable.class),Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT,TypeAttributeAppender.NoOp.INSTANCE,none(),new ClassVisitorWrapper.Chain(),new FieldRegistry.Default(),new MethodRegistry.Default(),FieldAttributeAppender.NoOp.INSTANCE,MethodAttributeAppender.NoOp.INSTANCE,ConstructorStrategy.Default.IMITATE_SUPER_TYPE).defineMethod(BAR,int.class,Arrays.<Class<?>>asList(long.class,Object.class),Visibility.PUBLIC).withoutCode().make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  assertThat(loaded.getName(),is(FOO));
  assertThat(loaded.getModifiers(),is(Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT));
  assertEquals(Object.class,loaded.getSuperclass());
  assertThat(loaded.getInterfaces().length,is(1));
  assertThat(loaded.getClassLoader().getParent(),is(getClass().getClassLoader()));
  assertEquals(Serializable.class,loaded.getInterfaces()[0]);
  assertThat(loaded.getDeclaredAnnotations().length,is(0));
  assertThat(loaded.getDeclaredFields().length,is(0));
  assertThat(loaded.getDeclaredMethods().length,is(1));
  Method method=loaded.getDeclaredMethod(BAR,long.class,Object.class);
  assertThat(method.getName(),is(BAR));
  assertThat(method.getDeclaredAnnotations().length,is(0));
  assertEquals(int.class,method.getReturnType());
  assertThat(method.getModifiers(),is(Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT));
  assertThat(loaded.getDeclaredConstructors().length,is(1));
}
