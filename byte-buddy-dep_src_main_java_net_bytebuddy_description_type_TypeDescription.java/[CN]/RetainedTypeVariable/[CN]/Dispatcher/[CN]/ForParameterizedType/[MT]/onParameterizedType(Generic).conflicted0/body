{
  if (this.parameterizedType.asErasure().equals(parameterizedType.asErasure())) {
    Generic fromOwner=this.parameterizedType.getOwnerType(), toOwner=parameterizedType.getOwnerType();
    if (fromOwner != null && toOwner != null && !fromOwner.accept(Assigner.INSTANCE).isAssignableFrom(toOwner)) {
      return false;
    }
    TypeList.Generic fromArguments=this.parameterizedType.getTypeArguments(), toArguments=parameterizedType.getTypeArguments();
    if (fromArguments.size() == toArguments.size()) {
      for (int index=0; index < fromArguments.size(); index++) {
        if (!fromArguments.get(index).accept(ParameterAssigner.INSTANCE).isAssignableFrom(toArguments.get(index))) {
          return false;
        }
      }
      return true;
    }
 else {
      throw new IllegalArgumentException("Incompatible generic types: " + parameterizedType + " and "+ this.parameterizedType);
    }
  }
  Generic superClass=parameterizedType.getSuperClass();
  if (superClass != null && isAssignableFrom(superClass)) {
    return true;
  }
  for (  Generic interfaceType : parameterizedType.getInterfaces()) {
    if (isAssignableFrom(interfaceType)) {
      return true;
    }
  }
  return false;
}
