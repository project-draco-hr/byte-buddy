{
  ObjectPropertyAssertion.of(TypePool.Default.ComponentTypeLocator.ForAnnotationProperty.class).apply();
  ObjectPropertyAssertion.of(TypePool.Default.ComponentTypeLocator.ForAnnotationProperty.Bound.class).skipSynthetic().apply();
  ObjectPropertyAssertion.of(TypePool.Default.ComponentTypeLocator.ForArrayType.class).create(new ObjectPropertyAssertion.Creator<String>(){
    @Override public String create(){
      return "()L" + RandomString.make() + ";";
    }
  }
).apply();
  ObjectPropertyAssertion.of(TypePool.Default.ComponentTypeLocator.Illegal.class).apply();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.OnTypeCollector.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.MethodExtractor.class).create(new ObjectPropertyAssertion.Creator<String>(){
    @Override public String create(){
      return "(LFoo;)LBar;";
    }
  }
).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.ParameterBag.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.MethodExtractor.OnMethodCollector.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.MethodExtractor.OnMethodParameterCollector.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.FieldExtractor.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.FieldExtractor.OnFieldCollector.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.AnnotationExtractor.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.AnnotationExtractor.ArrayLookup.class).applyCustom();
  ObjectPropertyAssertion.of(TypePool.Default.TypeExtractor.AnnotationExtractor.AnnotationLookup.class).applyCustom();
}
