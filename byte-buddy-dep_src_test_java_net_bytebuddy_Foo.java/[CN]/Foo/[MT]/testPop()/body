{
  Class<?> type=new ByteBuddy().subclass(Object.class).defineMethod("foo",void.class).intercept(new Implementation(){
    @Override public ByteCodeAppender appender(    Target implementationTarget){
      return new ByteCodeAppender(){
        @Override public Size apply(        MethodVisitor methodVisitor,        Context implementationContext,        MethodDescription instrumentedMethod){
          methodVisitor.visitLdcInsn(1L);
          methodVisitor.visitInsn(Opcodes.POP);
          methodVisitor.visitInsn(Opcodes.RETURN);
          return new Size(10,1);
        }
      }
;
    }
    @Override public InstrumentedType prepare(    InstrumentedType instrumentedType){
      return instrumentedType;
    }
  }
).make().load(null,ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  type.newInstance();
}
