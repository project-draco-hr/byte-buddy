{
  Class<?> type=new ByteBuddy().subclass(Object.class).defineMethod("foo",String.class).intercept(new Implementation(){
    @Override public ByteCodeAppender appender(    Target implementationTarget){
      return new ByteCodeAppender(){
        @Override public Size apply(        MethodVisitor methodVisitor,        Context implementationContext,        MethodDescription instrumentedMethod){
          methodVisitor.visitLdcInsn("foo");
          methodVisitor.visitLdcInsn("bar");
          methodVisitor.visitInsn(Opcodes.ARETURN);
          methodVisitor.visitFrame(Opcodes.F_SAME,0,new Object[0],0,new Object[0]);
          methodVisitor.visitLdcInsn("foo");
          methodVisitor.visitInsn(Opcodes.ARETURN);
          return new Size(2,1);
        }
      }
;
    }
    @Override public InstrumentedType prepare(    InstrumentedType instrumentedType){
      return instrumentedType;
    }
  }
).make().load(null,ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  new ByteBuddy().redefine(type,ClassFileLocator.AgentBased.of(ByteBuddyAgent.install(),type)).name("XYZ").visit(DebuggingWrapper.makeDefault(true)).visit(Advice.to(Foo.class).on(named("foo"))).make().load(type.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().newInstance();
}
