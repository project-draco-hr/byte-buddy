{
  Map<Entry,Entry.Manifest> manifestationCache=new HashMap<Entry,Entry.Manifest>(entries.size());
  List<Entry.Manifest> manifestEntries=new ArrayList<Entry.Manifest>(entries.size());
  for (  Entry entry : entries) {
    Entry.Manifest manifestEntry=manifestationCache.get(entry);
    if (manifestEntry == null) {
      manifestEntry=entry.manifest(instrumentedType);
      manifestationCache.put(entry,manifestEntry);
    }
    manifestEntries.add(manifestEntry);
  }
  MethodLookupEngine.Finding finding=methodLookupEngine.process(instrumentedType);
  MethodList instrumentedMethods=finding.getInvokableMethods().filter(not(matchesAny(manifestEntries)).or(ignoredMethods));
  Instrumentation.Target instrumentationTarget=instrumentationTargetFactory.make(finding,instrumentedMethods);
  Map<Entry.Manifest,Entry.Compiled> compilationCache=new HashMap<Entry.Manifest,Entry.Compiled>(entries.size());
  List<Entry.Compiled> compiledEntries=new ArrayList<Entry.Compiled>(entries.size());
  for (  Entry.Manifest entry : manifestEntries) {
    Entry.Compiled compiledEntry=compilationCache.get(entry);
    if (compiledEntry == null) {
      compiledEntry=entry.compile(instrumentationTarget);
      compilationCache.put(entry,compiledEntry);
    }
    compiledEntries.add(compiledEntry);
  }
  return new Compiled(instrumentedType,loadedTypeInitializer,typeInitializer,instrumentedMethods,compiledEntries);
}
