{
  Map<Prepareable,Prepareable.Compiled> compilationCache=new HashMap<Prepareable,Prepareable.Compiled>(instrumentations.size());
  Map<MethodAttributeAppender.Factory,MethodAttributeAppender> attributeAppenderCache=new HashMap<MethodAttributeAppender.Factory,MethodAttributeAppender>(instrumentations.size());
  Map<MethodDescription,TypeWriter.MethodPool.Entry> entries=new HashMap<MethodDescription,TypeWriter.MethodPool.Entry>(instrumentations.size());
  Instrumentation.Target instrumentationTarget=instrumentationTargetFactory.make(finding,getInstrumentedMethods());
  for (  Map.Entry<MethodDescription,Entry> entry : instrumentations.entrySet()) {
    Prepareable.Compiled cachedEntry=compilationCache.get(entry.getValue().getPrepareable());
    if (cachedEntry == null) {
      cachedEntry=entry.getValue().getPrepareable().compile(instrumentationTarget);
      compilationCache.put(entry.getValue().getPrepareable(),cachedEntry);
    }
    MethodAttributeAppender cachedAttributeAppender=attributeAppenderCache.get(entry.getValue().getAppenderFactory());
    if (cachedAttributeAppender == null) {
      cachedAttributeAppender=entry.getValue().getAppenderFactory().make(instrumentedType);
      attributeAppenderCache.put(entry.getValue().getAppenderFactory(),cachedAttributeAppender);
    }
    entries.put(entry.getKey(),cachedEntry.assemble(cachedAttributeAppender));
  }
  return new Compiled(instrumentedType,loadedTypeInitializer,typeInitializer,entries);
}
