{
  LinkedHashMap<MethodDescription,Prepared.Entry> implementations=new LinkedHashMap<MethodDescription,Prepared.Entry>();
  Set<Handler> handlers=new HashSet<Handler>(entries.size());
  MethodList<?> helperMethods=instrumentedType.getDeclaredMethods();
  for (  Entry entry : entries) {
    if (handlers.add(entry.getHandler())) {
      instrumentedType=entry.getHandler().prepare(instrumentedType);
      ElementMatcher<? super MethodDescription> handledMethods=noneOf(helperMethods);
      helperMethods=instrumentedType.getDeclaredMethods();
      for (      MethodDescription helperMethod : helperMethods.filter(handledMethods)) {
        implementations.put(helperMethod,entry.asPreparedEntry());
      }
    }
  }
  MethodGraph.Linked methodGraph=methodGraphCompiler.compile(instrumentedType);
  ElementMatcher<? super MethodDescription> relevanceMatcher=not(anyOf(implementations.keySet())).and(methodFilter.resolve(instrumentedType));
  for (  MethodGraph.Node node : methodGraph.listNodes()) {
    MethodDescription methodDescription=node.getRepresentative();
    boolean visibilityBridge=instrumentedType.isPublic() && !instrumentedType.isInterface();
    if (relevanceMatcher.matches(methodDescription)) {
      for (      Entry entry : entries) {
        if (entry.resolve(instrumentedType).matches(methodDescription)) {
          implementations.put(methodDescription,entry.asPreparedEntry());
          visibilityBridge=false;
          break;
        }
      }
    }
    if (visibilityBridge && methodDescription.isPublic() && !node.getVisibility().isVisible()&& methodDescription.getDeclaringType().asRawType().isPackagePrivate()) {
      implementations.put(methodDescription,Prepared.Entry.forVisibilityBridge(methodDescription));
    }
  }
  MethodDescription typeInitializer=new MethodDescription.Latent.TypeInitializer(instrumentedType);
  for (  Entry entry : entries) {
    if (entry.resolve(instrumentedType).matches(typeInitializer)) {
      implementations.put(typeInitializer,entry.asPreparedEntry());
      break;
    }
  }
  return new Prepared(implementations,instrumentedType.getLoadedTypeInitializer(),instrumentedType.getTypeInitializer(),instrumentedType,methodGraph);
}
