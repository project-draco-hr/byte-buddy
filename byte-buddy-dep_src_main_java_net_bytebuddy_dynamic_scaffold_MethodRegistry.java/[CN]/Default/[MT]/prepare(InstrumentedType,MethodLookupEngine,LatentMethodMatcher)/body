{
  LinkedHashMap<MethodDescription,Entry> implementations=new LinkedHashMap<MethodDescription,Entry>();
  Set<Handler> handlers=new HashSet<Handler>(entries.size());
  int helperMethodIndex=instrumentedType.getDeclaredMethods().size();
  for (  Entry entry : entries) {
    if (handlers.add(entry.getHandler())) {
      instrumentedType=entry.getHandler().prepare(instrumentedType);
      MethodList helperMethods=instrumentedType.getDeclaredMethods();
      for (      MethodDescription helperMethod : helperMethods.subList(helperMethodIndex,helperMethods.size())) {
        implementations.put(helperMethod,entry);
      }
      helperMethodIndex=helperMethods.size();
    }
  }
  MethodLookupEngine.Finding finding=methodLookupEngine.process(instrumentedType);
  List<MethodDescription> relevant=finding.getInvokableMethods().filter(not(anyOf(implementations.keySet())).and(methodFilter.resolve(instrumentedType)));
  for (  MethodDescription methodDescription : join(new MethodDescription.Latent.TypeInitializer(instrumentedType),relevant)) {
    for (    Entry entry : entries) {
      if (entry.resolve(instrumentedType).matches(methodDescription)) {
        implementations.put(methodDescription,entry);
        break;
      }
    }
  }
  return new Prepared(implementations,instrumentedType.getLoadedTypeInitializer(),instrumentedType.getTypeInitializer(),finding);
}
