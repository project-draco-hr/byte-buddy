{
  InstrumentedType instrumentedType=makePlainInstrumentedType();
  assertThat(instrumentedType.getDeclaredFields().size(),is(0));
  instrumentedType=instrumentedType.withMethod(new MethodDescription.Token(BAR,Opcodes.ACC_PUBLIC,TypeDescription.Generic.ForGenericArray.Latent.of(TargetType.GENERIC_DESCRIPTION,1),Collections.singletonList(TypeDescription.Generic.ForGenericArray.Latent.of(TargetType.GENERIC_DESCRIPTION,1))));
  assertThat(instrumentedType.getDeclaredMethods().size(),is(1));
  MethodDescription.InDefinedShape methodDescription=instrumentedType.getDeclaredMethods().get(0);
  assertThat(methodDescription.getReturnType().asErasure().isArray(),is(true));
  assertThat(methodDescription.getReturnType().getComponentType().asErasure(),sameInstance((TypeDescription)instrumentedType));
  assertThat(methodDescription.getParameters().size(),is(1));
  assertThat(methodDescription.getParameters().asTypeList().asErasures().get(0).isArray(),is(true));
  assertThat(methodDescription.getParameters().asTypeList().get(0).getComponentType().asErasure(),sameInstance((TypeDescription)instrumentedType));
  assertThat(methodDescription.getExceptionTypes().size(),is(0));
  assertThat(methodDescription.getModifiers(),is(Opcodes.ACC_PUBLIC));
  assertThat(methodDescription.getName(),is(BAR));
  assertThat(methodDescription.getDeclaringType(),sameInstance((TypeDescription)instrumentedType));
}
