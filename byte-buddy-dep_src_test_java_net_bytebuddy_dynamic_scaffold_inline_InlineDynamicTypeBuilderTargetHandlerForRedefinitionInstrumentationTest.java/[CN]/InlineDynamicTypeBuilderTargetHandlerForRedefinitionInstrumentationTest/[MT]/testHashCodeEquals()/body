{
  assertThat(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,methodLookupEngineFactory).hashCode(),is(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,methodLookupEngineFactory).hashCode()));
  assertThat(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,methodLookupEngineFactory),is(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,methodLookupEngineFactory)));
  assertThat(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,methodLookupEngineFactory).hashCode(),not(is(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,other).hashCode())));
  assertThat(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,methodLookupEngineFactory),not(is(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.INSTANCE.prepare(methodMatcher,classFileVersion,instrumentedType,other))));
}
