{
  Class<? extends Annotation> typeAnnotationType=(Class<? extends Annotation>)Class.forName(TYPE_VARIABLE_NAME);
  MethodDescription.InDefinedShape value=new TypeDescription.ForLoadedType(typeAnnotationType).getDeclaredMethods().filter(named(VALUE)).getOnly();
  Class<?> type=create(Class.forName(SIMPLE_TYPE_ANNOTATED)).merge(TypeManifestation.ABSTRACT).implement(TypeDescription.Generic.Builder.rawType(Callable.class).build(AnnotationDescription.Builder.ofType(typeAnnotationType).define(VALUE,QUX * 3).build())).make().load(typeAnnotationType.getClassLoader(),ClassLoadingStrategy.Default.CHILD_FIRST).getLoaded();
  assertThat(type.getInterfaces().length,is(2));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveInterfaceType(type,0).asList().size(),is(1));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveInterfaceType(type,0).asList().ofType(typeAnnotationType).getValue(value).resolve(Integer.class),is(QUX * 2));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveInterfaceType(type,1).asList().size(),is(1));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveInterfaceType(type,1).asList().ofType(typeAnnotationType).getValue(value).resolve(Integer.class),is(QUX * 3));
}
