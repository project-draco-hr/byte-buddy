{
  ClassLoader classLoader=new ByteArrayClassLoader(null,ClassFileExtraction.of(PackagePrivateVisibilityBridgeExtension.class,VisibilityBridge.class,FooBar.class),null,ByteArrayClassLoader.PersistenceHandler.LATENT,PackageDefiner.NoOp.INSTANCE);
  Class<?> type=create(PackagePrivateVisibilityBridgeExtension.class).modifiers(Opcodes.ACC_PUBLIC).make().load(classLoader,ClassLoadingStrategy.Default.INJECTION).getLoaded();
  assertThat(type.getDeclaredConstructors().length,is(1));
  Constructor<?> constructor=type.getDeclaredConstructor();
  constructor.setAccessible(true);
  assertThat(type.getDeclaredMethods().length,is(2));
  Method foo=type.getDeclaredMethod(FOO,String.class);
  foo.setAccessible(true);
  assertThat(foo.isBridge(),is(true));
  assertThat(foo.getDeclaredAnnotations().length,is(1));
  assertThat(foo.getDeclaredAnnotations()[0].annotationType().getName(),is(FooBar.class.getName()));
  assertThat(foo.invoke(constructor.newInstance(),BAR),is((Object)(FOO + BAR)));
  assertThat(foo.getParameterAnnotations()[0].length,is(1));
  assertThat(foo.getParameterAnnotations()[0][0].annotationType().getName(),is(FooBar.class.getName()));
  assertThat(foo.invoke(constructor.newInstance(),BAR),is((Object)(FOO + BAR)));
  Method bar=type.getDeclaredMethod(BAR,List.class);
  bar.setAccessible(true);
  assertThat(bar.isBridge(),is(true));
  assertThat(bar.getDeclaredAnnotations().length,is(0));
  List<?> list=new ArrayList<Object>();
  assertThat(bar.invoke(constructor.newInstance(),list),sameInstance((Object)list));
  assertThat(bar.getGenericReturnType(),instanceOf(Class.class));
  assertThat(bar.getGenericParameterTypes()[0],instanceOf(Class.class));
  assertThat(bar.getGenericExceptionTypes()[0],instanceOf(Class.class));
}
