{
  ClassLoader classLoader=new ByteArrayClassLoader(null,ClassFileExtraction.of(GenericType.class),null,ByteArrayClassLoader.PersistenceHandler.LATENT,PackageDefinitionStrategy.NoOp.INSTANCE);
  Class<?> dynamicType=create(GenericType.Inner.class).method(named(FOO)).intercept(StubMethod.INSTANCE).make().load(classLoader,ClassLoadingStrategy.Default.INJECTION).getLoaded();
  assertThat(dynamicType.getTypeParameters().length,is(2));
  assertThat(dynamicType.getTypeParameters()[0].getName(),is("T"));
  assertThat(dynamicType.getTypeParameters()[0].getBounds().length,is(1));
  assertThat(dynamicType.getTypeParameters()[0].getBounds()[0],instanceOf(Class.class));
  assertThat(dynamicType.getTypeParameters()[0].getBounds()[0],is((Type)String.class));
  assertThat(dynamicType.getTypeParameters()[1].getName(),is("S"));
  assertThat(dynamicType.getTypeParameters()[1].getBounds().length,is(1));
  assertThat(dynamicType.getTypeParameters()[1].getBounds()[0],is((Type)dynamicType.getTypeParameters()[0]));
  assertThat(dynamicType.getGenericSuperclass(),instanceOf(ParameterizedType.class));
  assertThat(((ParameterizedType)dynamicType.getGenericSuperclass()).getActualTypeArguments().length,is(1));
  assertThat(((ParameterizedType)dynamicType.getGenericSuperclass()).getActualTypeArguments()[0],instanceOf(ParameterizedType.class));
  ParameterizedType superType=(ParameterizedType)((ParameterizedType)dynamicType.getGenericSuperclass()).getActualTypeArguments()[0];
  assertThat(superType.getActualTypeArguments().length,is(2));
  assertThat(superType.getActualTypeArguments()[0],is((Type)dynamicType.getTypeParameters()[0]));
  assertThat(superType.getActualTypeArguments()[1],is((Type)dynamicType.getTypeParameters()[1]));
  assertThat(superType.getOwnerType(),instanceOf(ParameterizedType.class));
  assertThat(((ParameterizedType)superType.getOwnerType()).getRawType(),instanceOf(Class.class));
  assertThat(((Class<?>)((ParameterizedType)superType.getOwnerType()).getRawType()).getName(),is(GenericType.class.getName()));
  assertThat(((ParameterizedType)superType.getOwnerType()).getActualTypeArguments().length,is(1));
  assertThat(((ParameterizedType)superType.getOwnerType()).getActualTypeArguments()[0],is((Type)((Class<?>)((ParameterizedType)superType.getOwnerType()).getRawType()).getTypeParameters()[0]));
  assertThat(dynamicType.getGenericInterfaces().length,is(1));
  assertThat(dynamicType.getGenericInterfaces()[0],instanceOf(ParameterizedType.class));
  assertThat(((ParameterizedType)dynamicType.getGenericInterfaces()[0]).getActualTypeArguments()[0],instanceOf(ParameterizedType.class));
  assertThat(((ParameterizedType)dynamicType.getGenericInterfaces()[0]).getRawType(),is((Type)Callable.class));
  assertThat(((ParameterizedType)dynamicType.getGenericInterfaces()[0]).getOwnerType(),nullValue(Type.class));
  assertThat(((ParameterizedType)((ParameterizedType)dynamicType.getGenericInterfaces()[0]).getActualTypeArguments()[0]).getActualTypeArguments().length,is(2));
  ParameterizedType interfaceType=(ParameterizedType)((ParameterizedType)dynamicType.getGenericInterfaces()[0]).getActualTypeArguments()[0];
  assertThat(interfaceType.getRawType(),is((Type)Map.class));
  assertThat(interfaceType.getActualTypeArguments().length,is(2));
  assertThat(interfaceType.getActualTypeArguments()[0],instanceOf(WildcardType.class));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[0]).getUpperBounds().length,is(1));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[0]).getUpperBounds()[0],is((Type)Object.class));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[0]).getLowerBounds().length,is(1));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[0]).getLowerBounds()[0],is((Type)String.class));
  assertThat(interfaceType.getActualTypeArguments()[1],instanceOf(WildcardType.class));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[1]).getUpperBounds().length,is(1));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[1]).getUpperBounds()[0],is((Type)String.class));
  assertThat(((WildcardType)interfaceType.getActualTypeArguments()[1]).getLowerBounds().length,is(0));
  Method foo=dynamicType.getDeclaredMethod(FOO,String.class);
  assertThat(foo.getGenericReturnType(),instanceOf(ParameterizedType.class));
  assertThat(((ParameterizedType)foo.getGenericReturnType()).getActualTypeArguments().length,is(1));
  assertThat(((ParameterizedType)foo.getGenericReturnType()).getActualTypeArguments()[0],instanceOf(GenericArrayType.class));
  assertThat(((GenericArrayType)((ParameterizedType)foo.getGenericReturnType()).getActualTypeArguments()[0]).getGenericComponentType(),is((Type)dynamicType.getTypeParameters()[0]));
  assertThat(foo.getTypeParameters().length,is(2));
  assertThat(foo.getTypeParameters()[0].getName(),is("V"));
  assertThat(foo.getTypeParameters()[0].getBounds().length,is(1));
  assertThat(foo.getTypeParameters()[0].getBounds()[0],is((Type)dynamicType.getTypeParameters()[0]));
  assertThat(foo.getTypeParameters()[1].getName(),is("W"));
  assertThat(foo.getTypeParameters()[1].getBounds().length,is(1));
  assertThat(foo.getTypeParameters()[1].getBounds()[0],is((Type)Exception.class));
  assertThat(foo.getGenericParameterTypes().length,is(1));
  assertThat(foo.getGenericParameterTypes()[0],is((Type)foo.getTypeParameters()[0]));
  assertThat(foo.getGenericExceptionTypes().length,is(1));
  assertThat(foo.getGenericExceptionTypes()[0],is((Type)foo.getTypeParameters()[1]));
  Method call=dynamicType.getDeclaredMethod("call");
  assertThat(call.getGenericReturnType(),is((Type)interfaceType));
}
