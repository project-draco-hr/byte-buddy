{
  Class<?> dynamicType=create(typePool.describe(PARAMETER_NAME_CLASS).resolve(),ClassFileLocator.ForClassLoader.ofClassPath()).method(named(FOO)).intercept(StubMethod.INSTANCE).make().load(new URLClassLoader(new URL[0],null),ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  Class<?> executable=Class.forName("java.lang.reflect.Executable");
  Method getParameters=executable.getDeclaredMethod("getParameters");
  Class<?> parameter=Class.forName("java.lang.reflect.Parameter");
  Method getName=parameter.getDeclaredMethod("getName");
  Method getModifiers=parameter.getDeclaredMethod("getModifiers");
  Method first=dynamicType.getDeclaredMethod("foo",String.class,long.class,int.class);
  Object[] methodParameter=(Object[])getParameters.invoke(first);
  assertThat(getName.invoke(methodParameter[0]),is((Object)"first"));
  assertThat(getName.invoke(methodParameter[1]),is((Object)"second"));
  assertThat(getName.invoke(methodParameter[2]),is((Object)"third"));
  assertThat(getModifiers.invoke(methodParameter[0]),is((Object)Opcodes.ACC_FINAL));
  assertThat(getModifiers.invoke(methodParameter[1]),is((Object)0));
  assertThat(getModifiers.invoke(methodParameter[2]),is((Object)0));
}
