{
  ClassVisitorWrapper classVisitorWrapper=mock(ClassVisitorWrapper.class);
  when(classVisitorWrapper.wrap(any(ClassVisitor.class))).then(new Answer<ClassVisitor>(){
    @Override public ClassVisitor answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return new ClassVisitor(Opcodes.ASM5,(ClassVisitor)invocationOnMock.getArguments()[0]){
        @Override public MethodVisitor visitMethod(        int access,        String name,        String desc,        String signature,        String[] exceptions){
          return new LocalVariablesSorter(access,desc,super.visitMethod(access,name,desc,signature,exceptions));
        }
      }
;
    }
  }
);
  when(classVisitorWrapper.wrapWriter(0)).thenReturn(ClassWriter.COMPUTE_MAXS);
  when(classVisitorWrapper.wrapReader(0)).thenReturn(ClassReader.EXPAND_FRAMES);
  Class<?> type=create(StackMapFrames.class).classVisitor(classVisitorWrapper).make().load(null,ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  assertThat(type.getDeclaredMethod(FOO).invoke(type.newInstance()),is((Object)BAR));
  verify(classVisitorWrapper).wrapWriter(0);
  verify(classVisitorWrapper).wrapReader(0);
  verify(classVisitorWrapper).wrap(any(ClassVisitor.class));
  verifyNoMoreInteractions(classVisitorWrapper);
}
