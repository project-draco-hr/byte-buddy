{
  Map<Class<?>,ClassDefinition> classDefinitions=new ConcurrentHashMap<Class<?>,ClassDefinition>(type.length);
  try {
    for (    Class<?> aType : type) {
      ClassLoader classLoader=aType.getClassLoader();
      InputStream inputStream=(classLoader == null ? ClassLoader.getSystemClassLoader() : classLoader).getResourceAsStream(aType.getName().replace('.','/') + CLASS_FILE_EXTENSION);
      try {
        classDefinitions.put(aType,new ClassDefinition(aType,new StreamDrainer().drain(inputStream)));
      }
  finally {
        inputStream.close();
      }
    }
  }
 catch (  IOException exception) {
    throw new IllegalStateException("Exception while resetting types " + Arrays.toString(type),exception);
  }
  try {
    engine.apply(instrumentation,classDefinitions);
  }
 catch (  ClassNotFoundException exception) {
    throw new IllegalArgumentException("Cannot locate types " + Arrays.toString(type),exception);
  }
catch (  UnmodifiableClassException exception) {
    throw new IllegalStateException("Cannot reset types " + Arrays.toString(type),exception);
  }
  return this;
}
