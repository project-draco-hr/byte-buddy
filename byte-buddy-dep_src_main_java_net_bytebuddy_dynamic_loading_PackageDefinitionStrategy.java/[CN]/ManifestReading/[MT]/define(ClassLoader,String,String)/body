{
  InputStream inputStream=classLoader.getResourceAsStream(MANIFEST_FILE);
  if (inputStream != null) {
    try {
      try {
        Manifest manifest=new Manifest(inputStream);
        Map<Attributes.Name,String> values=new HashMap<Attributes.Name,String>();
        Attributes mainAttributes=manifest.getMainAttributes();
        if (mainAttributes != null) {
          for (          Attributes.Name attributeName : ATTRIBUTE_NAMES) {
            values.put(attributeName,mainAttributes.getValue(attributeName));
          }
        }
        Attributes attributes=manifest.getAttributes(packageName.replace('.','/').concat("/"));
        if (attributes != null) {
          for (          Attributes.Name attributeName : ATTRIBUTE_NAMES) {
            String value=attributes.getValue(attributeName);
            if (value != null) {
              values.put(attributeName,value);
            }
          }
        }
        return new Definition.Simple(values.get(Attributes.Name.SPECIFICATION_TITLE),values.get(Attributes.Name.SPECIFICATION_VERSION),values.get(Attributes.Name.SPECIFICATION_VENDOR),values.get(Attributes.Name.IMPLEMENTATION_TITLE),values.get(Attributes.Name.IMPLEMENTATION_VERSION),values.get(Attributes.Name.IMPLEMENTATION_VENDOR),Boolean.parseBoolean(values.get(Attributes.Name.SEALED)) ? sealBaseLocator.findSealBase(classLoader,typeName) : NOT_SEALED);
      }
  finally {
        inputStream.close();
      }
    }
 catch (    IOException exception) {
      throw new IllegalStateException("Error while reading manifest file",exception);
    }
  }
 else {
    return Definition.Trivial.INSTANCE;
  }
}
