{
  ClassWriter classWriter=new ClassWriter(ASM_MANUAL);
  classWriter.visit(classVersion.getVersionNumber(),DEFAULT_TYPE_ACCESS,proxyTypeInternalName,null,OBJECT_INTERNAL_NAME,Interface.getInternalNames());
  for (  Map.Entry<String,TypeDescription> field : fields.entrySet()) {
    classWriter.visitField(FIELD_ACCESS,field.getKey(),field.getValue().getDescriptor(),null,null).visitEnd();
  }
  MethodVisitor constructor=classWriter.visitMethod(CONSTRUCTOR_ACCESS,CONSTRUCTOR_INTERNAL_NAME,constructorDescriptor,null,null);
  constructor.visitCode();
  int argumentIndex=1;
  constructor.visitIntInsn(Opcodes.ALOAD,0);
  constructor.visitMethodInsn(Opcodes.INVOKESPECIAL,OBJECT_INTERNAL_NAME,CONSTRUCTOR_INTERNAL_NAME,DEFAULT_CONSTRUCTOR_DESCRIPTOR);
  int currentMaximum=1;
  for (  Map.Entry<String,TypeDescription> field : fields.entrySet()) {
    constructor.visitIntInsn(Opcodes.ALOAD,0);
    MethodArgument.forType(field.getValue()).loadFromIndex(argumentIndex).apply(constructor);
    constructor.visitFieldInsn(Opcodes.PUTFIELD,proxyTypeInternalName,field.getKey(),field.getValue().getDescriptor());
    currentMaximum=Math.max(currentMaximum,field.getValue().getStackSize().getSize() + 1);
    argumentIndex+=field.getValue().getStackSize().getSize();
  }
  constructor.visitInsn(Opcodes.RETURN);
  constructor.visitMaxs(currentMaximum,proxiedMethod.getStackSize() + 1);
  constructor.visitEnd();
  for (  Interface anInterface : Interface.values()) {
    anInterface.implement(classWriter,proxyTypeInternalName,proxiedMethod,fields,assigner);
  }
  classWriter.visitEnd();
  return classWriter.toByteArray();
}
