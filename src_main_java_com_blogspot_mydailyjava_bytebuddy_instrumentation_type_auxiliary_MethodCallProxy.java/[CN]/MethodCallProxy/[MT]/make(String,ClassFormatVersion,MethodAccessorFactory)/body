{
  MethodDescription accessorMethod=methodAccessorFactory.requireAccessorMethodFor(targetMethod);
  LinkedHashMap<String,TypeDescription> parameterFields=extractFields(accessorMethod);
  DynamicType.Builder<?> builder=new ByteBuddy(classFormatVersion).subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).name(auxiliaryTypeName).modifiers(DEFAULT_TYPE_MODIFIER.toArray(new ModifierContributor.ForType[DEFAULT_TYPE_MODIFIER.size()])).modifiers(Visibility.PACKAGE_PRIVATE,SyntheticState.SYNTHETIC).implement(Runnable.class).intercept(new MethodCall(accessorMethod,assigner)).implement(Callable.class).intercept(new MethodCall(accessorMethod,assigner)).defineConstructorDescriptive(new ArrayList<TypeDescription>(parameterFields.values())).intercept(new ConstructorCall());
  for (  Map.Entry<String,TypeDescription> field : parameterFields.entrySet()) {
    builder=builder.defineField(field.getKey(),field.getValue(),Visibility.PRIVATE);
  }
  return builder.make();
}
