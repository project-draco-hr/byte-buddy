{
  TypeDescription.Generic typeDescription=describe(TypeResolution.class.getDeclaredField(BAR));
  assertThat(typeDescription.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(typeDescription.getParameters().size(),is(1));
  TypeDescription.Generic interfaceType=typeDescription.getInterfaces().getOnly();
  assertThat(interfaceType.getSort(),is(TypeDefinition.Sort.NON_GENERIC));
  assertThat(interfaceType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(TypeResolution.BaseInterface.class)));
  assertThat(interfaceType.getParameters().size(),is(0));
  assertThat(interfaceType.getDeclaredFields().size(),is(0));
  TypeDescription.Generic methodReturnType=interfaceType.getDeclaredMethods().filter(isMethod()).getOnly().getReturnType();
  assertThat(methodReturnType.getSort(),is(TypeDefinition.Sort.NON_GENERIC));
  assertThat(methodReturnType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(methodReturnType.getParameters().size(),is(0));
  TypeDescription.Generic methodParameterType=interfaceType.getDeclaredMethods().filter(isMethod()).getOnly().getParameters().asTypeList().getOnly();
  assertThat(methodParameterType.getSort(),is(TypeDefinition.Sort.NON_GENERIC));
  assertThat(methodParameterType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(methodParameterType.getParameters().size(),is(0));
  assertThat(interfaceType.getDeclaredMethods().getOnly().getDeclaringType().getDeclaredMethods().getOnly().getReturnType(),is(interfaceType.getDeclaredMethods().getOnly().getReturnType()));
  assertThat(interfaceType.getDeclaredMethods().getOnly().getDeclaringType().getDeclaredMethods().getOnly().getParameters().getOnly().getType(),is(interfaceType.getDeclaredMethods().getOnly().getParameters().getOnly().getType()));
}
