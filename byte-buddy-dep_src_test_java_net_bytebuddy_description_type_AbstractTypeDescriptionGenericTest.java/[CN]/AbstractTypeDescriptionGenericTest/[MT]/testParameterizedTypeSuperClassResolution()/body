{
  TypeDescription.Generic typeDescription=describeType(TypeResolution.class.getDeclaredField(FOO));
  assertThat(typeDescription.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(typeDescription.getTypeArguments().size(),is(1));
  TypeDescription.Generic superClass=typeDescription.getSuperClass();
  assertThat(superClass.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(superClass.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(TypeResolution.Base.class)));
  assertThat(superClass.getTypeArguments().size(),is(2));
  assertThat(superClass.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(superClass.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
  assertThat(superClass.getDeclaredFields().size(),is(1));
  assertThat(superClass.getDeclaredFields().getOnly().getDeclaringType(),is(superClass));
  TypeDescription.Generic fieldType=superClass.getDeclaredFields().getOnly().getType();
  assertThat(fieldType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(fieldType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(fieldType.getTypeArguments().size(),is(2));
  assertThat(fieldType.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(fieldType.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
  assertThat(superClass.getDeclaredMethods().filter(isConstructor()).size(),is(1));
  assertThat(superClass.getDeclaredMethods().filter(isMethod()).size(),is(1));
  assertThat(superClass.getDeclaredMethods().filter(isMethod()).getOnly().getDeclaringType(),is((superClass)));
  assertThat(superClass.getDeclaredMethods().filter(isConstructor()).getOnly().getDeclaringType(),is((superClass)));
  TypeDescription.Generic methodReturnType=superClass.getDeclaredMethods().filter(isMethod()).getOnly().getReturnType();
  assertThat(methodReturnType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(methodReturnType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(methodReturnType.getTypeArguments().size(),is(2));
  assertThat(methodReturnType.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(methodReturnType.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
  TypeDescription.Generic methodParameterType=superClass.getDeclaredMethods().filter(isMethod()).getOnly().getParameters().asTypeList().getOnly();
  assertThat(methodParameterType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(methodParameterType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(methodParameterType.getTypeArguments().size(),is(2));
  assertThat(methodParameterType.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(methodParameterType.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
}
