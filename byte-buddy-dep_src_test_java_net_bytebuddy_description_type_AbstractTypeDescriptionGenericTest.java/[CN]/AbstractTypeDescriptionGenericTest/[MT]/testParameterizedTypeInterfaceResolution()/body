{
  TypeDescription.Generic typeDescription=describeType(TypeResolution.class.getDeclaredField(FOO));
  assertThat(typeDescription.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(typeDescription.getTypeArguments().size(),is(1));
  assertThat(typeDescription.getInterfaces().size(),is(1));
  TypeDescription.Generic interfaceType=typeDescription.getInterfaces().getOnly();
  assertThat(interfaceType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(interfaceType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(TypeResolution.BaseInterface.class)));
  assertThat(interfaceType.getTypeArguments().size(),is(2));
  assertThat(interfaceType.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(interfaceType.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
  assertThat(interfaceType.getDeclaredFields().size(),is(0));
  assertThat(interfaceType.getDeclaredMethods().filter(isConstructor()).size(),is(0));
  assertThat(interfaceType.getDeclaredMethods().filter(isMethod()).size(),is(1));
  assertThat(interfaceType.getDeclaredMethods().filter(isMethod()).getOnly().getDeclaringType(),is((interfaceType)));
  TypeDescription.Generic methodReturnType=interfaceType.getDeclaredMethods().filter(isMethod()).getOnly().getReturnType();
  assertThat(methodReturnType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(methodReturnType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(methodReturnType.getTypeArguments().size(),is(2));
  assertThat(methodReturnType.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(methodReturnType.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
  TypeDescription.Generic methodParameterType=interfaceType.getDeclaredMethods().filter(isMethod()).getOnly().getParameters().asTypeList().getOnly();
  assertThat(methodParameterType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(methodParameterType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(Qux.class)));
  assertThat(methodParameterType.getTypeArguments().size(),is(2));
  assertThat(methodParameterType.getTypeArguments().get(0),is((TypeDefinition)new TypeDescription.ForLoadedType(Foo.class)));
  assertThat(methodParameterType.getTypeArguments().get(1),is((TypeDefinition)new TypeDescription.ForLoadedType(Bar.class)));
}
