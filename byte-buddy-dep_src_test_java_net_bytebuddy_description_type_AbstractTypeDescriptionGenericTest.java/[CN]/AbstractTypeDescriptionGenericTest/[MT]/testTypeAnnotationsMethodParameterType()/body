{
  Class<? extends Annotation> typeAnnotation=(Class<? extends Annotation>)Class.forName(TYPE_ANNOTATION);
  MethodDescription.InDefinedShape value=new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
  Class<?> samples=Class.forName(TYPE_ANNOTATION_SAMPLES);
  TypeDescription.Generic parameterType=describeParameterType(samples.getDeclaredMethod(FOO,Exception[][].class),0);
  assertThat(parameterType.getSort(),is(TypeDefinition.Sort.GENERIC_ARRAY));
  assertThat(parameterType.getDeclaredAnnotations().size(),is(1));
  assertThat(parameterType.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation),is(true));
  assertThat(parameterType.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value,Integer.class),is(24));
  assertThat(parameterType.getComponentType().getSort(),is(TypeDefinition.Sort.GENERIC_ARRAY));
  assertThat(parameterType.getComponentType().getDeclaredAnnotations().size(),is(1));
  assertThat(parameterType.getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation),is(true));
  assertThat(parameterType.getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value,Integer.class),is(25));
  assertThat(parameterType.getComponentType().getComponentType().getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().size(),is(1));
  assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation),is(true));
  assertThat(parameterType.getComponentType().getComponentType().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value,Integer.class),is(23));
}
