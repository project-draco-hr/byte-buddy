{
  Dispatcher.Unresolved methodEnter=Dispatcher.Inactive.INSTANCE, methodExit=Dispatcher.Inactive.INSTANCE;
  for (  MethodDescription.InDefinedShape methodDescription : advice.getDeclaredMethods()) {
    methodEnter=locate(OnMethodEnter.class,INLINE_ENTER,methodEnter,methodDescription);
    methodExit=locate(OnMethodExit.class,INLINE_EXIT,methodExit,methodDescription);
  }
  if (!methodEnter.isAlive() && !methodExit.isAlive()) {
    throw new IllegalArgumentException("No advice defined by " + advice);
  }
  try {
    ClassReader classReader=methodEnter.isBinary() || methodExit.isBinary() ? new ClassReader(classFileLocator.locate(advice.getName()).resolve()) : UNDEFINED;
    Dispatcher.Resolved.ForMethodEnter resolved=methodEnter.asMethodEnter(userFactories,classReader);
    return new Advice(resolved,methodExit.asMethodExitTo(userFactories,classReader,resolved));
  }
 catch (  IOException exception) {
    throw new IllegalStateException("Error reading class file of " + advice,exception);
  }
}
