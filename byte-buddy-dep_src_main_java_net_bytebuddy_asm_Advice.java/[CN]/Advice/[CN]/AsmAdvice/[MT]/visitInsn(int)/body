{
switch (opcode) {
case Opcodes.RETURN:
    onMethodExit();
  break;
case Opcodes.IRETURN:
onMethodExit(Opcodes.DUP,Opcodes.ISTORE,Opcodes.ILOAD);
break;
case Opcodes.FRETURN:
onMethodExit(Opcodes.DUP,Opcodes.FSTORE,Opcodes.FLOAD);
break;
case Opcodes.DRETURN:
onMethodExit(Opcodes.DUP2,Opcodes.DSTORE,Opcodes.DLOAD);
break;
case Opcodes.LRETURN:
onMethodExit(Opcodes.DUP2,Opcodes.LSTORE,Opcodes.LLOAD);
break;
case Opcodes.ATHROW:
if (methodExit.isSkipException()) {
break;
}
 else if (instrumentedMethod.getReturnType().represents(boolean.class) || instrumentedMethod.getReturnType().represents(byte.class) || instrumentedMethod.getReturnType().represents(short.class)|| instrumentedMethod.getReturnType().represents(char.class)|| instrumentedMethod.getReturnType().represents(int.class)) {
mv.visitInsn(Opcodes.ICONST_0);
mv.visitVarInsn(Opcodes.ISTORE,instrumentedMethod.getStackSize() + methodEnter.getEnterType().getStackSize().getSize());
}
 else if (instrumentedMethod.getReturnType().represents(long.class)) {
mv.visitInsn(Opcodes.LCONST_0);
mv.visitVarInsn(Opcodes.LSTORE,instrumentedMethod.getStackSize() + methodEnter.getEnterType().getStackSize().getSize());
}
 else if (instrumentedMethod.getReturnType().represents(float.class)) {
mv.visitInsn(Opcodes.FCONST_0);
mv.visitVarInsn(Opcodes.FSTORE,instrumentedMethod.getStackSize() + methodEnter.getEnterType().getStackSize().getSize());
}
 else if (instrumentedMethod.getReturnType().represents(double.class)) {
mv.visitInsn(Opcodes.DCONST_0);
mv.visitVarInsn(Opcodes.DSTORE,instrumentedMethod.getStackSize() + methodEnter.getEnterType().getStackSize().getSize());
}
 else if (!instrumentedMethod.getReturnType().represents(void.class)) {
mv.visitInsn(Opcodes.ACONST_NULL);
mv.visitVarInsn(Opcodes.ASTORE,instrumentedMethod.getStackSize() + methodEnter.getEnterType().getStackSize().getSize());
}
onMethodExit();
break;
case Opcodes.ARETURN:
onMethodExit(Opcodes.DUP,Opcodes.ASTORE,Opcodes.ALOAD);
break;
}
mv.visitInsn(opcode);
}
