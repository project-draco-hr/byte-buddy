{
switch (opcode) {
case Opcodes.RETURN:
    super.visitJumpInsn(Opcodes.GOTO,endOfMethod);
  break;
case Opcodes.IRETURN:
super.visitVarInsn(Opcodes.ISTORE,instrumentedMethod.getStackSize() + instrumentedMethod.getReturnType().asErasure().getStackSize().getSize());
super.visitJumpInsn(Opcodes.GOTO,endOfMethod);
break;
case Opcodes.FRETURN:
super.visitVarInsn(Opcodes.FSTORE,instrumentedMethod.getStackSize() + instrumentedMethod.getReturnType().asErasure().getStackSize().getSize());
super.visitJumpInsn(Opcodes.GOTO,endOfMethod);
break;
case Opcodes.ARETURN:
super.visitVarInsn(Opcodes.ASTORE,instrumentedMethod.getStackSize() + instrumentedMethod.getReturnType().asErasure().getStackSize().getSize());
super.visitJumpInsn(Opcodes.GOTO,endOfMethod);
break;
case Opcodes.LRETURN:
super.visitVarInsn(Opcodes.LSTORE,instrumentedMethod.getStackSize() + instrumentedMethod.getReturnType().asErasure().getStackSize().getSize());
super.visitJumpInsn(Opcodes.GOTO,endOfMethod);
break;
case Opcodes.DRETURN:
super.visitVarInsn(Opcodes.DSTORE,instrumentedMethod.getStackSize() + instrumentedMethod.getReturnType().asErasure().getStackSize().getSize());
super.visitJumpInsn(Opcodes.GOTO,endOfMethod);
break;
default :
super.visitInsn(opcode);
}
}
