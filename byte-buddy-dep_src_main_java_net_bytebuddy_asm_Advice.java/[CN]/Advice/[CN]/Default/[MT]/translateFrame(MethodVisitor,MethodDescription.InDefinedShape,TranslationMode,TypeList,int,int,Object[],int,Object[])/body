{
switch (type) {
case Opcodes.F_SAME:
case Opcodes.F_SAME1:
    break;
case Opcodes.F_APPEND:
  currentFrameDivergence+=localVariableLength;
break;
case Opcodes.F_CHOP:
currentFrameDivergence-=localVariableLength;
break;
case Opcodes.F_FULL:
case Opcodes.F_NEW:
Object[] translated=new Object[localVariableLength - methodDescription.getParameters().size() - (methodDescription.isStatic() ? 0 : 1) + instrumentedMethod.getParameters().size() + (instrumentedMethod.isStatic() ? 0 : 1) + additionalTypes.size()];
int index=translationMode.copy(instrumentedMethod,methodDescription,localVariable,translated);
for (TypeDescription typeDescription : additionalTypes) {
translated[index++]=toFrame(typeDescription);
}
System.arraycopy(localVariable,methodDescription.getParameters().size() + (methodDescription.isStatic() ? 0 : 1),translated,index,translated.length - index);
localVariableLength=translated.length;
localVariable=translated;
currentFrameDivergence=translated.length - index;
break;
default :
throw new IllegalArgumentException("Unexpected frame type: " + type);
}
methodVisitor.visitFrame(type,localVariableLength,localVariable,stackSize,stack);
}
