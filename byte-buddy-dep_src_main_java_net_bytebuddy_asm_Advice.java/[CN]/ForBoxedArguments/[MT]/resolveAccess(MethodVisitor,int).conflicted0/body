{
switch (opcode) {
case Opcodes.ALOAD:
    loadNonNegativeInteger(methodVisitor,parameters.size());
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,TypeDescription.OBJECT.getInternalName());
for (ParameterDescription parameter : parameters) {
  methodVisitor.visitInsn(Opcodes.DUP);
  loadNonNegativeInteger(methodVisitor,parameter.getIndex());
  ForBoxedParameter.BoxingDispatcher.of(parameter.getType()).loadBoxed(methodVisitor,parameter.getOffset());
  methodVisitor.visitInsn(Opcodes.AASTORE);
}
break;
case Opcodes.ILOAD:
case Opcodes.LLOAD:
case Opcodes.FLOAD:
case Opcodes.DLOAD:
case Opcodes.ISTORE:
case Opcodes.FSTORE:
case Opcodes.ASTORE:
case Opcodes.LSTORE:
case Opcodes.DSTORE:
throw new IllegalStateException();
default :
throw new IllegalStateException("Unexpected opcode: " + opcode);
}
}
