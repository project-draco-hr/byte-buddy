{
  when(tokenTransformer.transform(methodToken)).thenReturn(methodToken);
  MethodDescription transformed=new MethodTransformer.Simple(tokenTransformer).transform(instrumentedType,methodDescription);
  assertThat(transformed.getDeclaringType(),is((TypeDefinition)declaringType));
  assertThat(transformed.getInternalName(),is(FOO));
  assertThat(transformed.getModifiers(),is(MODIFIERS));
  assertThat(transformed.getReturnType(),is(returnType));
  assertThat(transformed.getTypeVariables().size(),is(1));
  assertThat(transformed.getTypeVariables().getOnly().getSymbol(),is(QUX));
  assertThat(transformed.getExceptionTypes().size(),is(1));
  assertThat(transformed.getExceptionTypes().getOnly(),is(exceptionType));
  assertThat(transformed.getParameters().size(),is(1));
  assertThat(transformed.getParameters().getOnly().getType(),is(parameterType));
  assertThat(transformed.getParameters().getOnly().getName(),is(BAR));
  assertThat(transformed.getParameters().getOnly().getModifiers(),is(MODIFIERS * 2));
  assertThat(transformed.getParameters().getOnly().getDeclaredAnnotations().size(),is(1));
  assertThat(transformed.getParameters().getOnly().getDeclaredAnnotations().getOnly(),is(parameterAnnotation));
  assertThat(transformed.getParameters().getOnly().asDefined(),is(definedParameter));
  assertThat(transformed.getParameters().getOnly().getDeclaringMethod(),is(transformed));
  assertThat(transformed.asDefined(),is(definedMethod));
}
