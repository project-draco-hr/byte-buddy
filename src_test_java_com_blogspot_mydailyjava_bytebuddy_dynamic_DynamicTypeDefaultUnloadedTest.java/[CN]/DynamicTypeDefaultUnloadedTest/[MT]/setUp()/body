{
  typeByte=new byte[]{0,1,2};
  auxiliaryTypeByte=new byte[]{4,5,6};
  unloaded=new DynamicType.Default.Unloaded<Object>(FOO,typeByte,mainTypeInitializer,Collections.<DynamicType<?>>singletonList(auxiliaryType));
  LinkedHashMap<String,Class<?>> loadedTypes=new LinkedHashMap<String,Class<?>>();
  loadedTypes.put(FOO,Void.class);
  loadedTypes.put(BAR,Object.class);
  when(classLoadingStrategy.load(any(ClassLoader.class),any(LinkedHashMap.class))).thenReturn(loadedTypes);
  when(auxiliaryType.getName()).thenReturn(BAR);
  when(auxiliaryType.getBytes()).thenReturn(auxiliaryTypeByte);
  when(auxiliaryType.getTypeInitializers()).thenReturn(Collections.singletonMap(BAR,auxiliaryTypeInitializer));
  when(auxiliaryType.getRawAuxiliaryTypes()).thenReturn(Collections.<String,byte[]>emptyMap());
}
