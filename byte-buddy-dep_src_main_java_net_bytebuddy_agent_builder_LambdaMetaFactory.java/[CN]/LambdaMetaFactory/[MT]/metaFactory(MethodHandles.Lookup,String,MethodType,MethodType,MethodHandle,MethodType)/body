{
  JavaInstance.MethodType factoryMethodType=JavaInstance.MethodType.of(invokedType);
  JavaInstance.MethodType lambdaMethodType=JavaInstance.MethodType.of(samMethodType);
  DynamicType.Builder<?> builder=new ByteBuddy().subclass(lambdaMethodType.getReturnType()).modifiers(SyntheticState.SYNTHETIC,TypeManifestation.FINAL).implement(factoryMethodType.getReturnType()).name(caller.lookupClass().getName() + "$$Lambda$" + lambdaNameCounter.incrementAndGet());
  int index=0;
  for (  TypeDescription parameterTypes : factoryMethodType.getParameterTypes()) {
    builder=builder.defineField("arg$" + index++,parameterTypes,Visibility.PUBLIC,FieldManifestation.FINAL);
  }
  if (!factoryMethodType.getParameterTypes().isEmpty()) {
    builder=builder.defineMethod("get$Lambda",factoryMethodType.getReturnType(),Visibility.PRIVATE,Ownership.STATIC).intercept(new FactoryImplementation());
  }
  byte[] classFile=builder.defineConstructor(Visibility.PRIVATE).intercept(SuperMethodCall.INSTANCE.andThen(new ConstructorImplementation())).method(named(invokedName).and(takesArguments(factoryMethodType.getParameterTypes())).and(returns(factoryMethodType.getReturnType()))).intercept(new LambdaMethodImplementation()).make().getBytes();
  for (  ClassFileTransformer classFileTransformer : CLASS_FILE_TRANSFORMERS) {
    byte[] transformedClassFile=classFileTransformer.transform(null,null,null,null,classFile);
    classFile=transformedClassFile == null ? classFile : transformedClassFile;
  }
  return classFile;
}
