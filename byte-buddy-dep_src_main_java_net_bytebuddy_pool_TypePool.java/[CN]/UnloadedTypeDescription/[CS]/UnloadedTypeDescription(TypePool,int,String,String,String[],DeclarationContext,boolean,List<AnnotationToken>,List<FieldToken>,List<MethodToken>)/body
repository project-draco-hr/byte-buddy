{
  this.typePool=typePool;
  this.modifiers=modifiers;
  this.name=name.replace('/','.');
  this.superTypeName=superTypeName == null ? null : superTypeName.replace('/','.');
  if (interfaceName != null) {
    this.interfaceName=new String[interfaceName.length];
    int index=0;
    for (    String anInterfaceName : interfaceName) {
      this.interfaceName[index++]=anInterfaceName.replace('/','.');
    }
  }
 else {
    this.interfaceName=null;
  }
  this.declarationContext=declarationContext;
  this.anonymousType=anonymousType;
  declaredAnnotations=new ArrayList<AnnotationDescription>(annotationTokens.size());
  for (  AnnotationToken annotationToken : annotationTokens) {
    declaredAnnotations.add(annotationToken.toAnnotationDescription(typePool));
  }
  declaredFields=new ArrayList<FieldDescription>(fieldTokens.size());
  for (  FieldToken fieldToken : fieldTokens) {
    declaredFields.add(fieldToken.toFieldDescription(this));
  }
  declaredMethods=new ArrayList<MethodDescription>(methodTokens.size());
  for (  MethodToken methodToken : methodTokens) {
    declaredMethods.add(methodToken.toMethodDescription(this));
  }
}
