{
  this.typePool=typePool;
  this.modifiers=modifiers;
  this.name=name.replace('/','.');
  this.superTypeName=superTypeInternalName == null ? null : superTypeInternalName.replace('/','.');
  this.signatureResolution=signatureResolution;
  this.interfaceInternalName=interfaceInternalName;
  this.declarationContext=declarationContext;
  this.anonymousType=anonymousType;
  declaredAnnotations=new ArrayList<AnnotationDescription>(annotationTokens.size());
  for (  AnnotationToken annotationToken : annotationTokens) {
    declaredAnnotations.add(annotationToken.toAnnotationDescription(typePool));
  }
  declaredFields=new ArrayList<FieldDescription>(fieldTokens.size());
  for (  FieldToken fieldToken : fieldTokens) {
    declaredFields.add(fieldToken.toFieldDescription(this));
  }
  declaredMethods=new ArrayList<MethodDescription>(methodTokens.size());
  for (  MethodToken methodToken : methodTokens) {
    declaredMethods.add(methodToken.toMethodDescription(this));
  }
}
