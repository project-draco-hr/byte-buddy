{
  this.typePool=typePool;
  this.modifiers=modifiers & ~Opcodes.ACC_SUPER;
  this.name=Type.getObjectType(name).getClassName();
  this.superTypeDescriptor=superTypeInternalName == null ? NO_SUPER_TYPE : Type.getObjectType(superTypeInternalName).getDescriptor();
  this.signatureResolution=signatureResolution;
  if (interfaceInternalName == null) {
    interfaceTypeDescriptors=Collections.emptyList();
  }
 else {
    interfaceTypeDescriptors=new ArrayList<String>(interfaceInternalName.length);
    for (    String internalName : interfaceInternalName) {
      interfaceTypeDescriptors.add(Type.getObjectType(internalName).getDescriptor());
    }
  }
  this.declarationContext=declarationContext;
  this.declaredTypes=declaredTypes;
  this.anonymousType=anonymousType;
  this.superTypeAnnotationTokens=superTypeAnnotationTokens;
  this.typeVariableAnnotationTokens=typeVariableAnnotationTokens;
  this.typeVariableBoundsAnnotationTokens=typeVariableBoundsAnnotationTokens;
  this.annotationTokens=annotationTokens;
  declaredFields=new ArrayList<FieldDescription.InDefinedShape>(fieldTokens.size());
  for (  FieldToken fieldToken : fieldTokens) {
    declaredFields.add(fieldToken.toFieldDescription(this));
  }
  declaredMethods=new ArrayList<MethodDescription.InDefinedShape>(methodTokens.size());
  for (  MethodToken methodToken : methodTokens) {
    declaredMethods.add(methodToken.toMethodDescription(this));
  }
}
