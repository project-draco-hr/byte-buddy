{
  super(Opcodes.ASM5);
  this.modifiers=modifiers;
  this.internalName=internalName;
  this.descriptor=descriptor;
  this.genericSignature=genericSignature;
  this.exceptionName=exceptionName;
  annotationTokens=new ArrayList<LazyTypeDescription.AnnotationToken>();
  typeVariableAnnotationTokens=new HashMap<Integer,Map<String,List<LazyTypeDescription.AnnotationToken>>>();
  typeVariableBoundAnnotationTokens=new HashMap<Integer,Map<String,List<LazyTypeDescription.AnnotationToken>>>();
  returnTypeAnnotationTokens=new HashMap<String,List<LazyTypeDescription.AnnotationToken>>();
  parameterTypeAnnotationTokens=new HashMap<Integer,Map<String,List<LazyTypeDescription.AnnotationToken>>>();
  exceptionTypeAnnotationTokens=new HashMap<Integer,Map<String,List<LazyTypeDescription.AnnotationToken>>>();
  Type[] parameterTypes=Type.getMethodType(descriptor).getArgumentTypes();
  parameterAnnotationTokens=new HashMap<Integer,List<LazyTypeDescription.AnnotationToken>>();
  for (int i=0; i < parameterTypes.length; i++) {
    parameterAnnotationTokens.put(i,new ArrayList<LazyTypeDescription.AnnotationToken>());
  }
  parameterTokens=new ArrayList<LazyTypeDescription.MethodToken.ParameterToken>(parameterTypes.length);
  legacyParameterBag=new ParameterBag(parameterTypes);
}
