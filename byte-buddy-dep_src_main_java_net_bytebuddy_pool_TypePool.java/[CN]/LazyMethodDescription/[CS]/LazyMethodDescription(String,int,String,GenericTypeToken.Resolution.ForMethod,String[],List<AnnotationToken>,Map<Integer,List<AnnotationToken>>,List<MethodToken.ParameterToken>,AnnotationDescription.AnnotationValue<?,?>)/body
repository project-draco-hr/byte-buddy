{
  this.modifiers=modifiers;
  this.internalName=internalName;
  Type methodType=Type.getMethodType(methodDescriptor);
  Type returnType=methodType.getReturnType();
  Type[] parameterType=methodType.getArgumentTypes();
  returnTypeDescriptor=returnType.getDescriptor();
  parameterTypeDescriptors=new ArrayList<String>(parameterType.length);
  for (  Type type : parameterType) {
    parameterTypeDescriptors.add(type.getDescriptor());
  }
  this.signatureResolution=signatureResolution;
  if (exceptionTypeInternalName == null) {
    exceptionTypeDescriptors=Collections.emptyList();
  }
 else {
    exceptionTypeDescriptors=new ArrayList<String>(exceptionTypeInternalName.length);
    for (    String anExceptionTypeInternalName : exceptionTypeInternalName) {
      exceptionTypeDescriptors.add(Type.getObjectType(anExceptionTypeInternalName).getDescriptor());
    }
  }
  this.annotationTokens=annotationTokens;
  this.parameterAnnotationTokens=parameterAnnotationTokens;
  parameterNames=new String[parameterType.length];
  parameterModifiers=new Integer[parameterType.length];
  if (parameterTokens.size() == parameterType.length) {
    int index=0;
    for (    MethodToken.ParameterToken parameterToken : parameterTokens) {
      parameterNames[index]=parameterToken.getName();
      parameterModifiers[index]=parameterToken.getModifiers();
      index++;
    }
  }
  this.defaultValue=defaultValue;
}
