{
  this.modifiers=modifiers;
  this.internalName=internalName;
  Type returnType=Type.getReturnType(methodDescriptor);
  returnTypeName=returnType.getSort() == Type.ARRAY ? returnType.getDescriptor().replace('/','.') : returnType.getClassName();
  parameterTypes=new LazyTypeList(methodDescriptor);
  this.genericSignature=genericSignature;
  exceptionTypes=exceptionInternalName == null ? new TypeList.Empty() : new LazyTypeList(exceptionInternalName);
  declaredAnnotations=new ArrayList<AnnotationDescription>(annotationTokens.size());
  for (  AnnotationToken annotationToken : annotationTokens) {
    declaredAnnotations.add(annotationToken.toAnnotationDescription(typePool));
  }
  declaredParameterAnnotations=new ArrayList<List<AnnotationDescription>>(parameterTypes.size());
  for (int index=0; index < parameterTypes.size(); index++) {
    List<AnnotationToken> tokens=parameterAnnotationTokens.get(index);
    List<AnnotationDescription> annotationDescriptions;
    annotationDescriptions=new ArrayList<AnnotationDescription>(tokens.size());
    for (    AnnotationToken annotationToken : tokens) {
      annotationDescriptions.add(annotationToken.toAnnotationDescription(typePool));
    }
    declaredParameterAnnotations.add(annotationDescriptions);
  }
  parameterNames=new String[parameterTypes.size()];
  parameterModifiers=new int[parameterTypes.size()];
  if (parameterTokens.size() == parameterTypes.size()) {
    int index=0;
    for (    MethodToken.ParameterToken parameterToken : parameterTokens) {
      parameterNames[index]=parameterToken.getName();
      parameterModifiers[index]=parameterToken.getModifiers();
      index++;
    }
  }
  this.defaultValue=defaultValue;
}
