{
  this.modifiers=modifiers;
  this.internalName=internalName;
  Type returnType=Type.getReturnType(methodDescriptor);
  returnTypeName=returnType.getSort() == Type.ARRAY ? returnType.getDescriptor().replace('/','.') : returnType.getClassName();
  Type[] parameterType=Type.getArgumentTypes(methodDescriptor);
  parameterTypeInternalName=new String[parameterType.length];
  for (int index=0; index < parameterType.length; index++) {
    parameterTypeInternalName[index]=parameterType[index].getInternalName();
  }
  this.signatureResolution=signatureResolution;
  this.exceptionInternalName=exceptionInternalName;
  declaredAnnotations=new ArrayList<AnnotationDescription>(annotationTokens.size());
  for (  AnnotationToken annotationToken : annotationTokens) {
    declaredAnnotations.add(annotationToken.toAnnotationDescription(typePool));
  }
  declaredParameterAnnotations=new ArrayList<List<AnnotationDescription>>(parameterType.length);
  for (int index=0; index < parameterType.length; index++) {
    List<AnnotationToken> tokens=parameterAnnotationTokens.get(index);
    List<AnnotationDescription> annotationDescriptions;
    annotationDescriptions=new ArrayList<AnnotationDescription>(tokens.size());
    for (    AnnotationToken annotationToken : tokens) {
      annotationDescriptions.add(annotationToken.toAnnotationDescription(typePool));
    }
    declaredParameterAnnotations.add(annotationDescriptions);
  }
  parameterNames=new String[parameterType.length];
  parameterModifiers=new Integer[parameterType.length];
  if (parameterTokens.size() == parameterType.length) {
    int index=0;
    for (    MethodToken.ParameterToken parameterToken : parameterTokens) {
      parameterNames[index]=parameterToken.getName();
      parameterModifiers[index]=parameterToken.getModifiers();
      index++;
    }
  }
  this.defaultValue=defaultValue;
}
