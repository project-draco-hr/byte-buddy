{
  assertThat(delegate.requireProxyMethodFor(firstMethod),is(firstMethodProxy));
  assertThat(delegate.requireProxyMethodFor(secondMethod),is(secondMethodProxy));
  assertThat(delegate.requireProxyMethodFor(firstMethod),is(firstMethodProxy));
  Iterator<MethodDescription> proxyMethodIterator=delegate.getProxiedMethods().iterator();
  assertThat(proxyMethodIterator.hasNext(),is(true));
  assertThat(proxyMethodIterator.next(),is(firstMethodProxy));
  assertThat(proxyMethodIterator.hasNext(),is(true));
  assertThat(proxyMethodIterator.next(),is(secondMethodProxy));
  assertThat(proxyMethodIterator.hasNext(),is(false));
  verify(instrumentedType).withMethod(any(String.class),eq(firstMethodReturnType),eq(firstMethodParameters),eq(PROXY_MODIFIER));
  verifyNoMoreInteractions(instrumentedType);
  verify(firstAlteration).withMethod(any(String.class),eq(secondMethodReturnType),eq(secondMethodParameters),eq(PROXY_MODIFIER | Opcodes.ACC_STATIC));
  verify(firstAlteration).getDeclaredMethods();
  verifyNoMoreInteractions(firstAlteration);
  verify(secondAlteration).getDeclaredMethods();
  assertThat(delegate.getInstrumentedType(),is(secondAlteration));
  verifyNoMoreInteractions(secondAlteration);
  assertThat(delegate.target(firstMethodProxy).getAttributeAppender(),is((MethodAttributeAppender)MethodAttributeAppender.NoOp.INSTANCE));
  assertThat(delegate.target(firstMethodProxy).getByteCodeAppender().appendsCode(),is(true));
  assertThat(delegate.target(firstMethodProxy).isDefineMethod(),is(true));
  assertThat(delegate.target(secondMethodProxy).getAttributeAppender(),is((MethodAttributeAppender)MethodAttributeAppender.NoOp.INSTANCE));
  assertThat(delegate.target(secondMethodProxy).getByteCodeAppender().appendsCode(),is(true));
  assertThat(delegate.target(secondMethodProxy).isDefineMethod(),is(true));
}
