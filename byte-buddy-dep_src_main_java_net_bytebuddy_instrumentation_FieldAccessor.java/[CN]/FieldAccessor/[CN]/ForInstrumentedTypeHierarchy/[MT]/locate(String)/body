{
  TypeDescription currentType=instrumentedType;
  boolean isSelf=true;
  do {
    for (    FieldDescription fieldDescription : currentType.getDeclaredFields()) {
      if (fieldDescription.getName().equals(name) && (isSelf || !fieldDescription.isPrivate()) && (!fieldDescription.isPackagePrivate() || fieldDescription.isVisibleTo(instrumentedType))) {
        return fieldDescription;
      }
    }
    isSelf=false;
  }
 while (!(currentType=currentType.getSupertype()).represents(Object.class));
  throw new IllegalArgumentException("There is no field " + name + " that is visible for "+ instrumentedType);
}
