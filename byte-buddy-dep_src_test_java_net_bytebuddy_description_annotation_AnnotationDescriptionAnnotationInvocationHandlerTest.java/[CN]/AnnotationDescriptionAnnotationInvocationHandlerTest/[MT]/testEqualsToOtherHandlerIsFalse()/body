{
  when(loadedAnnotationValue.getState()).thenReturn(AnnotationValue.Loaded.State.RESOLVED);
  when(loadedAnnotationValue.resolve()).thenReturn(FOO);
  when(otherLoadedAnnotationValue.getState()).thenReturn(AnnotationValue.Loaded.State.RESOLVED);
  when(otherLoadedAnnotationValue.resolve()).thenReturn(BAR);
  InvocationHandler invocationHandler=Proxy.getInvocationHandler(AnnotationDescription.AnnotationInvocationHandler.of(getClass().getClassLoader(),Foo.class,Collections.<String,AnnotationValue<?,?>>singletonMap(FOO,otherAnnotationValue)));
  assertThat(Proxy.getInvocationHandler(AnnotationDescription.AnnotationInvocationHandler.of(getClass().getClassLoader(),Foo.class,Collections.<String,AnnotationValue<?,?>>singletonMap(FOO,annotationValue))).invoke(new Object(),Object.class.getDeclaredMethod("equals",Object.class),new Object[]{Proxy.newProxyInstance(getClass().getClassLoader(),new Class<?>[]{Foo.class},invocationHandler)}),is((Object)false));
  verify(loadedAnnotationValue,never()).resolve();
  verify(otherLoadedAnnotationValue,never()).resolve();
}
