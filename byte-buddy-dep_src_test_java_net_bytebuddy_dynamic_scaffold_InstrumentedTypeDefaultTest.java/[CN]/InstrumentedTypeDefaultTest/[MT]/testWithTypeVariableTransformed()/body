{
  TypeDescription.Generic boundType=mock(TypeDescription.Generic.class);
  when(boundType.asGenericType()).thenReturn(boundType);
  when(boundType.accept(Mockito.any(TypeDescription.Generic.Visitor.class))).thenReturn(boundType);
  TypeDescription rawBoundType=mock(TypeDescription.class);
  when(boundType.asErasure()).thenReturn(rawBoundType);
  when(rawBoundType.getName()).thenReturn(FOO);
  InstrumentedType.WithFlexibleName instrumentedType=makePlainInstrumentedType();
  assertThat(instrumentedType.getTypeVariables().size(),is(0));
  instrumentedType=instrumentedType.withTypeVariable(new TypeVariableToken(BAR,Collections.singletonList(boundType)));
  Transformer<TypeVariableToken> transformer=mock(Transformer.class);
  TypeDescription.Generic otherBoundType=mock(TypeDescription.Generic.class);
  when(otherBoundType.asGenericType()).thenReturn(otherBoundType);
  when(otherBoundType.accept(Mockito.any(TypeDescription.Generic.Visitor.class))).thenReturn(otherBoundType);
  TypeDescription rawOtherBoundType=mock(TypeDescription.class);
  when(otherBoundType.asErasure()).thenReturn(rawOtherBoundType);
  when(transformer.transform(instrumentedType,new TypeVariableToken(BAR,Collections.singletonList(boundType)))).thenReturn(new TypeVariableToken(QUX,Collections.singletonList(otherBoundType)));
  instrumentedType=instrumentedType.withTypeVariables(named(BAR),transformer);
  assertThat(instrumentedType.getTypeVariables().size(),is(1));
  TypeDescription.Generic typeVariable=instrumentedType.getTypeVariables().get(0);
  assertThat(typeVariable.getTypeName(),is(QUX));
  assertThat(typeVariable.getVariableSource(),sameInstance((TypeVariableSource)instrumentedType));
  assertThat(typeVariable.getUpperBounds(),is(Collections.singletonList(otherBoundType)));
}
