{
  ObjectPropertyAssertion.of(Morph.Binder.class).apply();
  ObjectPropertyAssertion.of(Morph.Binder.RedirectionProxy.class).apply();
  ObjectPropertyAssertion.of(Morph.Binder.RedirectionProxy.MethodCall.class).apply();
  ObjectPropertyAssertion.of(Morph.Binder.RedirectionProxy.MethodCall.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Instrumentation.Target>(){
    @Override public void apply(    Instrumentation.Target mock){
      when(mock.getTypeDescription()).thenReturn(mock(TypeDescription.class));
    }
  }
).apply();
  ObjectPropertyAssertion.of(Morph.Binder.RedirectionProxy.InstanceFieldConstructor.class).apply();
  ObjectPropertyAssertion.of(Morph.Binder.RedirectionProxy.InstanceFieldConstructor.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Instrumentation.Target>(){
    @Override public void apply(    Instrumentation.Target mock){
      TypeDescription typeDescription=mock(TypeDescription.class);
      FieldList fieldList=mock(FieldList.class);
      FieldList filteredFieldList=mock(FieldList.class);
      when(fieldList.filter(named(Morph.Binder.RedirectionProxy.FIELD_NAME))).thenReturn(filteredFieldList);
      when(filteredFieldList.getOnly()).thenReturn(mock(FieldDescription.class));
      when(typeDescription.getDeclaredFields()).thenReturn(fieldList);
      when(mock.getTypeDescription()).thenReturn(typeDescription);
    }
  }
).apply();
  ObjectPropertyAssertion.of(Morph.Binder.PrecomputedFinding.class).apply();
  ObjectPropertyAssertion.of(Morph.Binder.DefaultMethodLocator.Explicit.class).apply();
}
