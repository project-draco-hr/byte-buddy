{
  DynamicType placeholderType=null;
  Map<MethodDescription.InDefinedShape,Resolution> resolutions=new HashMap<MethodDescription.InDefinedShape,Resolution>(rebaseableMethods.size());
  for (  MethodDescription.InDefinedShape instrumentedMethod : rebaseableMethods) {
    Resolution resolution;
    if (instrumentedMethod.isConstructor()) {
      if (placeholderType == null) {
        placeholderType=TrivialType.EAGER.make(auxiliaryTypeNamingStrategy.name(instrumentedType),classFileVersion,AuxiliaryType.MethodAccessorFactory.Illegal.INSTANCE);
      }
      resolution=Resolution.ForRebasedConstructor.of(instrumentedMethod,placeholderType.getTypeDescription());
    }
 else {
      resolution=Resolution.ForRebasedMethod.of(instrumentedMethod,methodNameTransformer);
    }
    resolutions.put(instrumentedMethod,resolution);
  }
  return placeholderType == null ? new Default(resolutions,Collections.<DynamicType>emptyList()) : new Default(resolutions,Collections.singletonList(placeholderType));
}
