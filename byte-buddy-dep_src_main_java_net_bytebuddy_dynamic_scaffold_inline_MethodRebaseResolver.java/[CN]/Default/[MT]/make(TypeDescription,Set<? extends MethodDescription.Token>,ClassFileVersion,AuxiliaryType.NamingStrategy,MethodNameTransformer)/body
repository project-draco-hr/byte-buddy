{
  DynamicType placeholderType=null;
  Map<MethodDescription.InDefinedShape,Resolution> resolutions=new HashMap<MethodDescription.InDefinedShape,Resolution>();
  for (  MethodDescription.InDefinedShape instrumentedMethod : instrumentedType.getDeclaredMethods()) {
    if (rebaseableMethods.contains(instrumentedMethod.asToken(is(instrumentedType)))) {
      Resolution resolution;
      if (instrumentedMethod.isConstructor()) {
        if (placeholderType == null) {
          placeholderType=TrivialType.SIGNATURE_RELEVANT.make(auxiliaryTypeNamingStrategy.name(instrumentedType),classFileVersion,AuxiliaryType.MethodAccessorFactory.Illegal.INSTANCE);
        }
        resolution=Resolution.ForRebasedConstructor.of(instrumentedMethod,placeholderType.getTypeDescription());
      }
 else {
        resolution=Resolution.ForRebasedMethod.of(instrumentedMethod,methodNameTransformer);
      }
      resolutions.put(instrumentedMethod,resolution);
    }
  }
  return placeholderType == null ? new Default(resolutions,Collections.<DynamicType>emptyList()) : new Default(resolutions,Collections.singletonList(placeholderType));
}
