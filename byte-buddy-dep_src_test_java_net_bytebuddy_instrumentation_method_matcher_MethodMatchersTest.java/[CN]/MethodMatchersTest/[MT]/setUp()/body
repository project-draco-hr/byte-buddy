{
  testClassBase$foo=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(FOO_METHOD_NAME));
  testClassBase$bar=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(BAR_METHOD_NAME,Object.class));
  testClassBase$baz=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(BAZ_METHOD_NAME));
  testClassBase$qux=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(QUX_METHOD_NAME));
  testClassBase$fin=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(FIN_METHOD_NAME + "1"));
  testClassBase$stat=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(STAT_METHOD_NAME));
  testClassBase$compareTo$synth=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(GENERIC_INTERFACE_METHOD_NAME,Object.class));
  testClassBase$compareTo=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(GENERIC_INTERFACE_METHOD_NAME,String.class));
  testClassExtension$foo=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(FOO_METHOD_NAME));
  testClassExtension$bar=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(BAR_METHOD_NAME,Object.class));
  testClassExtension$baz=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(BAZ_METHOD_NAME));
  testClassExtension$qux=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(QUX_METHOD_NAME));
  testClassExtension$fin=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(FIN_METHOD_NAME + "2"));
  testClassExtension$stat=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(STAT_METHOD_NAME));
  object$hashCode=new MethodDescription.ForLoadedMethod(Object.class.getDeclaredMethod(HASH_CODE_METHOD_NAME));
  object$finalize=new MethodDescription.ForLoadedMethod(Object.class.getDeclaredMethod(FINALIZE_METHOD_NAME));
  testModifier$finalize=new MethodDescription.ForLoadedMethod(TestModifier.class.getDeclaredMethod(FINALIZE_METHOD_NAME));
  testClassBase$foobar=new MethodDescription.ForLoadedMethod(TestClassBase.class.getDeclaredMethod(FOOBAR_METHOD_NAME));
  testClassExtension$fooBar=new MethodDescription.ForLoadedMethod(TestClassExtension.class.getDeclaredMethod(FOOBAR_METHOD_NAME));
  testBean$getter=new MethodDescription.ForLoadedMethod(TestBean.class.getDeclaredMethod(GET_PROPERTY_METHOD_NAME));
  testBean$setter=new MethodDescription.ForLoadedMethod(TestBean.class.getDeclaredMethod(SET_PROPERTY_METHOD_NAME,String.class));
  testModifier$sync=new MethodDescription.ForLoadedMethod(TestModifier.class.getDeclaredMethod(SYNC_METHOD_NAME));
  testModifier$varargs=new MethodDescription.ForLoadedMethod(TestModifier.class.getDeclaredMethod(VARARGS_METHOD_NAME,Object[].class));
  testModifier$strict=new MethodDescription.ForLoadedMethod(TestModifier.class.getDeclaredMethod(STRICT_METHOD_NAME));
  testModifier$constructor=new MethodDescription.ForLoadedConstructor(TestModifier.class.getDeclaredConstructor());
  testClassBase$constructor=new MethodDescription.ForLoadedConstructor(TestClassBase.class.getDeclaredConstructor());
  testBridge$bridge=new MethodDescription.ForLoadedMethod(TestBridge.class.getDeclaredMethod(FOO_METHOD_NAME,Number.class));
  testBridge$bridgeLegalTarget=new MethodDescription.ForLoadedMethod(TestBridge.class.getDeclaredMethod(FOO_METHOD_NAME,Integer.class));
  testBridge$bridgeIllegalTarget=new MethodDescription.ForLoadedMethod(TestBridge.class.getDeclaredMethod(FOO_METHOD_NAME,String.class));
  privateMethod=new MethodDescription.ForLoadedMethod(PackagePrivateMethod.class.getDeclaredMethod(PackagePrivateMethod.PRIVATE_METHOD_NAME));
  protectedMethod=new MethodDescription.ForLoadedMethod(PackagePrivateMethod.class.getDeclaredMethod(PackagePrivateMethod.PROTECTED_METHOD_NAME));
  packagePrivateMethod=new MethodDescription.ForLoadedMethod(PackagePrivateMethod.class.getDeclaredMethod(PackagePrivateMethod.PACKAGE_PRIVATE_METHOD_NAME));
  visibilityBridgeMethod=new MethodDescription.ForLoadedMethod(VisibilityBridgeExtension.class.getDeclaredMethod(FOO_METHOD_NAME));
  noVisibilityBridgeMethod=new MethodDescription.ForLoadedMethod(VisibilityBridgeExtension.class.getDeclaredMethod(BAR_METHOD_NAME));
}
