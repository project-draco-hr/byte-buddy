{
  Instrumentation.Context.ExtractableView instrumentationContext=new Instrumentation.Context.Default(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion);
  FieldDescription firstField=instrumentationContext.cache(firstFieldValue,firstFieldType);
  assertThat(instrumentationContext.cache(firstFieldValue,firstFieldType),is(firstField));
  FieldDescription secondField=instrumentationContext.cache(secondFieldValue,secondFieldType);
  assertThat(instrumentationContext.cache(secondFieldValue,secondFieldType),is(secondField));
  when(entry.getSort()).thenReturn(TypeWriter.MethodPool.Entry.Sort.SKIP);
  when(typeInitializer.expandWith(any(StackManipulation.class))).thenReturn(otherTypeInitializer);
  when(otherTypeInitializer.expandWith(any(StackManipulation.class))).thenReturn(thirdTypeInitializer);
  when(thirdTypeInitializer.terminate()).thenReturn(terminationAppender);
  when(thirdTypeInitializer.isDefined()).thenReturn(true);
  instrumentationContext.drain(classVisitor,methodPool,injectedCode);
  verify(classVisitor).visitField(eq(Instrumentation.Context.ExtractableView.FIELD_CACHE_MODIFIER),Mockito.startsWith(Instrumentation.Context.Default.FIELD_CACHE_PREFIX),eq(BAR),Mockito.isNull(String.class),Mockito.isNull(Object.class));
  verify(classVisitor).visitField(eq(Instrumentation.Context.ExtractableView.FIELD_CACHE_MODIFIER),Mockito.startsWith(Instrumentation.Context.Default.FIELD_CACHE_PREFIX),eq(QUX),Mockito.isNull(String.class),Mockito.isNull(Object.class));
  verify(typeInitializer).expandWith(any(StackManipulation.class));
  verify(otherTypeInitializer).expandWith(any(StackManipulation.class));
  verify(thirdTypeInitializer).terminate();
  verify(thirdTypeInitializer).isDefined();
  verify(terminationAppender).apply(methodVisitor,instrumentationContext);
  verifyNoMoreInteractions(terminationAppender);
}
