{
  firstSpecialExceptionTypes=new TypeList.Explicit(Collections.singletonList(firstSpecialExceptionType));
  secondSpecialExceptionTypes=new TypeList.Explicit(Collections.singletonList(secondSpecialExceptionType));
  when(instrumentedType.getInternalName()).thenReturn(BAZ);
  when(methodPool.target(any(MethodDescription.class))).thenReturn(entry);
  when(auxiliaryType.make(any(String.class),any(ClassFileVersion.class),any(AuxiliaryType.MethodAccessorFactory.class))).thenReturn(firstDynamicType);
  when(firstDynamicType.getTypeDescription()).thenReturn(firstDescription);
  when(otherAuxiliaryType.make(any(String.class),any(ClassFileVersion.class),any(AuxiliaryType.MethodAccessorFactory.class))).thenReturn(secondDynamicType);
  when(secondDynamicType.getTypeDescription()).thenReturn(secondDescription);
  when(classVisitor.visitMethod(any(int.class),any(String.class),any(String.class),any(String.class),any(String[].class))).thenReturn(methodVisitor);
  when(classVisitor.visitField(any(int.class),any(String.class),any(String.class),any(String.class),any(Object.class))).thenReturn(fieldVisitor);
  when(firstFieldValue.apply(any(MethodVisitor.class),any(Instrumentation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(secondFieldValue.apply(any(MethodVisitor.class),any(Instrumentation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(firstFieldType.getStackSize()).thenReturn(StackSize.ZERO);
  when(firstFieldType.getDescriptor()).thenReturn(BAR);
  when(secondFieldType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondFieldType.getDescriptor()).thenReturn(QUX);
  when(entry.getAttributeAppender()).thenReturn(attributeAppender);
  when(entry.getByteCodeAppender()).thenReturn(byteCodeAppender);
  when(byteCodeAppender.apply(any(MethodVisitor.class),any(Instrumentation.Context.class),any(MethodDescription.class))).thenReturn(new ByteCodeAppender.Size(0,0));
  when(injectedCode.getInjectedCode()).thenReturn(injectedCodeAppender);
  when(injectedCodeAppender.apply(any(MethodVisitor.class),any(Instrumentation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(firstSpecialInvocation.getMethodDescription()).thenReturn(firstSpecialMethod);
  when(firstSpecialInvocation.getTypeDescription()).thenReturn(firstSpecialType);
  when(firstSpecialMethod.getReturnType()).thenReturn(firstSpecialReturnType);
  when(firstSpecialMethod.getInternalName()).thenReturn(FOO);
  when(firstSpecialMethod.getParameterTypes()).thenReturn(new TypeList.Explicit(Arrays.asList(firstSpecialParameterType)));
  when(firstSpecialMethod.getExceptionTypes()).thenReturn(firstSpecialExceptionTypes);
  when(firstSpecialParameterType.getDescriptor()).thenReturn(BAZ);
  when(firstSpecialReturnType.getDescriptor()).thenReturn(QUX);
  when(firstSpecialExceptionType.getInternalName()).thenReturn(FOO);
  when(firstSpecialParameterType.getStackSize()).thenReturn(StackSize.ZERO);
  when(firstSpecialReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(firstSpecialInvocation.apply(any(MethodVisitor.class),any(Instrumentation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(secondSpecialInvocation.getMethodDescription()).thenReturn(secondSpecialMethod);
  when(secondSpecialInvocation.getTypeDescription()).thenReturn(secondSpecialType);
  when(secondSpecialMethod.getInternalName()).thenReturn(BAR);
  when(secondSpecialMethod.getReturnType()).thenReturn(secondSpecialReturnType);
  when(secondSpecialMethod.getParameterTypes()).thenReturn(new TypeList.Explicit(Arrays.asList(secondSpecialParameterType)));
  when(secondSpecialMethod.getExceptionTypes()).thenReturn(secondSpecialExceptionTypes);
  when(secondSpecialParameterType.getDescriptor()).thenReturn(BAR);
  when(secondSpecialReturnType.getDescriptor()).thenReturn(FOO);
  when(secondSpecialExceptionType.getInternalName()).thenReturn(BAZ);
  when(secondSpecialParameterType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondSpecialReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondSpecialInvocation.apply(any(MethodVisitor.class),any(Instrumentation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
}
