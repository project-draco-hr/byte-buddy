{
  when(entry.isDefineMethod()).thenReturn(true);
  when(byteCodeAppender.appendsCode()).thenReturn(true);
  when(injectedCode.isInjected()).thenReturn(true);
  when(typeInitializer.expandWith(injectedCodeAppender)).thenReturn(new InstrumentedType.TypeInitializer.Simple(injectedCodeAppender));
  Instrumentation.Context.ExtractableView instrumentationContext=new Instrumentation.Context.Default(instrumentedType,typeInitializer,classFileVersion);
  FieldDescription firstField=instrumentationContext.cache(firstFieldValue,firstFieldType);
  assertThat(instrumentationContext.cache(firstFieldValue,firstFieldType),is(firstField));
  FieldDescription secondField=instrumentationContext.cache(secondFieldValue,secondFieldType);
  assertThat(instrumentationContext.cache(firstFieldValue,firstFieldType),is(firstField));
  assertThat(instrumentationContext.cache(secondFieldValue,secondFieldType),is(secondField));
  instrumentationContext.drain(classVisitor,methodPool,injectedCode);
  verify(classVisitor).visitField(eq(Instrumentation.Context.ExtractableView.FIELD_CACHE_MODIFIER),any(String.class),eq(BAR),isNull(String.class),isNull());
  verify(classVisitor).visitField(eq(Instrumentation.Context.ExtractableView.FIELD_CACHE_MODIFIER),any(String.class),eq(QUX),isNull(String.class),isNull());
  verify(classVisitor).visitMethod(eq(MethodDescription.TYPE_INITIALIZER_MODIFIER),eq(MethodDescription.TYPE_INITIALIZER_INTERNAL_NAME),eq("()V"),isNull(String.class),isNull(String[].class));
  verifyNoMoreInteractions(classVisitor);
  verify(methodVisitor).visitCode();
  verify(firstFieldValue).apply(methodVisitor,instrumentationContext);
  verify(methodVisitor).visitFieldInsn(eq(Opcodes.PUTSTATIC),eq(BAZ),any(String.class),eq(BAR));
  verify(secondFieldValue).apply(methodVisitor,instrumentationContext);
  verify(methodVisitor).visitFieldInsn(eq(Opcodes.PUTSTATIC),eq(BAZ),any(String.class),eq(QUX));
  verify(injectedCode).isInjected();
  verify(injectedCode).getInjectedCode();
  verify(injectedCodeAppender).apply(methodVisitor,instrumentationContext);
  verifyNoMoreInteractions(injectedCode);
  verify(typeInitializer).expandWith(injectedCodeAppender);
  verifyNoMoreInteractions(typeInitializer);
  verify(entry).isDefineMethod();
  verify(entry,atLeast(1)).getAttributeAppender();
  verify(attributeAppender).apply(methodVisitor,MethodDescription.Latent.typeInitializerOf(instrumentedType));
  verify(entry,atLeast(1)).getByteCodeAppender();
  verify(byteCodeAppender).appendsCode();
  verify(byteCodeAppender).apply(methodVisitor,instrumentationContext,MethodDescription.Latent.typeInitializerOf(instrumentedType));
  verifyNoMoreInteractions(byteCodeAppender);
  verify(methodVisitor).visitMaxs(0,0);
  verify(methodVisitor).visitEnd();
  verifyNoMoreInteractions(methodVisitor);
  verifyNoMoreInteractions(firstFieldValue);
  verifyNoMoreInteractions(secondFieldValue);
  verify(methodPool).target(MethodDescription.Latent.typeInitializerOf(instrumentedType));
  verifyNoMoreInteractions(methodPool);
}
