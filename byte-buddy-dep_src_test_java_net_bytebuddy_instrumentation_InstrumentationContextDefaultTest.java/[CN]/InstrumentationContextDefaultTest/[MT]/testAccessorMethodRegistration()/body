{
  Instrumentation.Context.Default instrumentationContext=new Instrumentation.Context.Default(instrumentedType,typeInitializer,classFileVersion);
  MethodDescription firstMethodDescription=instrumentationContext.registerAccessorFor(firstSpecialInvocation);
  assertThat(firstMethodDescription.getParameterTypes(),is((TypeList)new TypeList.Explicit(Arrays.asList(firstSpecialParameterType))));
  assertThat(firstMethodDescription.getReturnType(),is(firstSpecialReturnType));
  assertThat(firstMethodDescription.getInternalName(),startsWith(FOO));
  assertThat(firstMethodDescription.getModifiers(),is(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER));
  assertThat(firstMethodDescription.getExceptionTypes(),is(firstSpecialExceptionTypes));
  assertThat(instrumentationContext.registerAccessorFor(firstSpecialInvocation),is(firstMethodDescription));
  when(secondSpecialMethod.isStatic()).thenReturn(true);
  MethodDescription secondMethodDescription=instrumentationContext.registerAccessorFor(secondSpecialInvocation);
  assertThat(secondMethodDescription.getParameterTypes(),is((TypeList)new TypeList.Explicit(Arrays.asList(secondSpecialParameterType))));
  assertThat(secondMethodDescription.getReturnType(),is(secondSpecialReturnType));
  assertThat(secondMethodDescription.getInternalName(),startsWith(BAR));
  assertThat(secondMethodDescription.getModifiers(),is(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER | Opcodes.ACC_STATIC));
  assertThat(secondMethodDescription.getExceptionTypes(),is(secondSpecialExceptionTypes));
  assertThat(instrumentationContext.registerAccessorFor(firstSpecialInvocation),is(firstMethodDescription));
  assertThat(instrumentationContext.registerAccessorFor(secondSpecialInvocation),is(secondMethodDescription));
  instrumentationContext.drain(classVisitor,methodPool,injectedCode);
  verify(classVisitor).visitMethod(eq(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER),Matchers.startsWith(FOO),eq("(" + BAZ + ")"+ QUX),isNull(String.class),aryEq(new String[]{FOO}));
  verify(classVisitor).visitMethod(eq(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER | Opcodes.ACC_STATIC),Matchers.startsWith(BAR),eq("(" + BAR + ")"+ FOO),isNull(String.class),aryEq(new String[]{BAZ}));
}
