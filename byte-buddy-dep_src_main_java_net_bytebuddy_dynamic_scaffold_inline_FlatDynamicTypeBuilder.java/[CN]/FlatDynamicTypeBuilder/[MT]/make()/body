{
  MethodRegistry.Prepared preparedMethodRegistry=methodRegistry.prepare(applyRecordedMembersTo(new FlatInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy)));
  TargetHandler.Prepared preparedTargetHandler=targetHandler.prepare(ignoredMethods,classFileVersion,preparedMethodRegistry.getInstrumentedType());
  MethodRegistry.Compiled compiledMethodRegistry=preparedMethodRegistry.compile(preparedTargetHandler.factory(bridgeMethodResolverFactory),methodLookupEngineFactory.make(classFileVersion),MethodFlatteningDelegation.Factory.INSTANCE);
  return new TypeWriter.Default<T>(compiledMethodRegistry.getInstrumentedType(),compiledMethodRegistry.getLoadedTypeInitializer(),preparedTargetHandler.getAuxiliaryTypes(),new TypeWriter.Engine.ForRedefinition(compiledMethodRegistry.getInstrumentedType(),classFileVersion,compiledMethodRegistry.getInvokableMethods().filter(isOverridable().or(isDeclaredBy(compiledMethodRegistry.getInstrumentedType())).and(not(ignoredMethods).or(isDeclaredBy(compiledMethodRegistry.getInstrumentedType()).and(not(anyOf(targetType.getDeclaredMethods())))))),classVisitorWrapperChain,attributeAppender,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),compiledMethodRegistry,new TypeWriter.Engine.ForRedefinition.InputStreamProvider.ForClassFileLocator(targetType,classFileLocator),preparedTargetHandler.getMethodFlatteningResolver())).make(new TypeExtensionDelegate(compiledMethodRegistry.getInstrumentedType(),classFileVersion));
}
