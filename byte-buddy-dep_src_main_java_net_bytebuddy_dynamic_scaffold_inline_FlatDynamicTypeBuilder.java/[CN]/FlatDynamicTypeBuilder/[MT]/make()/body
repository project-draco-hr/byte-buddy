{
  MethodRegistry.Prepared preparedMethodRegistry=methodRegistry.prepare(applyRecordedMembersTo(new FlatInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy)));
  TargetHandler.Prepared preparedTargetHandler=targetHandler.prepare(ignoredMethods,classFileVersion,preparedMethodRegistry.getInstrumentedType());
  MethodRegistry.Compiled compiledMethodRegistry=preparedMethodRegistry.compile(preparedTargetHandler.factory(bridgeMethodResolverFactory),methodLookupEngineFactory.make(classFileVersion),MethodFlatteningDelegation.Factory.INSTANCE);
  TypeExtensionDelegate typeExtensionDelegate=new TypeExtensionDelegate(preparedMethodRegistry.getInstrumentedType(),classFileVersion);
  new Engine.ForRedefinition(preparedMethodRegistry.getInstrumentedType(),classFileVersion,compiledMethodRegistry.getInvokableMethods(),classVisitorWrapperChain,attributeAppender,fieldRegistry.prepare(preparedMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),compiledMethodRegistry,new Engine.ForRedefinition.InputStreamProvider.ForClassFileLocator(targetType,classFileLocator),null).create(typeExtensionDelegate);
  return null;
}
