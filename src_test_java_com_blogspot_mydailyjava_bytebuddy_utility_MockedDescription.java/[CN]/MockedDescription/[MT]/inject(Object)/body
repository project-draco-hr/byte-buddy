{
  Map<String,TypeDescription> fieldNameToTypeMock=new HashMap<String,TypeDescription>();
  Map<MethodDescription,String> methodDeclaredBy=new HashMap<MethodDescription,String>();
  Map<FieldDescription,String> fieldDeclaredBy=new HashMap<FieldDescription,String>();
  Map<MethodDescription,List<String>> parameterDeclaredBy=new HashMap<MethodDescription,List<String>>();
  Map<MethodDescription,String> returnTypeDeclaredBy=new HashMap<MethodDescription,String>();
  Map<TypeDescription,String> typeExtends=new HashMap<TypeDescription,String>();
  Map<FieldDescription,String> fieldType=new HashMap<FieldDescription,String>();
  Class<?> type=instance.getClass();
  do {
    doInject(instance,type,fieldNameToTypeMock,methodDeclaredBy,fieldDeclaredBy,parameterDeclaredBy,returnTypeDeclaredBy,typeExtends,fieldType);
  }
 while ((type=type.getSuperclass()) != null);
  for (  Map.Entry<TypeDescription,String> entry : typeExtends.entrySet()) {
    TypeDescription target=fieldExists(fieldNameToTypeMock.get(entry.getValue()),entry.getValue());
    when(entry.getKey().getSupertype()).thenReturn(target);
  }
  for (  Map.Entry<MethodDescription,List<String>> entry : parameterDeclaredBy.entrySet()) {
    List<TypeDescription> typeDescriptions=new ArrayList<TypeDescription>(entry.getValue().size());
    for (    String fieldName : entry.getValue()) {
      typeDescriptions.add(fieldExists(fieldNameToTypeMock.get(fieldName),fieldName));
    }
    when(entry.getKey().getParameterTypes()).thenReturn(new TypeList.Explicit(typeDescriptions));
  }
  for (  Map.Entry<MethodDescription,String> entry : returnTypeDeclaredBy.entrySet()) {
    when(entry.getKey().getReturnType()).thenReturn(fieldExists(fieldNameToTypeMock.get(entry.getKey()),entry.getValue()));
  }
  Map<TypeDescription,List<MethodDescription>> declarations=new HashMap<TypeDescription,List<MethodDescription>>();
  for (  Map.Entry<MethodDescription,String> entry : methodDeclaredBy.entrySet()) {
    TypeDescription declaringType=fieldExists(fieldNameToTypeMock.get(entry.getValue()),entry.getValue());
    List<MethodDescription> parameters=declarations.get(declaringType);
    if (parameters == null) {
      parameters=new ArrayList<MethodDescription>();
      declarations.put(declaringType,parameters);
    }
    parameters.add(entry.getKey());
  }
  for (  Map.Entry<TypeDescription,List<MethodDescription>> entry : declarations.entrySet()) {
    when(entry.getKey().getDeclaredMethods()).thenReturn(new MethodList.Explicit(entry.getValue()));
    for (    MethodDescription methodDescription : entry.getValue()) {
      when(methodDescription.getDeclaringType()).thenReturn(entry.getKey());
    }
  }
  Map<TypeDescription,List<FieldDescription>> fieldDescriptions=new HashMap<TypeDescription,List<FieldDescription>>();
  for (  Map.Entry<FieldDescription,String> entry : fieldDeclaredBy.entrySet()) {
    TypeDescription declaringType=fieldExists(fieldNameToTypeMock.get(entry.getValue()),entry.getValue());
    List<FieldDescription> fields=fieldDescriptions.get(declaringType);
    if (fields == null) {
      fields=new ArrayList<FieldDescription>();
      fieldDescriptions.put(declaringType,fields);
    }
    fields.add(entry.getKey());
  }
  for (  Map.Entry<TypeDescription,List<FieldDescription>> entry : fieldDescriptions.entrySet()) {
    when(entry.getKey().getDeclaredFields()).thenReturn(new FieldList.Explicit(entry.getValue()));
    for (    FieldDescription methodDescription : entry.getValue()) {
      when(methodDescription.getDeclaringType()).thenReturn(entry.getKey());
    }
  }
  for (  Map.Entry<FieldDescription,String> entry : fieldType.entrySet()) {
    when(entry.getKey().getFieldType()).thenReturn(fieldExists(fieldNameToTypeMock.get(entry.getValue()),entry.getValue()));
  }
}
