{
  for (  Field field : type.getDeclaredFields()) {
    field.setAccessible(true);
    MockSettings mockSettings=withSettings();
    mockSettings.name(field.getName());
    mockSettings.defaultAnswer(RETURNS_DEEP_STUBS);
    if (field.isAnnotationPresent(ForMethod.class) || field.isAnnotationPresent(ForConstructor.class)) {
      assertFieldType(field,MethodDescription.class);
      MethodDescription mockedDescription=mock(MethodDescription.class,mockSettings);
      field.set(instance,mockedDescription);
      String declaredBy;
      String[] parameterTypes;
      if (field.isAnnotationPresent(ForConstructor.class)) {
        when(mockedDescription.getInternalName()).thenReturn(MethodDescription.CONSTRUCTOR_INTERNAL_NAME);
        declaredBy=field.getAnnotation(ForConstructor.class).declaredBy();
        parameterTypes=field.getAnnotation(ForConstructor.class).parameterTypes();
        when(mockedDescription.getReturnType()).thenReturn(new TypeDescription.ForLoadedType(void.class));
      }
 else {
        String methodName=field.getAnnotation(ForMethod.class).name();
        if (!DEFAULT.equals(methodName)) {
          when(mockedDescription.getName()).thenReturn(methodName);
          when(mockedDescription.getInternalName()).thenReturn(methodName);
        }
        String returnType=field.getAnnotation(ForMethod.class).returnType();
        if (!DEFAULT.equals(returnType)) {
          returnTypeDeclaredBy.put(mockedDescription,returnType);
        }
        declaredBy=field.getAnnotation(ForMethod.class).declaredBy();
        parameterTypes=field.getAnnotation(ForMethod.class).parameterTypes();
      }
      if (!DEFAULT.equals(declaredBy)) {
        methodDeclaredBy.put(mockedDescription,declaredBy);
      }
      if (!(parameterTypes.length == 1 && DEFAULT.equals(parameterTypes[0]))) {
        parameterDeclaredBy.put(mockedDescription,Arrays.asList(parameterTypes));
      }
    }
 else     if (field.isAnnotationPresent(ForType.class)) {
      assertFieldType(field,TypeDescription.class);
      TypeDescription mockedDescription=mock(TypeDescription.class,mockSettings);
      field.set(instance,mockedDescription);
      String name=field.getAnnotation(ForType.class).name();
      if (!DEFAULT.equals(name)) {
        when(mockedDescription.getName()).thenReturn(name);
        when(mockedDescription.getInternalName()).thenReturn(name.replace('.','/'));
      }
      String extending=field.getAnnotation(ForType.class).extending();
      if (!DEFAULT.equals(extending)) {
        typeExtends.put(mockedDescription,extending);
      }
      if (!(fieldNameToTypeMock.put(field.getName(),mockedDescription) == null)) {
        throw new IllegalStateException("Name for type description field is used twice: " + field);
      }
    }
 else     if (field.isAnnotationPresent(ForField.class)) {
      assertFieldType(field,FieldDescription.class);
      FieldDescription mockedDescription=mock(FieldDescription.class,mockSettings);
      field.set(instance,mockedDescription);
      String declaredBy=field.getAnnotation(ForField.class).declaredBy();
      if (!DEFAULT.equals(declaredBy)) {
        fieldDeclaredBy.put(mockedDescription,declaredBy);
      }
      String typeReference=field.getAnnotation(ForField.class).fieldType();
      if (!DEFAULT.equals(typeReference)) {
        fieldType.put(mockedDescription,typeReference);
      }
    }
  }
}
