{
  final Iterator<Class<?>> types=Arrays.<Class<?>>asList(Object.class,String.class).iterator();
  ObjectPropertyAssertion.of(Nexus.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return types.next();
    }
  }
).apply();
  final Iterator<Method> methods=Arrays.asList(Object.class.getDeclaredMethods()).iterator();
  ObjectPropertyAssertion.of(TypeResolver.Active.Dispatcher.Available.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methods.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(TypeResolver.Active.Dispatcher.Unavailable.class).apply();
  ObjectPropertyAssertion.of(TypeResolver.Active.InitializationAppender.class).apply();
}
