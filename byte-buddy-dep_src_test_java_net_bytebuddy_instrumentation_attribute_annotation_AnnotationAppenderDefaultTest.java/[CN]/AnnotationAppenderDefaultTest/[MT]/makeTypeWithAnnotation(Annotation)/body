{
  ClassWriter classWriter=new ClassWriter(ASM_MANUAL);
  classWriter.visit(ClassFileVersion.forCurrentJavaVersion().getVersionNumber(),Opcodes.ACC_PUBLIC,BAR.replace('.','/'),null,Type.getInternalName(Object.class),null);
  AnnotationVisitor annotationVisitor=classWriter.visitAnnotation(Type.getDescriptor(annotation.annotationType()),true);
  when(target.visit(any(String.class),anyBoolean())).thenReturn(annotationVisitor);
  AnnotationAppender.AnnotationVisibility annotationVisibility=AnnotationAppender.AnnotationVisibility.of(annotation);
  annotationAppender.append(annotation,annotationVisibility);
switch (annotationVisibility) {
case RUNTIME:
    verify(target).visit(Type.getDescriptor(annotation.annotationType()),true);
  verifyNoMoreInteractions(target);
break;
case CLASS_FILE:
verify(target).visit(Type.getDescriptor(annotation.annotationType()),false);
verifyNoMoreInteractions(target);
break;
case INVISIBLE:
verifyZeroInteractions(target);
break;
default :
fail("Unknown annotation visibility");
}
classWriter.visitEnd();
Class<?> bar=new ByteArrayClassLoader(getClass().getClassLoader(),Collections.singletonMap(BAR,classWriter.toByteArray()),DEFAULT_PROTECTION_DOMAIN,ByteArrayClassLoader.PersistenceHandler.LATENT).loadClass(BAR);
assertThat(bar.getName(),is(BAR));
assertEquals(Object.class,bar.getSuperclass());
return bar;
}
