{
  if (!isValidIdentifier(getName().split("\\."))) {
    throw new IllegalStateException("Illegal type name: " + getName());
  }
  TypeDescription.Generic superType=getSuperType();
  if (superType != null && !superType.accept(Generic.Visitor.Validator.SUPER_CLASS)) {
    throw new IllegalStateException("Illegal super class " + getSuperType() + " for "+ this);
  }
  Set<TypeDescription> interfaceErasures=new HashSet<TypeDescription>();
  for (  TypeDescription.Generic interfaceType : getInterfaces()) {
    if (!interfaceErasures.add(interfaceType.asErasure())) {
      throw new IllegalStateException("Already implemented interface " + interfaceType + " for "+ this);
    }
 else     if (!interfaceType.accept(Generic.Visitor.Validator.INTERFACE)) {
      throw new IllegalStateException("Illegal interface " + interfaceType + " for "+ this);
    }
  }
  Set<String> typeVariableNames=new HashSet<String>();
  for (  TypeDescription.Generic typeVariable : getTypeVariables()) {
    String variableSymbol=typeVariable.getSymbol();
    if (!typeVariableNames.add(variableSymbol)) {
      throw new IllegalStateException("Duplicate type variable symbol pf " + typeVariable + " for "+ this);
    }
 else     if (!isValidIdentifier(variableSymbol)) {
      throw new IllegalStateException("Illegal type variable name of " + typeVariable + " for "+ this);
    }
    for (    TypeDescription.Generic bound : typeVariable.getUpperBounds()) {
      if (!bound.accept(Generic.Visitor.Validator.TYPE_VARIABLE)) {
        throw new IllegalStateException("Illegal type variable bound " + bound + " of "+ typeVariable+ "for "+ this);
      }
    }
  }
  Set<TypeDescription> typeAnnotationTypes=new HashSet<TypeDescription>();
  for (  AnnotationDescription annotationDescription : getDeclaredAnnotations()) {
    if (!typeAnnotationTypes.add(annotationDescription.getAnnotationType())) {
      throw new IllegalStateException("Duplicate annotation " + annotationDescription + " for "+ this);
    }
  }
  Set<String> fieldNames=new HashSet<String>();
  for (  FieldDescription.InDefinedShape fieldDescription : getDeclaredFields()) {
    String fieldName=fieldDescription.getName();
    if (!fieldNames.add(fieldName)) {
      throw new IllegalStateException("Duplicate field definition for " + fieldDescription);
    }
 else     if (!isValidIdentifier(fieldName)) {
      throw new IllegalStateException("Illegal field name for " + fieldDescription);
    }
    Set<TypeDescription> fieldAnnotationTypes=new HashSet<TypeDescription>();
    for (    AnnotationDescription annotationDescription : fieldDescription.getDeclaredAnnotations()) {
      if (!fieldAnnotationTypes.add(annotationDescription.getAnnotationType())) {
        throw new IllegalStateException("Duplicate annotation " + annotationDescription + " for "+ fieldDescription);
      }
    }
    if (!fieldDescription.getType().accept(Generic.Visitor.Validator.FIELD)) {
      throw new IllegalStateException("Illegal type variable bound " + fieldDescription.getType() + " for "+ fieldDescription);
    }
  }
  Set<MethodDescription.SignatureToken> methodSignatureTokens=new HashSet<MethodDescription.SignatureToken>();
  for (  MethodDescription.InDefinedShape methodDescription : getDeclaredMethods()) {
    if (!methodSignatureTokens.add(methodDescription.asSignatureToken())) {
      throw new IllegalStateException("Duplicate method signature for " + methodDescription);
    }
    Set<String> methodTypeVariableNames=new HashSet<String>();
    for (    TypeDescription.Generic typeVariable : methodDescription.getTypeVariables()) {
      String variableSymbol=typeVariable.getSymbol();
      if (!methodTypeVariableNames.add(variableSymbol)) {
        throw new IllegalStateException("Duplicate type variable symbol of " + typeVariable + " for "+ methodDescription);
      }
 else       if (!isValidIdentifier(variableSymbol)) {
        throw new IllegalStateException("Illegal type variable name of " + typeVariable + " for "+ methodDescription);
      }
      for (      TypeDescription.Generic bound : typeVariable.getUpperBounds()) {
        if (!bound.accept(Generic.Visitor.Validator.TYPE_VARIABLE)) {
          throw new IllegalStateException("Illegal type variable bound " + bound + " of "+ typeVariable+ " for "+ methodDescription);
        }
      }
    }
    Set<TypeDescription> methodAnnotationTypes=new HashSet<TypeDescription>();
    for (    AnnotationDescription annotationDescription : methodDescription.getDeclaredAnnotations()) {
      if (!methodAnnotationTypes.add(annotationDescription.getAnnotationType())) {
        throw new IllegalStateException("Duplicate annotation " + annotationDescription + " for "+ methodDescription);
      }
    }
    if (methodDescription.isTypeInitializer()) {
      throw new IllegalStateException("Illegal explicit declaration of a type initializer by " + this);
    }
 else     if (methodDescription.isConstructor()) {
      if (!methodDescription.getReturnType().represents(void.class)) {
        throw new IllegalStateException("A constructor must return void " + methodDescription);
      }
    }
 else     if (!methodDescription.getReturnType().accept(Generic.Visitor.Validator.METHOD_RETURN)) {
      throw new IllegalStateException("Illegal return type " + methodDescription.getReturnType() + " for "+ methodDescription);
    }
 else     if (!isValidIdentifier(methodDescription.getInternalName())) {
      throw new IllegalStateException("Illegal method name for: " + methodDescription);
    }
    Set<String> parameterNames=new HashSet<String>();
    for (    ParameterDescription.InDefinedShape parameterDescription : methodDescription.getParameters()) {
      if (parameterDescription.isNamed()) {
        String parameterName=parameterDescription.getName();
        if (!parameterNames.add(parameterName)) {
          throw new IllegalStateException("Duplicate parameter name for " + parameterDescription);
        }
 else         if (!isValidIdentifier(parameterName)) {
          throw new IllegalStateException("Illegal parameter name for " + parameterDescription);
        }
      }
      Set<TypeDescription> parameterAnnotationTypes=new HashSet<TypeDescription>();
      for (      AnnotationDescription annotationDescription : parameterDescription.getDeclaredAnnotations()) {
        if (!parameterAnnotationTypes.add(annotationDescription.getAnnotationType())) {
          throw new IllegalStateException("Duplicate annotation " + annotationDescription + " for "+ parameterDescription);
        }
      }
      if (!parameterDescription.getType().accept(Generic.Visitor.Validator.METHOD_PARAMETER)) {
        throw new IllegalStateException("Illegal parameter type " + parameterDescription.getType() + " for "+ parameterDescription);
      }
    }
    Set<TypeDescription.Generic> exceptionTypes=new HashSet<Generic>();
    for (    TypeDescription.Generic exceptionType : methodDescription.getExceptionTypes()) {
      if (!exceptionTypes.add(exceptionType)) {
        throw new IllegalStateException("Duplicate exception type " + exceptionType + " for "+ methodDescription);
      }
 else       if (!exceptionType.accept(Generic.Visitor.Validator.EXCEPTION)) {
        throw new IllegalStateException("Illegal exception type " + exceptionType + " for "+ methodDescription);
      }
    }
  }
  return this;
}
