{
  MethodRegistry.Compiled compiledMethodRegistry=methodRegistry.prepare(applyRecordedMembersTo(new InlineInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy)),new LevelTypeDefinitionMatcher(targetType,ignoredMethods)).compile(targetHandler.makeInstrumentationTargetFactory(bridgeMethodResolverFactory),methodLookupEngineFactory.make(classFileVersion.isSupportsDefaultMethods()));
  TargetHandler.Compiled compiledTargetHandler=targetHandler.compile(compiledMethodRegistry.getInstrumentedMethods(),compiledMethodRegistry.getInstrumentedType(),classFileVersion,new Instrumentation.Context.Default.AuxiliaryTypeNamingStrategy.SuffixingRandom("placeholder"));
  return new TypeWriter.Default<T>(compiledMethodRegistry.getInstrumentedType(),compiledMethodRegistry.getLoadedTypeInitializer(),compiledMethodRegistry.getTypeInitializer(),compiledTargetHandler.getAuxiliaryTypes(),classFileVersion,new TypeWriter.Engine.ForRedefinition(compiledMethodRegistry.getInstrumentedType(),targetType,classFileVersion,compiledMethodRegistry.getInstrumentedMethods(),classVisitorWrapperChain,attributeAppender,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),compiledMethodRegistry,classFileLocator,compiledTargetHandler.getMethodRebaseResolver())).make();
}
