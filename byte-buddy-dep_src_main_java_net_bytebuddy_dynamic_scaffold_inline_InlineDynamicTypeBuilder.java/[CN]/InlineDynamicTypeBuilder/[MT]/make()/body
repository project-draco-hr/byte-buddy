{
  MethodRegistry.Prepared preparedMethodRegistry=methodRegistry.prepare(applyRecordedMembersTo(new InlineInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy)));
  TargetHandler.Prepared preparedTargetHandler=targetHandler.prepare(ignoredMethods,classFileVersion,preparedMethodRegistry.getInstrumentedType(),methodLookupEngineFactory);
  MethodRegistry.Compiled compiledMethodRegistry=preparedMethodRegistry.compile(preparedTargetHandler.factory(bridgeMethodResolverFactory),methodLookupEngineFactory.make(classFileVersion.isSupportsDefaultMethods()),preparedTargetHandler.getMethodPoolEntryDefault());
  return new TypeWriter.Default<T>(compiledMethodRegistry.getInstrumentedType(),compiledMethodRegistry.getLoadedTypeInitializer(),preparedTargetHandler.getAuxiliaryTypes(),classFileVersion,new TypeWriter.Engine.ForRedefinition(compiledMethodRegistry.getInstrumentedType(),targetType,classFileVersion,compiledMethodRegistry.getInvokableMethods().filter(isOverridable().or(isDeclaredBy(compiledMethodRegistry.getInstrumentedType())).and(not(ignoredMethods).or(isDeclaredBy(compiledMethodRegistry.getInstrumentedType()).and(not(anyOf(targetType.getDeclaredMethods())))))),classVisitorWrapperChain,attributeAppender,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),compiledMethodRegistry,classFileLocator,preparedTargetHandler.getMethodRebaseResolver())).make();
}
