{
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.class).refine(new ObjectPropertyAssertion.Refinement<TargetMethodAnnotationDrivenBinder.ParameterBinder>(){
    @Override public void apply(    TargetMethodAnnotationDrivenBinder.ParameterBinder mock){
      when(mock.getHandledType()).thenReturn(Annotation.class);
    }
  }
).refine(new ObjectPropertyAssertion.Refinement<TypeDescription>(){
    @Override public void apply(    TypeDescription mock){
      when(mock.getStackSize()).thenReturn(StackSize.ZERO);
    }
  }
).create(new ObjectPropertyAssertion.Creator<List<TargetMethodAnnotationDrivenBinder.ParameterBinder<?>>>(){
    @Override public List<TargetMethodAnnotationDrivenBinder.ParameterBinder<?>> create(){
      TargetMethodAnnotationDrivenBinder.ParameterBinder<?> parameterBinder=mock(TargetMethodAnnotationDrivenBinder.ParameterBinder.class);
      doReturn(Annotation.class).when(parameterBinder).getHandledType();
      return Collections.<TargetMethodAnnotationDrivenBinder.ParameterBinder<?>>singletonList(parameterBinder);
    }
  }
).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.DefaultsProvider.Empty.class).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.DefaultsProvider.Empty.EmptyIterator.class).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.TerminationHandler.Dropping.class).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.TerminationHandler.Returning.class).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.DelegationProcessor.class).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.DelegationProcessor.Handler.Bound.class).apply();
  ObjectPropertyAssertion.of(TargetMethodAnnotationDrivenBinder.DelegationProcessor.Handler.Unbound.class).apply();
}
