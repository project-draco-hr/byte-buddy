{
  Method publicLookup=Class.forName("java.lang.invoke.MethodHandles").getDeclaredMethod("publicLookup");
  Object lookup=publicLookup.invoke(null);
  Method unreflected=Class.forName("java.lang.invoke.MethodHandles$Lookup").getDeclaredMethod("unreflect",Method.class);
  Object methodHandleLoaded=unreflected.invoke(lookup,Foo.class.getDeclaredMethod(FOO));
  assertThat(JavaInstance.MethodHandle.ofLoaded(new ByteBuddy().subclass(Foo.class).method(named(FOO)).intercept(MethodDelegation.to(Foo.class).appendParameterBinder(TargetMethodAnnotationDrivenBinder.ParameterBinder.ForFixedValue.OfConstant.of(Bar.class,JavaInstance.MethodHandle.ofLoaded(methodHandleLoaded)))).make().load(Foo.class.getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded().newInstance().foo()),is(JavaInstance.MethodHandle.ofLoaded(methodHandleLoaded)));
}
