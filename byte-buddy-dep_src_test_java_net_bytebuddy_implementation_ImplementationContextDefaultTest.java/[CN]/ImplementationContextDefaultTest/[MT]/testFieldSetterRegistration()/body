{
  Implementation.Context.Default implementationContext=new Implementation.Context.Default(instrumentedType,classFileVersion,auxiliaryTypeNamingStrategy,typeInitializer,auxiliaryClassFileVersion);
  MethodDescription.InDefinedShape firstFieldSetter=implementationContext.registerSetterFor(firstField);
  assertThat(firstFieldSetter.getParameters(),is((ParameterList)new ParameterList.Explicit.ForTypes(firstFieldSetter,firstFieldType)));
  assertThat(firstFieldSetter.getReturnType(),is(TypeDescription.Generic.VOID));
  assertThat(firstFieldSetter.getInternalName(),startsWith(FOO));
  assertThat(firstFieldSetter.getModifiers(),is(accessorMethodModifiers));
  assertThat(firstFieldSetter.getExceptionTypes(),is((TypeList.Generic)new TypeList.Generic.Empty()));
  assertThat(implementationContext.registerSetterFor(firstField),is(firstFieldSetter));
  when(secondField.isStatic()).thenReturn(true);
  MethodDescription.InDefinedShape secondFieldSetter=implementationContext.registerSetterFor(secondField);
  assertThat(secondFieldSetter.getParameters(),is((ParameterList)new ParameterList.Explicit.ForTypes(secondFieldSetter,secondFieldType)));
  assertThat(secondFieldSetter.getReturnType(),is(TypeDescription.Generic.VOID));
  assertThat(secondFieldSetter.getInternalName(),startsWith(BAR));
  assertThat(secondFieldSetter.getModifiers(),is(accessorMethodModifiers | Opcodes.ACC_STATIC));
  assertThat(secondFieldSetter.getExceptionTypes(),is((TypeList.Generic)new TypeList.Generic.Empty()));
  assertThat(implementationContext.registerSetterFor(firstField),is(firstFieldSetter));
  assertThat(implementationContext.registerSetterFor(secondField),is(secondFieldSetter));
  when(record.getSort()).thenReturn(TypeWriter.MethodPool.Record.Sort.SKIPPED);
  implementationContext.drain(classVisitor,methodPool,injectedCode,annotationValueFilterFactory,supportsBridges);
  verify(classVisitor).visitMethod(eq(accessorMethodModifiers),Matchers.startsWith(FOO),eq("(" + BAR + ")V"),isNull(String.class),isNull(String[].class));
  verify(classVisitor).visitMethod(eq(accessorMethodModifiers | Opcodes.ACC_STATIC),Matchers.startsWith(BAR),eq("(" + QUX + ")V"),isNull(String.class),isNull(String[].class));
}
