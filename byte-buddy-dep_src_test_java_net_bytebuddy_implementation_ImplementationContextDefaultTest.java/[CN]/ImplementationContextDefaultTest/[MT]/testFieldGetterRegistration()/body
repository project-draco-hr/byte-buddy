{
  Implementation.Context.Default implementationContext=new Implementation.Context.Default(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion);
  MethodDescription firstFieldGetter=implementationContext.registerGetterFor(firstField);
  assertThat(firstFieldGetter.getParameters(),is((ParameterList)new ParameterList.Empty<ParameterDescription>()));
  assertThat(firstFieldGetter.getReturnType(),is(firstFieldType));
  assertThat(firstFieldGetter.getInternalName(),startsWith(FOO));
  assertThat(firstFieldGetter.getModifiers(),is(accessorMethodModifiers));
  assertThat(firstFieldGetter.getExceptionTypes(),is((TypeList.Generic)new TypeList.Generic.Empty()));
  assertThat(implementationContext.registerGetterFor(firstField),is(firstFieldGetter));
  when(secondField.isStatic()).thenReturn(true);
  MethodDescription secondFieldGetter=implementationContext.registerGetterFor(secondField);
  assertThat(secondFieldGetter.getParameters(),is((ParameterList)new ParameterList.Empty<ParameterDescription>()));
  assertThat(secondFieldGetter.getReturnType(),is(secondFieldType));
  assertThat(secondFieldGetter.getInternalName(),startsWith(BAR));
  assertThat(secondFieldGetter.getModifiers(),is(accessorMethodModifiers | Opcodes.ACC_STATIC));
  assertThat(secondFieldGetter.getExceptionTypes(),is((TypeList.Generic)new TypeList.Generic.Empty()));
  assertThat(implementationContext.registerGetterFor(firstField),is(firstFieldGetter));
  assertThat(implementationContext.registerGetterFor(secondField),is(secondFieldGetter));
  when(record.getSort()).thenReturn(TypeWriter.MethodPool.Record.Sort.SKIPPED);
  implementationContext.drain(classVisitor,methodPool,injectedCode,annotationValueFilterFactory,supportsBridges);
  verify(classVisitor).visitMethod(eq(accessorMethodModifiers),Matchers.startsWith(FOO),eq("()" + BAR),isNull(String.class),isNull(String[].class));
  verify(classVisitor).visitMethod(eq(accessorMethodModifiers | Opcodes.ACC_STATIC),Matchers.startsWith(BAR),eq("()" + QUX),isNull(String.class),isNull(String[].class));
}
