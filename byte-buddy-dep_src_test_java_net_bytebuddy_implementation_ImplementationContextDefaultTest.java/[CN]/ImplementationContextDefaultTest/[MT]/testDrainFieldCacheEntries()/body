{
  Implementation.Context.ExtractableView implementationContext=new Implementation.Context.Default(instrumentedType,classFileVersion,auxiliaryTypeNamingStrategy,typeInitializer,auxiliaryClassFileVersion);
  FieldDescription firstField=implementationContext.cache(firstFieldValue,firstRawFieldType);
  assertThat(implementationContext.cache(firstFieldValue,firstRawFieldType),is(firstField));
  FieldDescription secondField=implementationContext.cache(secondFieldValue,secondRawFieldType);
  assertThat(implementationContext.cache(secondFieldValue,secondRawFieldType),is(secondField));
  assertThat(firstField.getName(),not(secondField.getName()));
  when(record.getSort()).thenReturn(TypeWriter.MethodPool.Record.Sort.SKIPPED);
  when(typeInitializer.expandWith(any(ByteCodeAppender.class))).thenReturn(otherTypeInitializer);
  when(otherTypeInitializer.expandWith(any(ByteCodeAppender.class))).thenReturn(thirdTypeInitializer);
  when(thirdTypeInitializer.withReturn()).thenReturn(terminationAppender);
  when(thirdTypeInitializer.isDefined()).thenReturn(true);
  implementationContext.drain(classVisitor,methodPool,injectedCode,annotationValueFilterFactory);
  verify(classVisitor).visitField(eq(cacheFieldModifiers),Mockito.startsWith(Implementation.Context.Default.FIELD_CACHE_PREFIX),eq(BAR),Mockito.isNull(String.class),Mockito.isNull(Object.class));
  verify(classVisitor).visitField(eq(cacheFieldModifiers),Mockito.startsWith(Implementation.Context.Default.FIELD_CACHE_PREFIX),eq(QUX),Mockito.isNull(String.class),Mockito.isNull(Object.class));
  verify(typeInitializer).expandWith(any(ByteCodeAppender.class));
  verify(otherTypeInitializer).expandWith(any(ByteCodeAppender.class));
  verify(thirdTypeInitializer).withReturn();
  verify(thirdTypeInitializer).isDefined();
  verify(terminationAppender).apply(methodVisitor,implementationContext,new MethodDescription.Latent.TypeInitializer(instrumentedType));
  verifyNoMoreInteractions(terminationAppender);
}
