{
  Implementation.Context.Default implementationContext=new Implementation.Context.Default(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion);
  MethodDescription.InDefinedShape firstMethodDescription=implementationContext.registerAccessorFor(firstSpecialInvocation);
  assertThat(firstMethodDescription.getParameters(),is((ParameterList)new ParameterList.Explicit.ForTypes(firstMethodDescription,Collections.singletonList(firstSpecialParameterType))));
  assertThat(firstMethodDescription.getReturnType(),is((GenericTypeDescription)firstSpecialReturnType));
  assertThat(firstMethodDescription.getInternalName(),startsWith(FOO));
  assertThat(firstMethodDescription.getModifiers(),is(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER));
  assertThat(firstMethodDescription.getExceptionTypes(),is(firstSpecialExceptionTypes));
  assertThat(implementationContext.registerAccessorFor(firstSpecialInvocation),is(firstMethodDescription));
  when(secondSpecialMethod.isStatic()).thenReturn(true);
  MethodDescription.InDefinedShape secondMethodDescription=implementationContext.registerAccessorFor(secondSpecialInvocation);
  assertThat(secondMethodDescription.getParameters(),is((ParameterList)new ParameterList.Explicit.ForTypes(secondMethodDescription,Collections.singletonList(secondSpecialParameterType))));
  assertThat(secondMethodDescription.getReturnType(),is((GenericTypeDescription)secondSpecialReturnType));
  assertThat(secondMethodDescription.getInternalName(),startsWith(BAR));
  assertThat(secondMethodDescription.getModifiers(),is(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER | Opcodes.ACC_STATIC));
  assertThat(secondMethodDescription.getExceptionTypes(),is(secondSpecialExceptionTypes));
  assertThat(implementationContext.registerAccessorFor(firstSpecialInvocation),is(firstMethodDescription));
  assertThat(implementationContext.registerAccessorFor(secondSpecialInvocation),is(secondMethodDescription));
  when(record.getSort()).thenReturn(TypeWriter.MethodPool.Record.Sort.SKIPPED);
  implementationContext.drain(classVisitor,methodPool,injectedCode);
  verify(classVisitor).visitMethod(eq(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER),Matchers.startsWith(FOO),eq("(" + BAZ + ")"+ QUX),isNull(String.class),aryEq(new String[]{FOO}));
  verify(classVisitor).visitMethod(eq(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER | Opcodes.ACC_STATIC),Matchers.startsWith(BAR),eq("(" + BAR + ")"+ FOO),isNull(String.class),aryEq(new String[]{BAZ}));
}
