{
  when(secondSpecialMethod.isStatic()).thenReturn(true);
  Implementation.Context.Default implementationContext=new Implementation.Context.Default(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion);
  MethodDescription secondMethodDescription=implementationContext.registerAccessorFor(secondSpecialInvocation);
  assertThat(implementationContext.registerAccessorFor(secondSpecialInvocation),is(secondMethodDescription));
  when(entry.getSort()).thenReturn(TypeWriter.MethodPool.Entry.Sort.SKIPPED);
  implementationContext.drain(classVisitor,methodPool,injectedCode);
  verify(classVisitor).visitMethod(eq(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER | Opcodes.ACC_STATIC),Matchers.startsWith(BAR),eq("(" + BAR + ")"+ FOO),isNull(String.class),aryEq(new String[]{BAZ}));
  verify(methodVisitor).visitCode();
  verify(methodVisitor).visitInsn(MoreOpcodes.ALOAD_0);
  verify(secondSpecialInvocation).apply(methodVisitor,implementationContext);
  verify(methodVisitor).visitInsn(Opcodes.ARETURN);
  verify(methodVisitor).visitMaxs(1,0);
  verify(methodVisitor).visitEnd();
}
