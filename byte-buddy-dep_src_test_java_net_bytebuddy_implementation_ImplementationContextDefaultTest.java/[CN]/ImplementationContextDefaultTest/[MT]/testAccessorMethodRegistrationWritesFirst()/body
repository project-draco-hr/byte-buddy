{
  Implementation.Context.Default implementationContext=new Implementation.Context.Default(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion);
  MethodDescription firstMethodDescription=implementationContext.registerAccessorFor(firstSpecialInvocation);
  assertThat(implementationContext.registerAccessorFor(firstSpecialInvocation),is(firstMethodDescription));
  when(entry.getSort()).thenReturn(TypeWriter.MethodPool.Entry.Sort.SKIP);
  implementationContext.drain(classVisitor,methodPool,injectedCode);
  verify(classVisitor).visitMethod(eq(AuxiliaryType.MethodAccessorFactory.ACCESSOR_METHOD_MODIFIER),Matchers.startsWith(FOO),eq("(" + BAZ + ")"+ QUX),isNull(String.class),aryEq(new String[]{FOO}));
  verify(methodVisitor).visitCode();
  verify(methodVisitor).visitInsn(MoreOpcodes.ALOAD_0);
  verify(methodVisitor).visitInsn(MoreOpcodes.ALOAD_1);
  verify(firstSpecialInvocation).apply(methodVisitor,implementationContext);
  verify(methodVisitor).visitInsn(Opcodes.ARETURN);
  verify(methodVisitor).visitMaxs(2,1);
  verify(methodVisitor).visitEnd();
}
