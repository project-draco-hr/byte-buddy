{
  Implementation.Context.Default implementationContext=new Implementation.Context.Default(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion);
  MethodDescription firstMethodDescription=implementationContext.registerAccessorFor(firstSpecialInvocation);
  assertThat(implementationContext.registerAccessorFor(firstSpecialInvocation),is(firstMethodDescription));
  when(record.getSort()).thenReturn(TypeWriter.MethodPool.Record.Sort.SKIPPED);
  implementationContext.drain(classVisitor,methodPool,injectedCode,valueFilterFactory);
  verify(classVisitor).visitMethod(eq(accessorMethodModifiers),Matchers.startsWith(FOO),eq("(" + BAZ + ")"+ QUX),isNull(String.class),aryEq(new String[]{FOO}));
  verify(methodVisitor).visitCode();
  verify(methodVisitor).visitVarInsn(Opcodes.ALOAD,0);
  verify(methodVisitor).visitVarInsn(Opcodes.ALOAD,1);
  verify(firstSpecialInvocation).apply(methodVisitor,implementationContext);
  verify(methodVisitor).visitInsn(Opcodes.ARETURN);
  verify(methodVisitor).visitMaxs(2,1);
  verify(methodVisitor).visitEnd();
}
