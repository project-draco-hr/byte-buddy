{
  firstSpecialExceptionTypes=new GenericTypeList.Explicit(Collections.singletonList(firstSpecialExceptionType));
  secondSpecialExceptionTypes=new GenericTypeList.Explicit(Collections.singletonList(secondSpecialExceptionType));
  when(instrumentedType.getInternalName()).thenReturn(BAZ);
  when(instrumentedType.asErasure()).thenReturn(instrumentedType);
  when(instrumentedType.isClassType()).thenReturn(classType);
  when(methodPool.target(any(MethodDescription.class))).thenReturn(record);
  when(auxiliaryType.make(any(String.class),any(ClassFileVersion.class),any(AuxiliaryType.MethodAccessorFactory.class))).thenReturn(firstDynamicType);
  when(firstDynamicType.getTypeDescription()).thenReturn(firstDescription);
  when(otherAuxiliaryType.make(any(String.class),any(ClassFileVersion.class),any(AuxiliaryType.MethodAccessorFactory.class))).thenReturn(secondDynamicType);
  when(secondDynamicType.getTypeDescription()).thenReturn(secondDescription);
  when(classVisitor.visitMethod(any(int.class),any(String.class),any(String.class),any(String.class),any(String[].class))).thenReturn(methodVisitor);
  when(classVisitor.visitField(any(int.class),any(String.class),any(String.class),any(String.class),any(Object.class))).thenReturn(fieldVisitor);
  when(firstFieldValue.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(secondFieldValue.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(firstFieldType.getStackSize()).thenReturn(StackSize.ZERO);
  when(firstFieldType.getDescriptor()).thenReturn(BAR);
  when(secondFieldType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondFieldType.getDescriptor()).thenReturn(QUX);
  when(injectedCode.getByteCodeAppender()).thenReturn(injectedCodeAppender);
  when(injectedCodeAppender.apply(any(MethodVisitor.class),any(Implementation.Context.class),any(MethodDescription.class))).thenReturn(new ByteCodeAppender.Size(0,0));
  when(terminationAppender.apply(any(MethodVisitor.class),any(Implementation.Context.class),any(MethodDescription.class))).thenReturn(new ByteCodeAppender.Size(0,0));
  when(firstSpecialInvocation.getMethodDescription()).thenReturn(firstSpecialMethod);
  when(firstSpecialInvocation.getTypeDescription()).thenReturn(firstSpecialType);
  when(firstSpecialMethod.getReturnType()).thenReturn(firstSpecialReturnType);
  when(firstSpecialMethod.getInternalName()).thenReturn(FOO);
  when(firstSpecialMethod.getExceptionTypes()).thenReturn(firstSpecialExceptionTypes);
  when(firstSpecialParameterType.getDescriptor()).thenReturn(BAZ);
  when(firstSpecialParameterType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(firstSpecialReturnType.getDescriptor()).thenReturn(QUX);
  when(firstSpecialReturnType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(firstSpecialExceptionType.getInternalName()).thenReturn(FOO);
  when(firstSpecialExceptionType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(firstSpecialParameterType.getStackSize()).thenReturn(StackSize.ZERO);
  when(firstSpecialReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(firstSpecialInvocation.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(firstSpecialMethod.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(firstSpecialMethod,Collections.singletonList(firstSpecialParameterType)));
  when(secondSpecialInvocation.getMethodDescription()).thenReturn(secondSpecialMethod);
  when(secondSpecialInvocation.getTypeDescription()).thenReturn(secondSpecialType);
  when(secondSpecialMethod.getInternalName()).thenReturn(BAR);
  when(secondSpecialMethod.getReturnType()).thenReturn(secondSpecialReturnType);
  when(secondSpecialMethod.getExceptionTypes()).thenReturn(secondSpecialExceptionTypes);
  when(secondSpecialParameterType.getDescriptor()).thenReturn(BAR);
  when(secondSpecialReturnType.getDescriptor()).thenReturn(FOO);
  when(secondSpecialExceptionType.getInternalName()).thenReturn(BAZ);
  when(secondSpecialExceptionType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(secondSpecialParameterType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondSpecialParameterType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(secondSpecialReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondSpecialReturnType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(secondSpecialInvocation.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(secondSpecialMethod.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(secondSpecialMethod,Collections.singletonList(secondSpecialParameterType)));
  when(firstFieldType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(firstFieldType.asErasure()).thenReturn(firstFieldType);
  when(firstFieldType.accept(any(GenericTypeDescription.Visitor.class))).thenReturn(firstFieldType);
  when(firstField.getType()).thenReturn(firstFieldType);
  when(firstField.getName()).thenReturn(FOO);
  when(firstField.getInternalName()).thenReturn(FOO);
  when(firstField.getDescriptor()).thenReturn(BAR);
  when(firstField.getDeclaringType()).thenReturn(firstFieldDeclaringType);
  when(firstField.asDefined()).thenReturn(firstField);
  when(firstFieldDeclaringType.getInternalName()).thenReturn(QUX);
  when(secondFieldType.getSort()).thenReturn(GenericTypeDescription.Sort.NON_GENERIC);
  when(secondFieldType.asErasure()).thenReturn(secondFieldType);
  when(secondFieldType.accept(any(GenericTypeDescription.Visitor.class))).thenReturn(secondFieldType);
  when(secondField.getType()).thenReturn(secondFieldType);
  when(secondField.getName()).thenReturn(BAR);
  when(secondField.getInternalName()).thenReturn(BAR);
  when(secondField.getDescriptor()).thenReturn(FOO);
  when(secondField.getDeclaringType()).thenReturn(secondFieldDeclaringType);
  when(secondField.asDefined()).thenReturn(secondField);
  when(secondFieldDeclaringType.getInternalName()).thenReturn(BAZ);
  when(firstSpecialReturnType.asErasure()).thenReturn(firstSpecialReturnType);
  when(secondSpecialReturnType.asErasure()).thenReturn(secondSpecialReturnType);
  when(firstSpecialExceptionType.asErasure()).thenReturn(firstSpecialExceptionType);
  when(secondSpecialExceptionType.asErasure()).thenReturn(secondSpecialExceptionType);
  when(firstSpecialParameterType.asErasure()).thenReturn(firstSpecialParameterType);
  when(secondSpecialParameterType.asErasure()).thenReturn(secondSpecialParameterType);
  when(firstSpecialParameterType.accept(any(GenericTypeDescription.Visitor.class))).thenReturn(firstSpecialParameterType);
  when(secondSpecialParameterType.accept(any(GenericTypeDescription.Visitor.class))).thenReturn(secondSpecialParameterType);
  when(firstFieldDeclaringType.asErasure()).thenReturn(firstFieldDeclaringType);
  when(secondFieldDeclaringType.asErasure()).thenReturn(secondFieldDeclaringType);
  when(firstSpecialMethod.getDeclaringType()).thenReturn(firstSpecialType);
  when(firstSpecialType.asErasure()).thenReturn(firstSpecialType);
  when(secondSpecialMethod.getDeclaringType()).thenReturn(secondSpecialType);
  when(secondSpecialType.asErasure()).thenReturn(secondSpecialType);
}
