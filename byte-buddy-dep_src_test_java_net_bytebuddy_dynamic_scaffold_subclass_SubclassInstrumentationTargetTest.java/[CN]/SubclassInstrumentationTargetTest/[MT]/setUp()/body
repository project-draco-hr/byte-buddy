{
  when(parameterList.asTypeList()).thenReturn(parameterTypes);
  when(instrumentedType.getSupertype()).thenReturn(superType);
  when(superType.getDeclaredMethods()).thenReturn(new MethodList.Explicit(Arrays.asList(superMethodConstructor)));
  when(superType.getInternalName()).thenReturn(BAR);
  when(superMethod.getDeclaringType()).thenReturn(superType);
  when(superType.getStackSize()).thenReturn(StackSize.ZERO);
  when(superMethod.getReturnType()).thenReturn(returnType);
  when(superMethod.getInternalName()).thenReturn(BAZ);
  when(superMethod.getDescriptor()).thenReturn(FOOBAR);
  when(superMethod.getParameters()).thenReturn(parameterList);
  when(superMethodConstructor.isConstructor()).thenReturn(true);
  when(superMethodConstructor.getParameters()).thenReturn(parameterList);
  when(superMethodConstructor.getReturnType()).thenReturn(returnType);
  when(superMethodConstructor.isSpecializableFor(superType)).thenReturn(true);
  when(superMethodConstructor.getInternalName()).thenReturn(QUXBAZ);
  when(superMethodConstructor.getDescriptor()).thenReturn(BAZBAR);
  super.setUp();
}
