{
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(Class.forName(ARGUMENT_BOOTSTRAP));
  Object value=new Object();
  DynamicType.Loaded<Simple> dynamicType=implement(Simple.class,InvokeDynamic.bootstrap(typeDescription.getDeclaredMethods().filter(named(BOOTSTRAP)).getOnly()).invoke(FOO,String.class).withBooleanValue(BOOLEAN).withByteValue(BYTE).withShortValue(SHORT).withCharacterValue(CHARACTER).withIntegerValue(INTEGER).withLongValue(LONG).withFloatValue(FLOAT).withDoubleValue(DOUBLE).withType(new TypeDescription.ForLoadedType(CLASS)).withEnumeration(new EnumerationDescription.ForLoadedEnumeration(makeEnum())).withInstance(JavaConstant.MethodType.ofLoaded(makeMethodType(CLASS)),JavaConstant.MethodHandle.ofLoaded(makeMethodHandle())).withValue(FOO,CLASS,makeEnum(),makeMethodType(CLASS),makeMethodHandle(),value),getClass().getClassLoader(),isDeclaredBy(Simple.class));
  assertThat(dynamicType.getLoaded().newInstance().foo(),is("" + BOOLEAN + BYTE+ SHORT+ CHARACTER+ INTEGER+ LONG+ FLOAT+ DOUBLE+ CLASS+ makeEnum()+ makeMethodType(CLASS)+ makeMethodHandle()+ FOO+ CLASS+ makeEnum()+ makeMethodType(CLASS)+ makeMethodHandle()+ value));
}
