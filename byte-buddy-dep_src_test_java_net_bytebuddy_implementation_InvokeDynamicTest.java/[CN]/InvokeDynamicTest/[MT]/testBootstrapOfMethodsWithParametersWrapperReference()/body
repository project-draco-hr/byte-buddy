{
  Class<?> type=Class.forName(ARGUMENT_BOOTSTRAP);
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(type);
  Object value=new Object();
  DynamicType.Loaded<Simple> dynamicType=implement(Simple.class,InvokeDynamic.bootstrap(typeDescription.getDeclaredMethods().filter(named(BOOTSTRAP)).getOnly()).invoke(BAR,String.class).withReference(BOOLEAN,BYTE,SHORT,CHARACTER,INTEGER,LONG,FLOAT,DOUBLE,FOO,CLASS,makeEnum(),makeMethodType(CLASS)).withReference(makeMethodHandle()).as(JavaType.METHOD_HANDLE.load()).withReference(value),getClass().getClassLoader(),isDeclaredBy(Simple.class));
  assertThat(dynamicType.getLoaded().getDeclaredFields().length,is(14));
  assertThat(dynamicType.getLoaded().newInstance().foo(),is("" + BOOLEAN + BYTE+ SHORT+ CHARACTER+ INTEGER+ LONG+ FLOAT+ DOUBLE+ FOO+ CLASS+ makeEnum()+ makeMethodType(CLASS)+ makeMethodHandle()+ value));
}
