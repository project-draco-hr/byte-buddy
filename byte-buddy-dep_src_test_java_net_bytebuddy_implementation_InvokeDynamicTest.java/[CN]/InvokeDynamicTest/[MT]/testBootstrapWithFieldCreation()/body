{
  Class<?> type=Class.forName(ARGUMENT_BOOTSTRAP);
  TypeDescription typeDescription=new TypeDescription.ForLoadedType(type);
  DynamicType.Loaded<Simple> dynamicType=implement(Simple.class,InvokeDynamic.bootstrap(typeDescription.getDeclaredMethods().filter(named(BOOTSTRAP)).getOnly()).invoke(QUX,String.class).withInstanceField(FOO,String.class),getClass().getClassLoader(),isDeclaredBy(Simple.class));
  assertThat(dynamicType.getLoaded().getDeclaredFields().length,is(1));
  Simple instance=dynamicType.getLoaded().getConstructor().newInstance();
  Field field=dynamicType.getLoaded().getDeclaredField(FOO);
  field.setAccessible(true);
  field.set(instance,FOO);
  assertThat(instance.foo(),is(FOO));
}
