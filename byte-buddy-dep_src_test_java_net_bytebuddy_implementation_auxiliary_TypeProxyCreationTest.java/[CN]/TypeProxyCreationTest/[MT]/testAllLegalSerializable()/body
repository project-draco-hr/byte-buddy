{
  when(implementationTarget.getInstrumentedType()).thenReturn(foo);
  when(invocationFactory.invoke(eq(implementationTarget),eq(foo),any(MethodDescription.class))).thenReturn(specialMethodInvocation);
  when(specialMethodInvocation.isValid()).thenReturn(true);
  when(specialMethodInvocation.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(methodAccessorFactory.registerAccessorFor(specialMethodInvocation)).thenReturn(proxyMethod);
  TypeDescription dynamicType=new TypeProxy(foo,implementationTarget,invocationFactory,true,true).make(BAR,ClassFileVersion.forCurrentJavaVersion(),methodAccessorFactory).getTypeDescription();
  assertThat(dynamicType.getModifiers(),is(modifiers));
  assertThat(dynamicType.getSuperType().asErasure(),is(foo));
  assertThat(dynamicType.getInterfaces(),is((TypeList.Generic)new TypeList.Generic.ForLoadedTypes(Serializable.class)));
  assertThat(dynamicType.getName(),is(BAR));
  assertThat(dynamicType.getDeclaredMethods().size(),is(2));
  assertThat(dynamicType.isAssignableTo(Serializable.class),is(true));
  verify(methodAccessorFactory,times(fooMethods.size())).registerAccessorFor(specialMethodInvocation);
  for (  MethodDescription methodDescription : fooMethods) {
    verify(invocationFactory).invoke(implementationTarget,foo,methodDescription);
  }
  verifyNoMoreInteractions(invocationFactory);
  verify(specialMethodInvocation,times(fooMethods.size())).isValid();
  verifyNoMoreInteractions(specialMethodInvocation);
}
