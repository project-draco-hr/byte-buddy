{
  if (Enum.class.isAssignableFrom(type)) {
    return AnnotationValue.ForEnumeration.<Enum>of(new EnumerationDescription.ForLoadedEnumeration((Enum<?>)value));
  }
 else   if (Enum[].class.isAssignableFrom(type)) {
    Enum<?>[] element=(Enum<?>[])value;
    List<AnnotationValue<?,?>> annotationValues=new ArrayList<AnnotationValue<?,?>>(element.length);
    for (    Enum<?> anElement : element) {
      annotationValues.add(AnnotationValue.ForEnumeration.<Enum>of(new EnumerationDescription.ForLoadedEnumeration(anElement)));
    }
    return new AnnotationValue.ForComplexArray<Object,Object>(Enum.class,new TypeDescription.ForLoadedType(type),annotationValues);
  }
 else   if (Annotation.class.isAssignableFrom(type)) {
    return AnnotationValue.ForAnnotation.<Annotation>of(new TypeDescription.ForLoadedType(type),asValue((Annotation)value));
  }
 else   if (Annotation[].class.isAssignableFrom(type)) {
    Annotation[] element=(Annotation[])value;
    List<AnnotationValue<?,?>> annotationValues=new ArrayList<AnnotationValue<?,?>>(element.length);
    for (    Annotation anElement : element) {
      annotationValues.add(AnnotationValue.ForAnnotation.<Annotation>of(new TypeDescription.ForLoadedType(type),asValue(anElement)));
    }
    return new AnnotationValue.ForComplexArray<Object,Object>(Annotation.class,new TypeDescription.ForLoadedType(type),annotationValues);
  }
 else   if (Class.class.isAssignableFrom(type)) {
    return AnnotationValue.ForType.<Class>of(new TypeDescription.ForLoadedType((Class<?>)value));
  }
 else   if (Class[].class.isAssignableFrom(type)) {
    Class<?>[] element=(Class<?>[])value;
    List<AnnotationValue<?,?>> annotationValues=new ArrayList<AnnotationValue<?,?>>(element.length);
    for (    Class<?> anElement : element) {
      annotationValues.add(AnnotationValue.ForType.<Class>of(new TypeDescription.ForLoadedType(anElement)));
    }
    return new AnnotationValue.ForComplexArray<Object,Object>(Class.class,TypeDescription.CLASS,annotationValues);
  }
 else {
    return new AnnotationValue.Trivial<Object>(value);
  }
}
