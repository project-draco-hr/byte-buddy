{
  if (Enum.class.isAssignableFrom(type)) {
    return AnnotationValue.ForEnumeration.<Enum>of(new EnumerationDescription.ForLoadedEnumeration((Enum<?>)value));
  }
 else   if (Enum[].class.isAssignableFrom(type)) {
    Enum<?>[] element=(Enum<?>[])value;
    EnumerationDescription[] enumerationDescription=new EnumerationDescription[element.length];
    int index=0;
    for (    Enum<?> anElement : element) {
      enumerationDescription[index++]=new EnumerationDescription.ForLoadedEnumeration(anElement);
    }
    return AnnotationValue.ForComplexArray.of(new TypeDescription.ForLoadedType(type.getComponentType()),enumerationDescription);
  }
 else   if (Annotation.class.isAssignableFrom(type)) {
    return AnnotationValue.ForAnnotation.<Annotation>of(new TypeDescription.ForLoadedType(type),asValue((Annotation)value));
  }
 else   if (Annotation[].class.isAssignableFrom(type)) {
    Annotation[] element=(Annotation[])value;
    AnnotationDescription[] annotationDescription=new AnnotationDescription[element.length];
    int index=0;
    for (    Annotation anElement : element) {
      annotationDescription[index++]=new AnnotationDescription.Latent(new TypeDescription.ForLoadedType(type.getComponentType()),asValue(anElement));
    }
    return AnnotationValue.ForComplexArray.of(new TypeDescription.ForLoadedType(type.getComponentType()),annotationDescription);
  }
 else   if (Class.class.isAssignableFrom(type)) {
    return AnnotationValue.ForType.<Class>of(new TypeDescription.ForLoadedType((Class<?>)value));
  }
 else   if (Class[].class.isAssignableFrom(type)) {
    Class<?>[] element=(Class<?>[])value;
    TypeDescription[] typeDescription=new TypeDescription[element.length];
    int index=0;
    for (    Class<?> anElement : element) {
      typeDescription[index++]=new TypeDescription.ForLoadedType(anElement);
    }
    return AnnotationValue.ForComplexArray.of(typeDescription);
  }
 else {
    return new AnnotationValue.Trivial<Object>(value);
  }
}
