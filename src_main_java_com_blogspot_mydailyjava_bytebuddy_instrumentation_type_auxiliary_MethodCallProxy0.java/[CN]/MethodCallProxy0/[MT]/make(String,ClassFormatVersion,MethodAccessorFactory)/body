{
  String proxyTypeInternalName=auxiliaryTypeName.replace('.','/');
  MethodDescription proxiedMethod=methodAccessorFactory.requireAccessorMethodFor(this.proxiedMethod);
  Map<String,TypeDescription> fields=new LinkedHashMap<String,TypeDescription>(1 + proxiedMethod.getParameterTypes().size());
  StringBuilder constructorDescriptor=new StringBuilder("(");
  int i=0;
  if (!proxiedMethod.isStatic()) {
    fields.put(FIELD_NAME_PREFIX + i,proxiedMethod.getDeclaringType());
    constructorDescriptor.append(proxiedMethod.getDeclaringType().getDescriptor());
  }
  for (  TypeDescription parameterType : proxiedMethod.getParameterTypes()) {
    fields.put(FIELD_NAME_PREFIX + i,parameterType);
    constructorDescriptor.append(parameterType.getDescriptor());
  }
  constructorDescriptor.append(")V");
  Assigner assigner=new VoidAwareAssigner(new PrimitiveTypeAwareAssigner(ReferenceTypeAwareAssigner.INSTANCE),true);
  ClassWriter classWriter=new ClassWriter(ASM_MANUAL);
  ClassVisitor classVisitor=new TraceClassVisitor(classWriter,new PrintWriter(System.out));
  classVisitor.visit(Opcodes.V1_5,DEFAULT_TYPE_ACCESS,proxyTypeInternalName,null,OBJECT_INTERNAL_NAME,Interface.getInternalNames());
  for (  Map.Entry<String,TypeDescription> field : fields.entrySet()) {
    classVisitor.visitField(FIELD_ACCESS,field.getKey(),field.getValue().getDescriptor(),null,ASM_IGNORE).visitEnd();
  }
  MethodVisitor constructor=classVisitor.visitMethod(CONSTRUCTOR_ACCESS,MethodDescription.CONSTRUCTOR_INTERNAL_NAME,constructorDescriptor.toString(),null,null);
  constructor.visitCode();
  int argumentIndex=1;
  constructor.visitIntInsn(Opcodes.ALOAD,0);
  constructor.visitMethodInsn(Opcodes.INVOKESPECIAL,OBJECT_INTERNAL_NAME,MethodDescription.CONSTRUCTOR_INTERNAL_NAME,DEFAULT_CONSTRUCTOR_DESCRIPTOR);
  int currentMaximum=1;
  for (  Map.Entry<String,TypeDescription> field : fields.entrySet()) {
    constructor.visitIntInsn(Opcodes.ALOAD,0);
    MethodVariableAccess.forType(field.getValue()).loadFromIndex(argumentIndex).apply(constructor,null);
    constructor.visitFieldInsn(Opcodes.PUTFIELD,proxyTypeInternalName,field.getKey(),field.getValue().getDescriptor());
    currentMaximum=Math.max(currentMaximum,field.getValue().getStackSize().getSize() + 1);
    argumentIndex+=field.getValue().getStackSize().getSize();
  }
  constructor.visitInsn(Opcodes.RETURN);
  constructor.visitMaxs(currentMaximum,proxiedMethod.getStackSize() + 1);
  constructor.visitEnd();
  for (  Interface anInterface : Interface.values()) {
    anInterface.implement(classVisitor,proxyTypeInternalName,proxiedMethod,fields,assigner);
  }
  classVisitor.visitEnd();
  return new DynamicType.Default.Unloaded<Object>(auxiliaryTypeName,classWriter.toByteArray(),TypeInitializer.NoOp.INSTANCE,Collections.<DynamicType<?>>emptyList());
}
