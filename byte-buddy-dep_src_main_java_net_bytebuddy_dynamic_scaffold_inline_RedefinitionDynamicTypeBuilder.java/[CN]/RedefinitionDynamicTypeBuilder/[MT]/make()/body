{
  MethodRegistry.Compiled compiledMethodRegistry=methodRegistry.prepare(applyRecordedMembersTo(new InlineInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy)),methodLookupEngineFactory.make(classFileVersion.isSupportsDefaultMethods()),InliningImplementationMatcher.of(ignoredMethods,targetType)).compile(new SubclassImplementationTarget.Factory(bridgeMethodResolverFactory,SubclassImplementationTarget.OriginTypeIdentifier.LEVEL_TYPE));
  return TypeWriter.Default.<T>forRedefinition(compiledMethodRegistry,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),auxiliaryTypeNamingStrategy,classVisitorWrapperChain,attributeAppender,classFileVersion,classFileLocator,targetType).make();
}
