{
  MethodRegistry.Compiled compiledMethodRegistry=methodRegistry.prepare(new InstrumentedType.Default(namingStrategy.name(new NamingStrategy.UnnamedType.Default(originalType.getSuperType(),interfaceTypes,modifiers,classFileVersion)),modifiers,originalType.getTypeVariables().accept(new GenericTypeDescription.Visitor.Substitutor.ForDetachment(is(originalType))),originalType.getSuperType(),interfaceTypes,fieldTokens,methodTokens,originalType.getDeclaredAnnotations(),typeInitializer,LoadedTypeInitializer.NoOp.INSTANCE,originalType.getDeclaringType(),originalType.getEnclosingMethod(),originalType.getEnclosingType(),originalType.getDeclaredTypes(),originalType.isMemberClass(),originalType.isAnonymousClass(),originalType.isLocalClass()),methodGraphCompiler,InliningImplementationMatcher.of(ignoredMethods,originalType)).compile(new SubclassImplementationTarget.Factory(SubclassImplementationTarget.OriginTypeResolver.LEVEL_TYPE));
  return TypeWriter.Default.<T>forRedefinition(compiledMethodRegistry,fieldRegistry.compile(compiledMethodRegistry.getInstrumentedType()),auxiliaryTypeNamingStrategy,implementationContextFactory,classVisitorWrapper,attributeAppender,classFileVersion,classFileLocator,originalType).make();
}
