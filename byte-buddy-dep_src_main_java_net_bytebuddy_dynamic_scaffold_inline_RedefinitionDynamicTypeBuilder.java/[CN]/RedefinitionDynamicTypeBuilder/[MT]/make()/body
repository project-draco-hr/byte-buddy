{
  MethodRegistry.Compiled compiledMethodRegistry=methodRegistry.prepare(new InstrumentedType.Default(namingStrategy.name(new NamingStrategy.UnnamedType.Default(targetType.getSuperType().asRawType(),interfaceTypes,modifiers,classFileVersion)),modifiers,targetType.getTypeVariables().accept(new GenericTypeDescription.Visitor.Substitutor.ForDetachment(targetType)),targetType.getSuperType(),interfaceTypes,fieldTokens,methodTokens,targetType.getDeclaredAnnotations(),InstrumentedType.TypeInitializer.None.INSTANCE,LoadedTypeInitializer.NoOp.INSTANCE,targetType.getDeclaringType(),targetType.getEnclosingMethod(),targetType.getEnclosingType(),targetType.isMemberClass(),targetType.isAnonymousClass(),targetType.isLocalClass()),methodLookupEngineFactory.make(classFileVersion.isSupportsDefaultMethods()),InliningImplementationMatcher.of(ignoredMethods,targetType)).compile(new SubclassImplementationTarget.Factory(bridgeMethodResolverFactory,SubclassImplementationTarget.OriginTypeIdentifier.LEVEL_TYPE));
  return TypeWriter.Default.<T>forRedefinition(compiledMethodRegistry,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),auxiliaryTypeNamingStrategy,classVisitorWrapperChain,attributeAppender,classFileVersion,classFileLocator,targetType).make();
}
