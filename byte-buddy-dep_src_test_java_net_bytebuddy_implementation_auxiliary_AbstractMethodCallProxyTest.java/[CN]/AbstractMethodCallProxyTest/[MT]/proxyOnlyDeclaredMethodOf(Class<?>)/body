{
  MethodDescription.InDeclaredForm proxyMethod=new TypeDescription.ForLoadedType(proxyTarget).getDeclaredMethods().filter(not(isConstructor())).getOnly();
  when(methodAccessorFactory.registerAccessorFor(eq(specialMethodInvocation))).thenReturn(proxyMethod);
  String auxiliaryTypeName=getClass().getName() + "$" + proxyTarget.getSimpleName()+ "$Proxy";
  DynamicType dynamicType=new MethodCallProxy(specialMethodInvocation,false).make(auxiliaryTypeName,ClassFileVersion.forCurrentJavaVersion(),methodAccessorFactory);
  DynamicType.Unloaded<?> unloaded=(DynamicType.Unloaded<?>)dynamicType;
  Class<?> auxiliaryType=unloaded.load(getClass().getClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded();
  assertThat(auxiliaryType.getName(),is(auxiliaryTypeName));
  verify(methodAccessorFactory).registerAccessorFor(specialMethodInvocation);
  verifyNoMoreInteractions(methodAccessorFactory);
  verifyZeroInteractions(specialMethodInvocation);
  assertThat(auxiliaryType.getModifiers(),is(Opcodes.ACC_SYNTHETIC));
  assertThat(Callable.class.isAssignableFrom(auxiliaryType),is(true));
  assertThat(Runnable.class.isAssignableFrom(auxiliaryType),is(true));
  assertThat(auxiliaryType.getDeclaredConstructors().length,is(1));
  assertThat(auxiliaryType.getDeclaredMethods().length,is(2));
  assertThat(auxiliaryType.getDeclaredFields().length,is(proxyMethod.getParameters().size() + (proxyMethod.isStatic() ? 0 : 1)));
  int fieldIndex=0;
  if (!proxyMethod.isStatic()) {
    assertEquals(proxyTarget,auxiliaryType.getDeclaredFields()[fieldIndex++].getType());
  }
  for (  Class<?> parameterType : proxyTarget.getDeclaredMethods()[0].getParameterTypes()) {
    assertEquals(parameterType,auxiliaryType.getDeclaredFields()[fieldIndex++].getType());
  }
  return auxiliaryType;
}
