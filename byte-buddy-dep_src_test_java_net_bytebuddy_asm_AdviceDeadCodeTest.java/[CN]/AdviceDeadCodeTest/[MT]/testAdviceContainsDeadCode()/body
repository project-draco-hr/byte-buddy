{
  Class<?> advice=new ByteBuddy(classFileVersion).subclass(Object.class).defineMethod(FOO,void.class,Ownership.STATIC).intercept(new DeadVoidAppender()).annotateMethod(AnnotationDescription.Builder.ofType(Advice.OnMethodEnter.class).define("suppress",RuntimeException.class).build()).annotateMethod(AnnotationDescription.Builder.ofType(Advice.OnMethodExit.class).define("suppress",RuntimeException.class).build()).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER_PERSISTENT).getLoaded();
  Class<?> foo=new ByteBuddy(classFileVersion).subclass(Object.class).defineMethod("foo",String.class,Visibility.PUBLIC).intercept(FixedValue.value(FOO)).make().load(ClassLoadingStrategy.BOOTSTRAP_LOADER,ClassLoadingStrategy.Default.WRAPPER_PERSISTENT).getLoaded();
  Class<?> redefined=new ByteBuddy().redefine(foo).visit(Advice.to(advice).on(named(FOO))).make().load(null,ClassLoadingStrategy.Default.CHILD_FIRST).getLoaded();
  assertThat(redefined,not(sameInstance((Object)foo)));
  assertThat(redefined.getDeclaredMethod(FOO).invoke(redefined.getConstructor().newInstance()),is((Object)FOO));
}
