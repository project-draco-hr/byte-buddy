{
  when(builder.initializer((any(ByteCodeAppender.class)))).thenReturn((DynamicType.Builder)appendedBuilder);
  when(injectorFactory.resolve()).thenReturn(classInjector);
  when(dynamicType.getTypeDescription()).thenReturn(instrumented);
  Map<TypeDescription,byte[]> auxiliaryTypes=new HashMap<TypeDescription,byte[]>();
  auxiliaryTypes.put(dependent,FOO);
  auxiliaryTypes.put(independent,BAR);
  when(dynamicType.getAuxiliaryTypes()).thenReturn(auxiliaryTypes);
  Map<TypeDescription,LoadedTypeInitializer> loadedTypeInitializers=new HashMap<TypeDescription,LoadedTypeInitializer>();
  loadedTypeInitializers.put(instrumented,instrumentedInitializer);
  loadedTypeInitializers.put(dependent,dependentInitializer);
  loadedTypeInitializers.put(independent,independentInitializer);
  when(dynamicType.getLoadedTypeInitializers()).thenReturn(loadedTypeInitializers);
  when(instrumented.getName()).thenReturn(Qux.class.getName());
  when(classInjector.inject(any(Map.class))).then(new Answer<Map<TypeDescription,Class<?>>>(){
    @Override public Map<TypeDescription,Class<?>> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      Map<TypeDescription,Class<?>> loaded=new HashMap<TypeDescription,Class<?>>();
      for (      TypeDescription typeDescription : ((Map<TypeDescription,byte[]>)invocationOnMock.getArguments()[0]).keySet()) {
        if (typeDescription.equals(dependent)) {
          loaded.put(dependent,Foo.class);
        }
 else         if (typeDescription.equals(independent)) {
          loaded.put(independent,Bar.class);
        }
 else {
          throw new AssertionError();
        }
      }
      return loaded;
    }
  }
);
  when(dependent.isAssignableTo(instrumented)).thenReturn(true);
  when(independent.isAssignableTo(instrumented)).thenReturn(false);
  when(instrumentedInitializer.isAlive()).thenReturn(true);
}
