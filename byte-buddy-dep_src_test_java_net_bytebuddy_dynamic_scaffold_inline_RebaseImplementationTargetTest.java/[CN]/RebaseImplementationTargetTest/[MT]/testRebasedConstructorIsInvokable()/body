{
  when(rebasedMethod.isConstructor()).thenReturn(true);
  when(invokableMethod.getDeclaringType()).thenReturn(instrumentedType);
  when(methodRebaseResolver.resolve(invokableMethod)).thenReturn(new MethodRebaseResolver.Resolution.ForRebasedConstructor(rebasedMethod));
  when(rebasedMethod.isSpecializableFor(instrumentedType)).thenReturn(true);
  Implementation.SpecialMethodInvocation specialMethodInvocation=implementationTarget.invokeSuper(invokableToken);
  verify(methodRebaseResolver).resolve(invokableMethod);
  verifyNoMoreInteractions(methodRebaseResolver);
  assertThat(specialMethodInvocation.isValid(),is(true));
  assertThat(specialMethodInvocation.getMethodDescription(),is((MethodDescription)rebasedMethod));
  assertThat(specialMethodInvocation.getTypeDescription(),is(instrumentedType));
  MethodVisitor methodVisitor=mock(MethodVisitor.class);
  Implementation.Context implementationContext=mock(Implementation.Context.class);
  StackManipulation.Size size=specialMethodInvocation.apply(methodVisitor,implementationContext);
  verify(methodVisitor).visitInsn(Opcodes.ACONST_NULL);
  verify(methodVisitor).visitMethodInsn(Opcodes.INVOKESPECIAL,BAZ,QUX,FOO,false);
  verifyNoMoreInteractions(methodVisitor);
  verifyZeroInteractions(implementationContext);
  assertThat(size.getSizeImpact(),is(1));
  assertThat(size.getMaximalSize(),is(1));
}
