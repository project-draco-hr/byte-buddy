{
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(IsVisibilityBridge.class.getDeclaredMethod(FOO))),is(true));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(IsGenericVisibilityBridge.class.getDeclaredMethod(FOO))),is(true));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(IsGenericResolvedVisibilityBridge.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(IsRawGenericVisibilityBridge.class.getDeclaredMethod(FOO))),is(true));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(IsDivergentVisibilityBridge.class.getDeclaredMethod(FOO,Object.class))),is(true));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(TypeVariableBridge.Intermediate.class.getDeclaredMethod(FOO,Object.class))),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(TypeVariableBridge.Inner.class.getDeclaredMethod(FOO,Object.class))),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(TypeVariableBridge.Inner.class.getDeclaredMethod(FOO,Number.class))),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(DivergentTypeVariableBridge.FullyDiverged.class.getDeclaredMethod(FOO,Object.class))),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(DivergentTypeVariableBridge.AmbivalentlyDiverged.class.getDeclaredMethod(FOO,Object.class))),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(ReturnTypeBridge.Intermediate.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(ReturnTypeBridge.Inner.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(ReturnTypeBridge.Inner.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Number.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(TypeVariableReturnTypeOverrideBridge.Intermediate.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(TypeVariableReturnTypeOverrideBridge.Inner.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(TypeVariableReturnTypeOverrideBridge.Inner.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Number.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(TypeVariableReturnTypeCombinationBridge.Inner.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new TypeDescription.ForLoadedType(TypeVariableReturnTypeSpecializationBridge.Inner.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(false));
  assertThat(ElementMatchers.isVisibilityBridge().matches(new MethodDescription.ForLoadedMethod(Object.class.getDeclaredMethod("toString"))),is(false));
}
