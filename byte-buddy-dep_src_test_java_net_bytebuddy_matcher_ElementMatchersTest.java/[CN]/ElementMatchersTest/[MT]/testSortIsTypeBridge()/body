{
  assertThat(ElementMatchers.isTypeBridge().matches(new MethodDescription.ForLoadedMethod(IsVisibilityBridge.class.getDeclaredMethod(FOO))),is(false));
  assertThat(ElementMatchers.isTypeBridge().matches(new MethodDescription.ForLoadedMethod(IsTypeVariableBridge.class.getDeclaredMethod(FOO,Object.class))),is(true));
  assertThat(ElementMatchers.isTypeBridge().matches(new TypeDescription.ForLoadedType(IsReturnTypeBridge.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(true));
  assertThat(ElementMatchers.isTypeBridge().matches(new TypeDescription.ForLoadedType(IsTypeVariableReturnTypeBridge.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(true));
  assertThat(ElementMatchers.isTypeBridge().matches(new TypeDescription.ForLoadedType(IsTypeVariableReturnTypeOverrideBridge.class).getDeclaredMethods().filter(named(FOO).and(ElementMatchers.returns(Object.class))).getOnly()),is(true));
  assertThat(ElementMatchers.isTypeBridge().matches(new MethodDescription.ForLoadedMethod(Object.class.getDeclaredMethod("toString"))),is(false));
}
