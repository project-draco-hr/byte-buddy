{
  when(methodRegistry.append(any(LatentMatcher.class),any(MethodRegistry.Handler.class),any(MethodAttributeAppender.Factory.class),any(MethodTransformer.class))).thenReturn(methodRegistry);
  when(instrumentedType.getSuperClass()).thenReturn(superClass);
  when(superClass.getDeclaredMethods()).thenReturn(new MethodList.Explicit<MethodDescription.InGenericShape>(methodDescription));
  when(methodDescription.isConstructor()).thenReturn(true);
  when(methodDescription.isVisibleTo(instrumentedType)).thenReturn(true);
  when(methodDescription.asToken(ElementMatchers.is(instrumentedType))).thenReturn(token);
  when(token.getName()).thenReturn(FOO);
  when(token.getModifiers()).thenReturn(MODIFIERS);
  when(token.getTypeVariableTokens()).thenReturn(new ByteCodeElement.Token.TokenList<TypeVariableToken>());
  when(token.getReturnType()).thenReturn(typeDescription);
  when(token.getParameterTokens()).thenReturn(new ByteCodeElement.Token.TokenList<ParameterDescription.Token>());
  when(token.getExceptionTypes()).thenReturn(new TypeList.Generic.Empty());
  when(token.getAnnotations()).thenReturn(new AnnotationList.Empty());
  when(token.getDefaultValue()).thenReturn(defaultValue);
  when(token.getReceiverType()).thenReturn(typeDescription);
  stripped=new MethodDescription.Token(FOO,MODIFIERS,Collections.<TypeVariableToken>emptyList(),typeDescription,Collections.<ParameterDescription.Token>emptyList(),Collections.<TypeDescription.Generic>emptyList(),Collections.<AnnotationDescription>emptyList(),defaultValue,TypeDescription.Generic.UNDEFINED);
}
