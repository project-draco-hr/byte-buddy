{
  when(methodList.filter(isConstructor().and(takesArguments(0)).<MethodDescription>and(isVisibleTo(instrumentedType)))).thenReturn((MethodList)filteredMethodList);
  when(filteredMethodList.size()).thenReturn(1);
  assertThat(ConstructorStrategy.Default.DEFAULT_CONSTRUCTOR.extractConstructors(instrumentedType),is((List<MethodDescription.Token>)filteredMethodTokenList));
  assertThat(ConstructorStrategy.Default.DEFAULT_CONSTRUCTOR.inject(methodRegistry,methodAttributeAppenderFactory),is(methodRegistry));
  verify(methodRegistry).append(any(LatentMatcher.class),any(MethodRegistry.Handler.class),eq(methodAttributeAppenderFactory),eq(MethodTransformer.NoOp.INSTANCE));
  verifyNoMoreInteractions(methodRegistry);
  verify(instrumentedType,atLeastOnce()).getSuperType();
  verifyNoMoreInteractions(instrumentedType);
}
