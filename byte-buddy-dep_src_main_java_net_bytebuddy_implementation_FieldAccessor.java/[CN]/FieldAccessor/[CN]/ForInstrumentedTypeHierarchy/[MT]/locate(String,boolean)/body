{
  TypeDescription currentType=instrumentedType;
  do {
    FieldList fieldList=currentType.getDeclaredFields().filter(named(name).and(isVisibleTo(instrumentedType)));
    if (!fieldList.isEmpty() && (!staticMethod || fieldList.getOnly().isStatic())) {
      return fieldList.getOnly();
    }
  }
 while (!(currentType=currentType.getSupertype()).represents(Object.class));
  throw new IllegalArgumentException("There is no field '" + name + " that is visible to "+ instrumentedType);
}
