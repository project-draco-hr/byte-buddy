{
  for (  TypeDefinition currentType : instrumentedType) {
    FieldList<?> fieldList=currentType.getDeclaredFields().filter(named(name).and(isVisibleTo(instrumentedType)));
    if (fieldList.size() > 1) {
      throw new IllegalStateException("Ambiguous fields: " + fieldList);
    }
 else     if (!fieldList.isEmpty() && (!staticMethod || fieldList.getOnly().isStatic())) {
      return fieldList.getOnly();
    }
  }
  throw new IllegalArgumentException("There is no field '" + name + " that is visible to "+ instrumentedType);
}
