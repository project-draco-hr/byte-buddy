{
  when(firstMethod.getReturnType()).thenReturn(firstMethodReturnType);
  when(firstMethod.getParameterTypes()).thenReturn(firstMethodParameters);
  when(firstMethod.getDeclaringType()).thenReturn(superType);
  when(firstMethod.getInternalName()).thenReturn(QUX);
  when(firstMethod.getUniqueSignature()).thenReturn(FOO);
  when(firstMethod.isSpecializableFor(superType)).thenReturn(true);
  when(firstMethodReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(secondMethod.getReturnType()).thenReturn(secondMethodReturnType);
  when(secondMethod.getParameterTypes()).thenReturn(secondMethodParameters);
  when(secondMethod.getDeclaringType()).thenReturn(superType);
  when(secondMethod.getInternalName()).thenReturn(BAZ);
  when(secondMethod.getUniqueSignature()).thenReturn(BAZ);
  when(secondMethod.isSpecializableFor(superType)).thenReturn(true);
  MethodDescription toStringMethod=new TypeDescription.ForLoadedType(Object.class).getDeclaredMethods().filter(named(TO_STRING)).getOnly();
  when(superType.isAssignableFrom(superType)).thenReturn(true);
  when(secondMethodReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(instrumentedType.detach()).thenReturn(instrumentedType);
  when(methodLookupEngineFinding.getInvokableMethods()).thenReturn(methodList);
  when(methodLookupEngineFinding.getLookedUpType()).thenReturn(instrumentedType);
  when(instrumentedType.getSupertype()).thenReturn(superType);
  when(methodList.filter(isBridge())).thenReturn(new MethodList.Empty());
  when(methodList.iterator()).thenReturn(Arrays.asList(firstMethod,secondMethod,toStringMethod).iterator());
  delegate=new SubclassInstrumentationContextDelegate(methodLookupEngineFinding,BridgeMethodResolver.Simple.Factory.FAIL_FAST,FOO);
}
