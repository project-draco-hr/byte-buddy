{
  InputStream inputStream=classLoader.getResourceAsStream(MANIFEST_FILE);
  if (inputStream != null) {
    try {
      Manifest manifest=new Manifest(inputStream);
      Map<Attributes.Name,String> values=new HashMap<Attributes.Name,String>(ATTRIBUTE_NAMES.length);
      Attributes attributes=manifest.getMainAttributes();
      if (attributes != null) {
        for (        Attributes.Name attributeName : ATTRIBUTE_NAMES) {
          values.put(attributeName,attributes.getValue(attributeName));
        }
      }
      attributes=manifest.getAttributes(packageName.replace('.','/').concat("/"));
      if (attributes != null) {
        for (        Attributes.Name attributeName : ATTRIBUTE_NAMES) {
          String value=attributes.getValue(attributeName);
          if (value != null) {
            values.put(attributeName,value);
          }
        }
      }
      return new Definition.Simple(values.get(Attributes.Name.SPECIFICATION_TITLE),values.get(Attributes.Name.SPECIFICATION_VERSION),values.get(Attributes.Name.SPECIFICATION_VENDOR),values.get(Attributes.Name.IMPLEMENTATION_TITLE),values.get(Attributes.Name.IMPLEMENTATION_VERSION),values.get(Attributes.Name.IMPLEMENTATION_VENDOR),Boolean.parseBoolean(values.get(Attributes.Name.SEALED)) ? codeSourceLocator.findSealBase(packageName,classLoader,simpleTypeName) : NOT_SEALED);
    }
  finally {
      inputStream.close();
    }
  }
 else {
    return Definition.Trivial.INSTANCE;
  }
}
