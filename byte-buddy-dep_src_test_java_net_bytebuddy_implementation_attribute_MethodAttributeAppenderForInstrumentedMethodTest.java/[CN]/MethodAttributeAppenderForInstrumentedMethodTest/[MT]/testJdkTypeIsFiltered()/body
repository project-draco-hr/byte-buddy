{
  when(annotationValueFilter.isRelevant(any(AnnotationDescription.class),any(MethodDescription.InDefinedShape.class))).thenReturn(true);
  AnnotationDescription annotationDescription=mock(AnnotationDescription.class);
  TypeDescription annotationType=mock(TypeDescription.class);
  when(annotationType.getDeclaredMethods()).thenReturn(new MethodList.Empty<MethodDescription.InDefinedShape>());
  when(annotationDescription.getRetention()).thenReturn(RetentionPolicy.RUNTIME);
  when(annotationDescription.getAnnotationType()).thenReturn(annotationType);
  when(annotationType.getActualName()).thenReturn("jdk.internal.Sample");
  when(methodDescription.getDeclaredAnnotations()).thenReturn(new AnnotationList.Explicit(annotationDescription));
  when(methodDescription.getParameters()).thenReturn((ParameterList)new ParameterList.Empty<ParameterDescription>());
  when(methodDescription.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
  when(methodDescription.getTypeVariables()).thenReturn(new TypeList.Generic.Empty());
  when(methodDescription.getExceptionTypes()).thenReturn(new TypeList.Generic.Empty());
  methodAttributeAppender.apply(methodVisitor,methodDescription,annotationValueFilter);
  verifyZeroInteractions(methodVisitor);
}
