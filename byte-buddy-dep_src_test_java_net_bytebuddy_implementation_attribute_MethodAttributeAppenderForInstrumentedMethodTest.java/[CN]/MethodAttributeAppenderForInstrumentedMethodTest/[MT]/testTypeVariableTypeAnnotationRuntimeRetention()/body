{
  when(annotatedTypeVariable.getDeclaredAnnotations()).thenReturn(new AnnotationList.ForLoadedAnnotations(new Baz.Instance()));
  when(annotatedTypeVariableBound.getDeclaredAnnotations()).thenReturn(new AnnotationList.ForLoadedAnnotations(new Baz.Instance()));
  when(methodDescription.getParameters()).thenReturn((ParameterList)new ParameterList.Empty<ParameterDescription>());
  when(methodDescription.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
  when(methodDescription.getTypeVariables()).thenReturn(new TypeList.Generic.Explicit(annotatedTypeVariable));
  when(methodDescription.getExceptionTypes()).thenReturn(new TypeList.Generic.Empty());
  when(methodDescription.getDeclaredAnnotations()).thenReturn(new AnnotationList.Empty());
  methodAttributeAppender.apply(methodVisitor,methodDescription,annotationValueFilter);
  verify(methodVisitor).visitTypeAnnotation(TypeReference.newTypeParameterReference(TypeReference.METHOD_TYPE_PARAMETER,0).getValue(),null,Type.getDescriptor(Baz.class),true);
  verify(methodVisitor).visitTypeAnnotation(TypeReference.newTypeParameterBoundReference(TypeReference.METHOD_TYPE_PARAMETER_BOUND,0,0).getValue(),null,Type.getDescriptor(Baz.class),true);
  verifyZeroInteractions(methodVisitor);
}
