{
  when(annotationValueFilter.isRelevant(any(AnnotationDescription.class),any(MethodDescription.InDefinedShape.class))).thenReturn(true);
  when(methodDescription.getDeclaredAnnotations()).thenReturn(new AnnotationList.Empty());
  ParameterDescription parameterDescription=mock(ParameterDescription.class);
  when(parameterDescription.getDeclaredAnnotations()).thenReturn(new AnnotationList.Empty());
  when(parameterDescription.getType()).thenReturn(simpleAnnotatedType);
  when(methodDescription.getParameters()).thenReturn((ParameterList)new ParameterList.Explicit<ParameterDescription>(parameterDescription));
  when(methodDescription.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
  when(methodDescription.getTypeVariables()).thenReturn(new TypeList.Generic.Empty());
  when(methodDescription.getExceptionTypes()).thenReturn(new TypeList.Generic.Empty());
  when(simpleAnnotatedType.getDeclaredAnnotations()).thenReturn(new AnnotationList.ForLoadedAnnotations(new Qux.Instance()));
  MethodAttributeAppender.ForInstrumentedMethod.INSTANCE.apply(methodVisitor,methodDescription,annotationValueFilter);
  verifyZeroInteractions(methodVisitor);
  verify(methodDescription).getDeclaredAnnotations();
  verify(methodDescription).getParameters();
  verify(methodDescription).getReturnType();
  verify(methodDescription).getExceptionTypes();
  verify(methodDescription).getTypeVariables();
  verifyNoMoreInteractions(methodDescription);
}
