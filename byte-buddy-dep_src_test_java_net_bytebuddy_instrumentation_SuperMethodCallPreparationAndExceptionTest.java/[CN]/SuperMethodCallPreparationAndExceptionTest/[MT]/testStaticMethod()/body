{
  when(typeDescription.getSupertype()).thenReturn(superType);
  when(methodDescription.isStatic()).thenReturn(true);
  when(methodDescription.getParameterTypes()).thenReturn(methodParameters);
  when(methodParameters.iterator()).thenReturn(Arrays.<TypeDescription>asList().iterator());
  when(methodDescription.getReturnType()).thenReturn(returnType);
  when(returnType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(superType.getDeclaredMethods()).thenReturn(superTypeMethods);
  when(superTypeMethods.filter(any(MethodMatcher.class))).thenReturn(superTypeMethods);
  when(instrumentationTarget.invokeSuper(eq(methodDescription),any(Instrumentation.Target.MethodLookup.class))).thenReturn(Instrumentation.SpecialMethodInvocation.Illegal.INSTANCE);
  SuperMethodCall.INSTANCE.appender(instrumentationTarget).apply(methodVisitor,instrumentationContext,methodDescription);
}
