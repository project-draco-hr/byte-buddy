{
  this.instrumentedType=instrumentedType;
  this.auxiliaryTypeNamingStrategy=auxiliaryTypeNamingStrategy;
  this.typeInitializer=typeInitializer;
  this.classFileVersion=classFileVersion;
  registeredAccessorMethods=new HashMap<Implementation.SpecialMethodInvocation,MethodDescription.InDefinedShape>();
  registeredGetters=new HashMap<FieldDescription,MethodDescription.InDefinedShape>();
  registeredSetters=new HashMap<FieldDescription,MethodDescription.InDefinedShape>();
  accessorMethods=new LinkedList<TypeWriter.MethodPool.Record>();
  auxiliaryTypes=new HashMap<AuxiliaryType,DynamicType>();
  registeredFieldCacheEntries=new HashMap<FieldCacheEntry,FieldDescription>();
  suffix=RandomString.make();
  canRegisterFieldCache=true;
}
