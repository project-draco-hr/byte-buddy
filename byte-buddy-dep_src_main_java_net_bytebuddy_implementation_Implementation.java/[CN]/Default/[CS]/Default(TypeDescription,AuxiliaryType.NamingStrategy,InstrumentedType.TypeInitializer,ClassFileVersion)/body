{
  this.instrumentedType=instrumentedType;
  this.auxiliaryTypeNamingStrategy=auxiliaryTypeNamingStrategy;
  this.typeInitializer=typeInitializer;
  this.classFileVersion=classFileVersion;
  registeredAccessorMethods=new HashMap<Implementation.SpecialMethodInvocation,MethodDescription.inDefinedShape>();
  registeredGetters=new HashMap<FieldDescription,MethodDescription.inDefinedShape>();
  registeredSetters=new HashMap<FieldDescription,MethodDescription.inDefinedShape>();
  accessorMethodEntries=new HashMap<MethodDescription,TypeWriter.MethodPool.Entry>();
  auxiliaryTypes=new HashMap<AuxiliaryType,DynamicType>();
  registeredFieldCacheEntries=new HashMap<FieldCacheEntry,FieldDescription>();
  randomString=new RandomString();
  canRegisterFieldCache=true;
}
