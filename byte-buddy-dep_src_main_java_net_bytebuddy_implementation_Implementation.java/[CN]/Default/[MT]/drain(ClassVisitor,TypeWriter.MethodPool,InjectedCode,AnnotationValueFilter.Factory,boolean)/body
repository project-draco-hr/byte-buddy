{
  fieldCacheCanAppendEntries=false;
  TypeInitializer typeInitializer=this.typeInitializer;
  for (  Map.Entry<FieldCacheEntry,FieldDescription.InDefinedShape> entry : registeredFieldCacheEntries.entrySet()) {
    classVisitor.visitField(entry.getValue().getModifiers(),entry.getValue().getInternalName(),entry.getValue().getDescriptor(),entry.getValue().getGenericSignature(),FieldDescription.NO_DEFAULT_VALUE).visitEnd();
    typeInitializer=typeInitializer.expandWith(new ByteCodeAppender.Simple(entry.getKey().storeIn(entry.getValue())));
  }
  if (injectedCode.isDefined()) {
    typeInitializer=typeInitializer.expandWith(injectedCode.getByteCodeAppender());
  }
  MethodDescription typeInitializerMethod=new MethodDescription.Latent.TypeInitializer(instrumentedType);
  TypeWriter.MethodPool.Record initializerRecord=methodPool.target(typeInitializerMethod,supportsBridges);
  if (initializerRecord.getSort().isImplemented() && typeInitializer.isDefined()) {
    initializerRecord=initializerRecord.prepend(typeInitializer);
  }
 else   if (typeInitializer.isDefined()) {
    initializerRecord=new TypeWriter.MethodPool.Record.ForDefinedMethod.WithBody(typeInitializerMethod,typeInitializer.withReturn());
  }
  if (prohibitTypeInitializer && initializerRecord.getSort().isDefined()) {
    throw new IllegalStateException("It is impossible to define a class initializer or cached values for " + instrumentedType);
  }
  initializerRecord.apply(classVisitor,this,annotationValueFilterFactory);
  for (  TypeWriter.MethodPool.Record record : accessorMethods) {
    record.apply(classVisitor,this,annotationValueFilterFactory);
  }
}
