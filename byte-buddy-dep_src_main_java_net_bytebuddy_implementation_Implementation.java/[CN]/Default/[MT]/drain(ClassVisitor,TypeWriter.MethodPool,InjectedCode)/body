{
  canRegisterFieldCache=false;
  InstrumentedType.TypeInitializer typeInitializer=this.typeInitializer;
  for (  Map.Entry<FieldCacheEntry,FieldDescription> entry : registeredFieldCacheEntries.entrySet()) {
    classVisitor.visitField(entry.getValue().getModifiers(),entry.getValue().getInternalName(),entry.getValue().getDescriptor(),entry.getValue().getGenericSignature(),NO_DEFAULT_VALUE).visitEnd();
    typeInitializer=typeInitializer.expandWith(new ByteCodeAppender.Simple(entry.getKey().storeIn(entry.getValue())));
  }
  if (injectedCode.isDefined()) {
    typeInitializer=typeInitializer.expandWith(injectedCode.getByteCodeAppender());
  }
  MethodDescription typeInitializerMethod=new MethodDescription.Latent.TypeInitializer(instrumentedType);
  TypeWriter.MethodPool.Entry initializerEntry=methodPool.target(typeInitializerMethod);
  if (initializerEntry.getSort().isImplemented() && typeInitializer.isDefined()) {
    initializerEntry=initializerEntry.prepend(typeInitializer);
  }
 else   if (typeInitializer.isDefined()) {
    initializerEntry=new TypeWriter.MethodPool.Entry.ForImplementation(typeInitializer.withReturn());
  }
  initializerEntry.apply(classVisitor,this,typeInitializerMethod);
  for (  Map.Entry<MethodDescription,TypeWriter.MethodPool.Entry> entry : accessorMethodEntries.entrySet()) {
    entry.getValue().apply(classVisitor,this,entry.getKey());
  }
}
