{
  JavaInstance.MethodType factoryMethod=JavaInstance.MethodType.of(factoryMethodType);
  JavaInstance.MethodType lambdaMethod=JavaInstance.MethodType.of(lambdaMethodType);
  JavaInstance.MethodHandle targetMethod=JavaInstance.MethodHandle.of(targetMethodHandle,targetTypeLookup);
  Class<?> targetType=JavaInstance.MethodHandle.lookupType(targetTypeLookup);
  String lambdaClassName=targetType.getName() + LAMBDA_TYPE_INFIX + lambdaNameCounter.incrementAndGet();
  DynamicType.Builder<?> builder=byteBuddy.subclass(factoryMethod.getReturnType(),ConstructorStrategy.Default.NO_CONSTRUCTORS).modifiers(SyntheticState.SYNTHETIC,TypeManifestation.FINAL,lambdaMethod.getParameterTypes().isEmpty() ? Visibility.PUBLIC : Visibility.PACKAGE_PRIVATE).implement(markerInterfaces).name(lambdaClassName).defineConstructor(factoryMethod.getParameterTypes().isEmpty() ? Visibility.PUBLIC : Visibility.PRIVATE).withParameters(factoryMethod.getParameterTypes()).intercept(new ConstructorImplementation()).method(named(lambdaMethodName).and(takesArguments(lambdaMethod.getParameterTypes())).and(returns(lambdaMethod.getReturnType()))).intercept(new LambdaMethodImplementation(targetMethod.asMethodDescription()));
  int index=0;
  for (  TypeDescription capturedType : factoryMethod.getParameterTypes()) {
    builder=builder.defineField(FIELD_PREFIX + index++,capturedType,Visibility.PUBLIC,FieldManifestation.FINAL);
  }
  if (!factoryMethod.getParameterTypes().isEmpty()) {
    builder=builder.defineMethod(LAMBDA_FACTORY,factoryMethod.getReturnType(),Visibility.PRIVATE,Ownership.STATIC).withParameters(factoryMethod.getParameterTypes()).intercept(new FactoryImplementation());
  }
  if (enforceSerialization || factoryMethod.getReturnType().isAssignableTo(Serializable.class) || markerInterfaces.contains(Serializable.class)) {
    builder=builder.defineMethod("writeReplace",Object.class).intercept(new SerializationImplementation(new TypeDescription.ForLoadedType(targetType),targetMethod,JavaInstance.MethodType.of(specializedLambdaMethodType)));
  }
 else {
    builder=builder.defineMethod("readObject",ObjectInputStream.class).intercept(ExceptionMethod.throwing(NotSerializableException.class,"Non-serializable lambda")).defineMethod("writeObject",ObjectOutputStream.class).intercept(ExceptionMethod.throwing(NotSerializableException.class,"Non-serializable lambda"));
  }
  byte[] classFile=builder.visit(DebuggingWrapper.makeDefault()).make().getBytes();
  for (  ClassFileTransformer classFileTransformer : classFileTransformers) {
    byte[] transformedClassFile=classFileTransformer.transform(targetType.getClassLoader(),lambdaClassName.replace('.','/'),NOT_PREVIOUSLY_DEFINED,targetType.getProtectionDomain(),classFile);
    classFile=transformedClassFile == null ? classFile : transformedClassFile;
  }
  return classFile;
}
