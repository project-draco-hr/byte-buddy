{
  for (  Constructor<?> constructor : type.getDeclaredConstructors()) {
    if (constructor.isSynthetic() && skipSynthetic) {
      continue;
    }
    constructor.setAccessible(true);
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    Object[] actualArguments=new Object[parameterTypes.length];
    Object[] otherArguments=new Object[parameterTypes.length];
    int index=0;
    for (    Class<?> parameterType : parameterTypes) {
      putInstance(parameterType,actualArguments,otherArguments,index++);
    }
    int testIndex=0;
    Object instance=constructor.newInstance(actualArguments);
    assertThat(instance,is(instance));
    assertThat(instance,not(is((Object)null)));
    assertThat(instance,not(is(new Object())));
    Object similarInstance=constructor.newInstance(actualArguments);
    assertThat(instance.hashCode(),is(similarInstance.hashCode()));
    assertThat(instance,is(similarInstance));
    if (!skipToString) {
      assertThat(instance.toString(),startsWith(type.getCanonicalName().substring(type.getPackage().getName().length() + 1) + "{"));
      assertThat(instance.toString(),endsWith("}"));
      Class<?> currentType=type;
      do {
        for (        Field field : type.getDeclaredFields()) {
          if (!field.isSynthetic() && !Modifier.isStatic(field.getModifiers()) && !ignoredFields.contains(field.getName())) {
            assertThat(instance.toString(),containsString(field.getName()));
          }
        }
      }
 while ((currentType=currentType.getSuperclass()) != Object.class);
    }
 else {
      assertThat(instance.toString(),notNullValue());
    }
    for (    Object otherArgument : otherArguments) {
      Object[] compareArguments=new Object[actualArguments.length];
      int argumentIndex=0;
      for (      Object actualArgument : actualArguments) {
        if (argumentIndex == testIndex) {
          compareArguments[argumentIndex]=otherArgument;
        }
 else {
          compareArguments[argumentIndex]=actualArgument;
        }
        argumentIndex++;
      }
      Object unlikeInstance=constructor.newInstance(compareArguments);
      assertThat(instance.hashCode(),not(is(unlikeInstance)));
      assertThat(instance,not(is(unlikeInstance)));
      testIndex++;
    }
  }
}
