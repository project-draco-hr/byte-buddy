{
  MethodDescription leftMethod=left.getRepresentative(), rightMethod=right.getRepresentative();
  if (leftMethod.getDeclaringType().equals(rightMethod.getDeclaringType())) {
    return left;
  }
  TypeDescription leftType=leftMethod.getDeclaringType().asRawType(), rightType=rightMethod.getDeclaringType().asRawType();
  if (leftType.isAssignableTo(rightType)) {
    return left;
  }
 else   if (rightType.isAssignableTo(leftType)) {
    return right;
  }
 else {
    return Entry.Ambiguous.of(left.getKey().combineWith(right.getKey()),leftMethod,rightMethod,merger);
  }
}
