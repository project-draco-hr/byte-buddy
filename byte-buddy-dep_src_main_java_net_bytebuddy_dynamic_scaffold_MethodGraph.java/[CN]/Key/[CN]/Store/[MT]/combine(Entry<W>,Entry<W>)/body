{
  Set<MethodDescription> leftMethods=left.getCandidates(), rightMethods=right.getCandidates();
  LinkedHashSet<MethodDescription> combined=new LinkedHashSet<MethodDescription>(leftMethods.size() + rightMethods.size());
  combined.addAll(leftMethods);
  combined.addAll(rightMethods);
  for (  MethodDescription leftMethod : leftMethods) {
    TypeDescription leftType=leftMethod.getDeclaringType().asErasure();
    for (    MethodDescription rightMethod : rightMethods) {
      TypeDescription rightType=rightMethod.getDeclaringType().asErasure();
      if (leftType.isAssignableTo(rightType)) {
        combined.remove(rightMethod);
        break;
      }
 else       if (leftType.isAssignableFrom(rightType)) {
        combined.remove(leftMethod);
        break;
      }
    }
  }
  Key.Harmonized<W> key=left.getKey().combineWith(right.getKey());
  return combined.size() == 1 ? new Entry.Resolved<W>(key,combined.iterator().next(),false) : new Entry.Ambiguous<W>(key,combined);
}
