{
  Key.Identifying<U> key=this.key.expandWith(methodDescription.asDefined(),identifierFactory);
  if (methodDescription.getDeclaringType().asRawType().equals(declaringType)) {
    return methodToken.isBridge() ^ methodDescription.isBridge() ? methodToken.isBridge() ? new ForMethod<U>(key,methodDescription) : new Ambiguous<U>(key,declaringType,methodToken) : new Ambiguous<U>(key,declaringType,methodDescription.asToken());
  }
 else {
    return methodDescription.isBridge() ? new Ambiguous<U>(key,declaringType,methodToken) : new ForMethod<U>(key,methodDescription);
  }
}
