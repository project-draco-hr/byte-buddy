{
  Harmonized<U> key=this.key.expandWith(methodDescription.asDefined(),harmonizer);
  if (methodDescription.getDeclaringType().asRawType().equals(declaringType)) {
    if (methodToken.isBridge() ^ methodDescription.isBridge()) {
      return methodToken.isBridge() ? new ForMethod<U>(key,methodDescription,false) : new Ambiguous<U>(key,declaringType,methodToken);
    }
 else {
      return new Ambiguous<U>(key,declaringType,merge(methodToken,methodDescription.asToken()));
    }
  }
 else {
    return methodDescription.isBridge() ? new Ambiguous<U>(key,declaringType,methodToken) : new ForMethod<U>(key,methodDescription,false);
  }
}
