{
  target=File.createTempFile(FOO,TEMP);
  assertThat(target.delete(),is(true));
  assertThat(target.mkdir(),is(true));
  when(project.getLogger()).thenReturn(logger);
  when(byteBuddyExtension.getTransformations()).thenReturn(Collections.singletonList(transformation));
  when(byteBuddyExtension.getInitialization()).thenReturn(initialization);
  when(parent.getDestinationDir()).thenReturn(target);
  when(transformation.getClassPath(any(File.class),any(Iterable.class))).thenReturn(Collections.emptySet());
  when(parent.getClasspath()).thenReturn(fileCollection);
  when(fileCollection.iterator()).then(new Answer<Iterator<File>>(){
    @Override public Iterator<File> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return Collections.singleton(target).iterator();
    }
  }
);
  when(byteBuddyExtension.getMethodNameTransformer()).thenReturn(MethodNameTransformer.Suffixing.withRandomSuffix());
  transformationAction=new TransformationAction(project,byteBuddyExtension,parent);
}
