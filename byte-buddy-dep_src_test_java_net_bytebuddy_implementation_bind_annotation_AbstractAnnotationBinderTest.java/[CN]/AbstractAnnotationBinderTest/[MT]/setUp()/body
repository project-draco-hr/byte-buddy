{
  when(sourceDeclaringType.asErasure()).thenReturn(sourceDeclaringType);
  when(targetDeclaringType.asErasure()).thenReturn(targetDeclaringType);
  when(source.getDeclaringType()).thenReturn(sourceDeclaringType);
  annotation=mock(annotationType);
  doReturn(annotationType).when(annotation).annotationType();
  annotationDescription=AnnotationDescription.ForLoadedAnnotation.of(annotation);
  when(source.getParameters()).thenReturn((ParameterList)sourceParameterList);
  when(sourceParameterList.asTypeList()).thenReturn(sourceTypeList);
  when(sourceTypeList.asErasures()).thenReturn(rawSourceTypeList);
  when(assigner.assign(any(TypeDescription.class),any(TypeDescription.class),any(Assigner.Typing.class))).thenReturn(stackManipulation);
  when(implementationTarget.getInstrumentedType()).thenReturn(instrumentedType);
  when(implementationTarget.getOriginType()).thenReturn(instrumentedType);
  when(instrumentedType.asErasure()).thenReturn(instrumentedType);
  when(instrumentedType.iterator()).then(new Answer<Iterator<TypeDefinition>>(){
    @Override public Iterator<TypeDefinition> answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return Collections.<TypeDefinition>singleton(instrumentedType).iterator();
    }
  }
);
}
