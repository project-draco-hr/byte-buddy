{
  Object actualArgument, otherArgument;
  if (parameterType == boolean.class) {
    actualArgument=DEFAULT_BOOLEAN;
    otherArgument=OTHER_BOOLEAN;
  }
 else   if (parameterType == byte.class) {
    actualArgument=DEFAULT_BYTE;
    otherArgument=OTHER_BYTE;
  }
 else   if (parameterType == char.class) {
    actualArgument=DEFAULT_CHAR;
    otherArgument=OTHER_CHAR;
  }
 else   if (parameterType == short.class) {
    actualArgument=DEFAULT_SHORT;
    otherArgument=OTHER_SHORT;
  }
 else   if (parameterType == int.class) {
    actualArgument=DEFAULT_INT;
    otherArgument=OTHER_INT;
  }
 else   if (parameterType == long.class) {
    actualArgument=DEFAULT_LONG;
    otherArgument=OTHER_LONG;
  }
 else   if (parameterType == float.class) {
    actualArgument=DEFAULT_FLOAT;
    otherArgument=OTHER_FLOAT;
  }
 else   if (parameterType == double.class) {
    actualArgument=DEFAULT_DOUBLE;
    otherArgument=OTHER_DOUBLE;
  }
 else   if (parameterType == String.class) {
    actualArgument=DEFAULT_STRING;
    otherArgument=OTHER_STRING;
  }
 else   if (parameterType.isEnum()) {
    Object[] enumConstants=parameterType.getEnumConstants();
    if (enumConstants.length == 1) {
      throw new IllegalArgumentException("Enum with only one constant: " + parameterType);
    }
    actualArgument=enumConstants[0];
    otherArgument=enumConstants[1];
  }
 else   if (List.class.isAssignableFrom(parameterType)) {
    actualArgument=Array.newInstance(Object.class,1);
    otherArgument=Array.newInstance(Object.class,1);
    putInstance(Object.class,actualArgument,otherArgument,0);
    actualArgument=Arrays.asList((Object[])actualArgument);
    otherArgument=Arrays.asList((Object[])otherArgument);
  }
 else   if (parameterType.isArray()) {
    actualArgument=Array.newInstance(parameterType.getComponentType(),1);
    otherArgument=Array.newInstance(parameterType.getComponentType(),1);
    putInstance(parameterType.getComponentType(),actualArgument,otherArgument,0);
  }
 else   if ((parameterType.getModifiers() & Opcodes.ACC_FINAL) != 0) {
    throw new IllegalArgumentException("Cannot mock final type " + parameterType);
  }
 else {
    actualArgument=generator.generate(parameterType);
    refinement.apply(actualArgument);
    otherArgument=generator.generate(parameterType);
    refinement.apply(otherArgument);
  }
  Array.set(actualArguments,index,actualArgument);
  Array.set(otherArguments,index,otherArgument);
}
