{
  ClassWriter classWriter=new ClassWriter(classVisitorWrapper.mergeWriter(ASM_NO_FLAGS));
  ClassVisitor classVisitor=classVisitorWrapper.wrap(new ValidatingClassVisitor(classWriter));
  classVisitor.visit(classFileVersion.getVersion(),instrumentedType.getActualModifiers(!instrumentedType.isInterface()),instrumentedType.getInternalName(),instrumentedType.getGenericSignature(),(instrumentedType.getSuperType() == null ? TypeDescription.OBJECT : instrumentedType.getSuperType().asErasure()).getInternalName(),instrumentedType.getInterfaces().asErasures().toInternalNames());
  attributeAppender.apply(classVisitor,instrumentedType,instrumentedType.getSuperType());
  for (  FieldDescription fieldDescription : instrumentedType.getDeclaredFields()) {
    fieldPool.target(fieldDescription).apply(classVisitor);
  }
  for (  MethodDescription methodDescription : instrumentedMethods) {
    methodPool.target(methodDescription).apply(classVisitor,implementationContext);
  }
  implementationContext.drain(classVisitor,methodPool,Implementation.Context.ExtractableView.InjectedCode.None.INSTANCE);
  classVisitor.visitEnd();
  return classWriter.toByteArray();
}
