{
  ClassFileVersion classFileVersion=ClassFileVersion.ofMinorMajor(classFileVersionNumber);
  methodPool=methodRegistry.compile(implementationTargetFactory,classFileVersion);
  implementationContext=implementationContextFactory.make(instrumentedType,auxiliaryTypeNamingStrategy,typeInitializer,classFileVersion,ForInlining.this.classFileVersion);
  contextRegistry.setImplementationContext(implementationContext);
  if (!classFileVersion.isAtLeast(ClassFileVersion.JAVA_V8) && instrumentedType.isInterface()) {
    implementationContext.prohibitTypeInitializer();
  }
  super.visit(classFileVersionNumber,instrumentedType.getActualModifiers((modifiers & Opcodes.ACC_SUPER) != 0 && !instrumentedType.isInterface()),instrumentedType.getInternalName(),instrumentedType.getGenericSignature(),(instrumentedType.getSuperClass() == null ? TypeDescription.OBJECT : instrumentedType.getSuperClass().asErasure()).getInternalName(),instrumentedType.getInterfaces().asErasures().toInternalNames());
  typeAttributeAppender.apply(cv,instrumentedType,annotationValueFilterFactory.on(instrumentedType));
}
