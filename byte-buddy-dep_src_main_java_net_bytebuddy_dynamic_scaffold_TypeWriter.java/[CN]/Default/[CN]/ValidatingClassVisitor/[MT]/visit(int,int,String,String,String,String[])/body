{
  ClassFileVersion classFileVersion=ClassFileVersion.ofMinorMajor(version);
  List<Constraint> constraints=new LinkedList<Constraint>();
  constraints.add(new Constraint.ForClassFileVersion(classFileVersion));
  if (name.endsWith('/' + PackageDescription.PACKAGE_CLASS_NAME)) {
    constraints.add(Constraint.ForPackageType.INSTANCE);
  }
 else   if ((modifiers & Opcodes.ACC_ANNOTATION) != 0) {
    if (!classFileVersion.isAtLeastJava5()) {
      throw new IllegalStateException("Cannot define an annotation type for class file version " + classFileVersion);
    }
    constraints.add(classFileVersion.isAtLeastJava8() ? Constraint.ForAnnotation.JAVA_8 : Constraint.ForAnnotation.CLASSIC);
  }
 else   if ((modifiers & Opcodes.ACC_INTERFACE) != 0) {
    constraints.add(classFileVersion.isAtLeastJava8() ? Constraint.ForInterface.JAVA_8 : Constraint.ForInterface.CLASSIC);
  }
 else   if ((modifiers & Opcodes.ACC_ABSTRACT) != 0) {
    constraints.add(Constraint.ForClass.ABSTRACT);
  }
 else {
    constraints.add(Constraint.ForClass.MANIFEST);
  }
  constraint=new Constraint.Compound(constraints);
  constraint.assertType(modifiers,interfaces != null,signature != null);
  super.visit(version,modifiers,name,signature,superName,interfaces);
}
