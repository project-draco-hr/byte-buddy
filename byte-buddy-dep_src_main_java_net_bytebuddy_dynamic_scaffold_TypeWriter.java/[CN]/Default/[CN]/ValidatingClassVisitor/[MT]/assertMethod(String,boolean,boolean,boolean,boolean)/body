{
  if (!allowsConstructor && name.equals(MethodDescription.CONSTRUCTOR_INTERNAL_NAME)) {
    throw new IllegalStateException("Cannot define constructor for " + sortName);
  }
 else   if (isStatic && isAbstract) {
    throw new IllegalStateException("Cannot define static method " + name + " to be abstract");
  }
 else   if (isAbstract && name.equals(MethodDescription.CONSTRUCTOR_INTERNAL_NAME)) {
    throw new IllegalStateException("Cannot define abstract constructor " + name);
  }
 else   if (!isPublic && !allowsNonPublic) {
    throw new IllegalStateException("Cannot define non-public method " + name + " for "+ sortName);
  }
 else   if (isStatic && !allowsStaticMethods) {
    throw new IllegalStateException("Cannot define static method " + name + " for "+ sortName);
  }
 else   if (!isStatic && isAbstract && !allowsAbstract) {
    throw new IllegalStateException("Cannot define abstract method " + name + " for "+ sortName);
  }
 else   if (!isAbstract && !allowsNonAbstract) {
    throw new IllegalStateException("Cannot define non-abstract method " + name + " for "+ sortName);
  }
 else   if (!isStatic && isDefaultIncompatible && allowsDefaultValue) {
    throw new IllegalStateException("The signature of " + name + " is not compatible for a property of "+ sortName);
  }
}
