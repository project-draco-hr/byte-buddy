{
  when(boundDelegation.isValid()).thenReturn(true);
  when(unboundDelegation.isValid()).thenReturn(false);
  when(dominantBoundDelegation.isValid()).thenReturn(true);
  when(methodDelegationBinder.bind(implementationTarget,source,bindableTarget)).thenReturn(boundDelegation);
  when(methodDelegationBinder.bind(implementationTarget,source,invisibleTarget)).thenReturn(boundDelegation);
  when(methodDelegationBinder.bind(implementationTarget,source,unbindableTarget)).thenReturn(unboundDelegation);
  when(methodDelegationBinder.bind(implementationTarget,source,dominantBindableTarget)).thenReturn(dominantBoundDelegation);
  ambiguityResolver=mock(MethodDelegationBinder.AmbiguityResolver.class);
  when(ambiguityResolver.resolve(source,dominantBoundDelegation,boundDelegation)).thenReturn(MethodDelegationBinder.AmbiguityResolver.Resolution.LEFT);
  when(ambiguityResolver.resolve(source,boundDelegation,dominantBoundDelegation)).thenReturn(MethodDelegationBinder.AmbiguityResolver.Resolution.RIGHT);
  when(ambiguityResolver.resolve(source,boundDelegation,boundDelegation)).thenReturn(MethodDelegationBinder.AmbiguityResolver.Resolution.AMBIGUOUS);
  when(implementationTarget.getTypeDescription()).thenReturn(instrumentedType);
  when(unbindableTarget.isVisibleTo(instrumentedType)).thenReturn(true);
  when(bindableTarget.isVisibleTo(instrumentedType)).thenReturn(true);
  when(dominantBindableTarget.isVisibleTo(instrumentedType)).thenReturn(true);
  when(invisibleTarget.isVisibleTo(instrumentedType)).thenReturn(false);
}
