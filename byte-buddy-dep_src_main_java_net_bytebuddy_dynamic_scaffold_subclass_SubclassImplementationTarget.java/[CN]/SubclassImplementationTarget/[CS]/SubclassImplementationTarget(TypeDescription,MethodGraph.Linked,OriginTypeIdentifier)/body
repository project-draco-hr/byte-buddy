{
  super(instrumentedType,methodGraph);
  GenericTypeDescription superType=instrumentedType.getSuperType();
  MethodList<?> superConstructors=superType == null ? new MethodList.Empty() : superType.getDeclaredMethods().filter(isConstructor().and(isVisibleTo(instrumentedType)));
  this.superConstructors=new HashMap<MethodDescription.Token,MethodDescription>(superConstructors.size());
  for (  MethodDescription superConstructor : superConstructors) {
    this.superConstructors.put(superConstructor.asToken(),superConstructor);
  }
  this.originTypeIdentifier=originTypeIdentifier;
}
