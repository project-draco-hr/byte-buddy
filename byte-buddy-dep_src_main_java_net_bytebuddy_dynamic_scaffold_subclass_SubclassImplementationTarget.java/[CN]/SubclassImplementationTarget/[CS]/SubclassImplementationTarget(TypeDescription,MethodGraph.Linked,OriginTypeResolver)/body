{
  super(instrumentedType,methodGraph);
  TypeDescription.Generic superClass=instrumentedType.getSuperClass();
  MethodList<?> superConstructors=superClass == null ? new MethodList.Empty<MethodDescription.InGenericShape>() : superClass.getDeclaredMethods().filter(isConstructor().and(isVisibleTo(instrumentedType)));
  this.superConstructors=new HashMap<MethodDescription.SignatureToken,MethodDescription>();
  for (  MethodDescription superConstructor : superConstructors) {
    this.superConstructors.put(superConstructor.asSignatureToken(),superConstructor);
  }
  this.originTypeResolver=originTypeResolver;
}
