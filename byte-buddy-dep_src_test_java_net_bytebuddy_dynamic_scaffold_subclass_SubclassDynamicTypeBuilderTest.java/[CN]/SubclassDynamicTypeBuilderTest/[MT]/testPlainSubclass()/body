{
  Class<?> loaded=new SubclassDynamicTypeBuilder<Object>(ClassFileVersion.forCurrentJavaVersion(),new NamingStrategy.Fixed(FOO),new TypeDescription.ForLoadedType(Object.class),new TypeList.ForLoadedType(Collections.<Class<?>>singletonList(Serializable.class)),Opcodes.ACC_PUBLIC,TypeAttributeAppender.NoOp.INSTANCE,none(),BridgeMethodResolver.Simple.Factory.FAIL_FAST,new ClassVisitorWrapper.Chain(),new FieldRegistry.Default(),new MethodRegistry.Default(),MethodLookupEngine.Default.Factory.INSTANCE,FieldAttributeAppender.NoOp.INSTANCE,MethodAttributeAppender.NoOp.INSTANCE,ConstructorStrategy.Default.IMITATE_SUPER_TYPE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  assertThat(loaded.getName(),is(FOO));
  assertThat(loaded.getModifiers(),is(Opcodes.ACC_PUBLIC));
  assertEquals(Object.class,loaded.getSuperclass());
  assertThat(loaded.getInterfaces().length,is(1));
  assertThat(loaded.getClassLoader().getParent(),is(getClass().getClassLoader()));
  assertEquals(Serializable.class,loaded.getInterfaces()[0]);
  assertThat(loaded.getDeclaredMethods().length,is(0));
  assertThat(loaded.getDeclaredAnnotations().length,is(0));
  assertThat(loaded.getDeclaredFields().length,is(0));
  assertThat(loaded.getDeclaredConstructors().length,is(1));
  assertThat(loaded.getDeclaredConstructor().newInstance(),notNullValue());
}
