{
  Class<?> loaded=new SubclassDynamicTypeBuilder<Object>(ClassFileVersion.forCurrentJavaVersion(),new NamingStrategy.Fixed(FOO),new TypeDescription.ForLoadedType(Object.class),new TypeList.ForLoadedType(Collections.<Class<?>>singletonList(Serializable.class)),Opcodes.ACC_PUBLIC,TypeAttributeAppender.NoOp.INSTANCE,none(),BridgeMethodResolver.Simple.Factory.FAIL_FAST,new ClassVisitorWrapper.Chain(),new FieldRegistry.Default(),new MethodRegistry.Default(),MethodLookupEngine.Default.Factory.INSTANCE,FieldAttributeAppender.NoOp.INSTANCE,MethodAttributeAppender.NoOp.INSTANCE,ConstructorStrategy.Default.IMITATE_SUPER_TYPE).defineField(BOOLEAN_FIELD,boolean.class,Ownership.STATIC).value(BOOLEAN_VALUE).defineField(BYTE_FIELD,byte.class,Ownership.STATIC).value(BYTE_VALUE).defineField(SHORT_FIELD,short.class,Ownership.STATIC).value(SHORT_VALUE).defineField(CHARACTER_FIELD,char.class,Ownership.STATIC).value(CHARACTER_VALUE).defineField(INTEGER_FIELD,int.class,Ownership.STATIC).value(INTEGER_VALUE).defineField(LONG_FIELD,long.class,Ownership.STATIC).value(LONG_VALUE).defineField(LONG_FIELD_FROM_INT,long.class,Ownership.STATIC).value(INTEGER_VALUE).defineField(FLOAT_FIELD,float.class,Ownership.STATIC).value(FLOAT_VALUE).defineField(DOUBLE_FIELD,double.class,Ownership.STATIC).value(DOUBLE_VALUE).defineField(STRING_FIELD,String.class,Ownership.STATIC).value(FOO).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  Field booleanField=loaded.getDeclaredField(BOOLEAN_FIELD);
  booleanField.setAccessible(true);
  assertThat(booleanField.get(null),is((Object)BOOLEAN_VALUE));
  Field byteField=loaded.getDeclaredField(BYTE_FIELD);
  byteField.setAccessible(true);
  assertThat(byteField.get(null),is((Object)BYTE_VALUE));
  Field shortField=loaded.getDeclaredField(SHORT_FIELD);
  shortField.setAccessible(true);
  assertThat(shortField.get(null),is((Object)SHORT_VALUE));
  Field characterField=loaded.getDeclaredField(CHARACTER_FIELD);
  characterField.setAccessible(true);
  assertThat(characterField.get(null),is((Object)CHARACTER_VALUE));
  Field integerField=loaded.getDeclaredField(INTEGER_FIELD);
  integerField.setAccessible(true);
  assertThat(integerField.get(null),is((Object)INTEGER_VALUE));
  Field longField=loaded.getDeclaredField(LONG_FIELD);
  longField.setAccessible(true);
  assertThat(longField.get(null),is((Object)LONG_VALUE));
  Field longFieldFromInt=loaded.getDeclaredField(LONG_FIELD_FROM_INT);
  longFieldFromInt.setAccessible(true);
  assertThat(longFieldFromInt.get(null),is((Object)(long)INTEGER_VALUE));
  Field floatField=loaded.getDeclaredField(FLOAT_FIELD);
  floatField.setAccessible(true);
  assertThat(floatField.get(null),is((Object)FLOAT_VALUE));
  Field doubleField=loaded.getDeclaredField(DOUBLE_FIELD);
  doubleField.setAccessible(true);
  assertThat(doubleField.get(null),is((Object)DOUBLE_VALUE));
  Field stringField=loaded.getDeclaredField(STRING_FIELD);
  stringField.setAccessible(true);
  assertThat(stringField.get(null),is((Object)FOO));
}
