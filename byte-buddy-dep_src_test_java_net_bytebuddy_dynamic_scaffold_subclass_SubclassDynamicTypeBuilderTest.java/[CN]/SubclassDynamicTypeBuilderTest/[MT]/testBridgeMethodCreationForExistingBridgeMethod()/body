{
  Class<?> dynamicType=new ByteBuddy().subclass(CallSuperMethod.Inner.class).method(named(FOO)).intercept(net.bytebuddy.implementation.SuperMethodCall.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.CHILD_FIRST).getLoaded();
  assertThat(dynamicType.getDeclaredMethods().length,is(2));
  assertEquals(String.class,dynamicType.getDeclaredMethod(FOO,String.class).getReturnType());
  assertThat(dynamicType.getDeclaredMethod(FOO,String.class).getGenericReturnType(),is((Type)String.class));
  assertThat(dynamicType.getDeclaredMethod(FOO,String.class).isBridge(),is(false));
  assertEquals(Object.class,dynamicType.getDeclaredMethod(FOO,Object.class).getReturnType());
  assertThat(dynamicType.getDeclaredMethod(FOO,Object.class).getGenericReturnType(),is((Type)Object.class));
  assertThat(dynamicType.getDeclaredMethod(FOO,Object.class).isBridge(),is(true));
  CallSuperMethod<String> callSuperMethod=(CallSuperMethod<String>)dynamicType.getConstructor().newInstance();
  assertThat(callSuperMethod.foo(FOO),is(FOO));
  callSuperMethod.assertOnlyCall(FOO);
}
