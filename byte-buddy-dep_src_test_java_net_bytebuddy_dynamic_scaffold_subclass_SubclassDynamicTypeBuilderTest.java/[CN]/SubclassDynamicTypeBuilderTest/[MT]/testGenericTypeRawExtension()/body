{
  Class<?> dynamicType=new ByteBuddy().subclass(GenericType.Inner.class).method(named(FOO).or(named("call"))).intercept(StubMethod.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded();
  assertThat(dynamicType.getTypeParameters().length,is(0));
  assertThat(dynamicType.getGenericSuperclass(),instanceOf(Class.class));
  assertThat(dynamicType.getGenericSuperclass(),is((Type)GenericType.Inner.class));
  assertThat(dynamicType.getGenericInterfaces().length,is(0));
  Method foo=dynamicType.getDeclaredMethod(FOO,String.class);
  assertThat(foo.getTypeParameters().length,is(2));
  assertThat(foo.getTypeParameters()[0].getName(),is("V"));
  assertThat(foo.getTypeParameters()[0].getBounds().length,is(1));
  assertThat(foo.getTypeParameters()[0].getBounds()[0],is((Type)String.class));
  assertThat(foo.getTypeParameters()[1].getName(),is("W"));
  assertThat(foo.getTypeParameters()[1].getBounds().length,is(1));
  assertThat(foo.getTypeParameters()[1].getBounds()[0],is((Type)Exception.class));
  assertThat(foo.getGenericReturnType(),is((Object)List.class));
  Method call=dynamicType.getDeclaredMethod("call");
  assertThat(call.getGenericReturnType(),is(((ParameterizedType)GenericType.Inner.class.getGenericInterfaces()[0]).getActualTypeArguments()[0]));
}
