{
  final Iterator<Method> methods1=Arrays.asList(Foo.class.getDeclaredMethods()).iterator();
  ObjectPropertyAssertion.of(JavaConstant.MethodHandle.Dispatcher.ForJava8CapableVm.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methods1.next();
    }
  }
).apply();
  final Iterator<Method> methods2=Arrays.asList(Foo.class.getDeclaredMethods()).iterator();
  final Iterator<Constructor<?>> constructors2=Arrays.<Constructor<?>>asList(Foo.class.getDeclaredConstructors()).iterator();
  ObjectPropertyAssertion.of(JavaConstant.MethodHandle.Dispatcher.ForJava7CapableVm.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methods2.next();
    }
  }
).create(new ObjectPropertyAssertion.Creator<Constructor<?>>(){
    @Override public Constructor<?> create(){
      return constructors2.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(JavaConstant.MethodHandle.Dispatcher.ForLegacyVm.class).apply();
}
