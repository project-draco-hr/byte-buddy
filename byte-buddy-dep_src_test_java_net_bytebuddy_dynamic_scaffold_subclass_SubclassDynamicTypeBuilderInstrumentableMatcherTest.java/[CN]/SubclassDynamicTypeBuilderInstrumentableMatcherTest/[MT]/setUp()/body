{
  latentMethodMatcher=new SubclassDynamicTypeBuilder.InstrumentableMatcher(ignoredMethods);
  when(typeDescription.asGenericType()).thenReturn(genericTypeDescription);
  when(typeDescription.asErasure()).thenReturn(typeDescription);
  when(genericTypeDescription.asErasure()).thenReturn(typeDescription);
  when(genericTypeDescription.asGenericType()).thenReturn(genericTypeDescription);
  when(genericTypeDescription.asErasure()).thenReturn(typeDescription);
  when(genericTypeDescription.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
  when(otherType.asGenericType()).thenReturn(genericOtherType);
  when(otherType.asErasure()).thenReturn(otherType);
  when(genericOtherType.asErasure()).thenReturn(otherType);
  when(genericOtherType.asGenericType()).thenReturn(genericOtherType);
  when(genericOtherType.asErasure()).thenReturn(otherType);
  when(genericOtherType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
}
