{
  ObjectPropertyAssertion.of(MethodDelegationBinder.MethodInvoker.Simple.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.MethodInvoker.Virtual.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.ParameterBinding.Illegal.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.ParameterBinding.Anonymous.class).ignoreFields("anonymousToken").apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.ParameterBinding.Unique.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.MethodBinding.Illegal.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.MethodBinding.Builder.class).create(new ObjectPropertyAssertion.Creator<MethodDescription>(){
    @Override public MethodDescription create(){
      MethodDescription methodDescription=mock(MethodDescription.class);
      when(methodDescription.getParameters()).thenReturn((ParameterList)new ParameterList.Empty());
      return methodDescription;
    }
  }
).applyBasic();
  ObjectPropertyAssertion.of(MethodDelegationBinder.MethodBinding.Builder.Build.class).create(new ObjectPropertyAssertion.Creator<Map<?,?>>(){
    @Override public Map<?,?> create(){
      return Collections.singletonMap(new Object(),new Object());
    }
  }
).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      return Collections.singletonList(new Object());
    }
  }
).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.AmbiguityResolver.Resolution.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.AmbiguityResolver.NoOp.class).apply();
  ObjectPropertyAssertion.of(MethodDelegationBinder.AmbiguityResolver.Chain.class).apply();
}
