{
  ObjectPropertyAssertion.of(AgentBuilder.Default.class).create(new ObjectPropertyAssertion.Creator<AccessControlContext>(){
    @Override public AccessControlContext create(){
      return new AccessControlContext(new ProtectionDomain[]{mock(ProtectionDomain.class)});
    }
  }
).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Matched.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.Resolution.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Ignored.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Compound.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Resolution.Unresolved.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.BootstrapInjectionStrategy.Enabled.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.BootstrapInjectionStrategy.Disabled.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.class).create(new ObjectPropertyAssertion.Creator<AccessControlContext>(){
    @Override public AccessControlContext create(){
      return new AccessControlContext(new ProtectionDomain[]{mock(ProtectionDomain.class)});
    }
  }
).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.Resolution.BootstrapClassLoaderCapableInjectorFactory.class).create(new ObjectPropertyAssertion.Creator<AccessControlContext>(){
    @Override public AccessControlContext create(){
      return new AccessControlContext(new ProtectionDomain[]{mock(ProtectionDomain.class)});
    }
  }
).apply();
}
