{
  ObjectPropertyAssertion.of(AgentBuilder.Default.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Ignoring.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transforming.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.Resolution.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Ignored.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Compound.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Resolution.Unresolved.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Resolution.Sort.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.BootstrapInjectionStrategy.Enabled.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.BootstrapInjectionStrategy.Disabled.class).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.class).create(new ObjectPropertyAssertion.Creator<AccessControlContext>(){
    @Override public AccessControlContext create(){
      return new AccessControlContext(new ProtectionDomain[]{mock(ProtectionDomain.class)});
    }
  }
).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.FactoryCreationOption.class);
  final Iterator<Class<?>> java9Dispatcher=Arrays.<Class<?>>asList(Object.class,String.class,Integer.class,Double.class,Float.class).iterator();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.Java9CapableVmDispatcher.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return java9Dispatcher.next();
    }
  }
).apply();
  final Iterator<Class<?>> legacyDispatcher=Arrays.<Class<?>>asList(Object.class,String.class,Integer.class,Double.class,Float.class).iterator();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.LegacyVmDispatcher.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return legacyDispatcher.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.Transformation.Simple.Resolution.BootstrapClassLoaderCapableInjectorFactory.class).apply();
  final Iterator<Constructor<?>> iterator=Arrays.<Constructor<?>>asList(String.class.getDeclaredConstructors()).iterator();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.Factory.ForJava9CapableVm.class).create(new ObjectPropertyAssertion.Creator<Constructor<?>>(){
    @Override public Constructor<?> create(){
      return iterator.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(AgentBuilder.Default.ExecutingTransformer.Factory.ForLegacyVm.class).apply();
}
