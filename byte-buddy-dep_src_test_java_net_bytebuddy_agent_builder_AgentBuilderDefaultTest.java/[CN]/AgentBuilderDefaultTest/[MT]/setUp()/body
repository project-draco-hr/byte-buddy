{
  when(builder.make()).thenReturn((DynamicType.Unloaded)unloaded);
  when(unloaded.getTypeDescription()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
  when(typeStrategy.builder(any(TypeDescription.class),eq(byteBuddy),any(ClassFileLocator.class),any(MethodRebaseResolver.MethodNameTransformer.class))).thenReturn((DynamicType.Builder)builder);
  Map<TypeDescription,LoadedTypeInitializer> loadedTypeInitializers=new HashMap<TypeDescription,LoadedTypeInitializer>();
  loadedTypeInitializers.put(new TypeDescription.ForLoadedType(REDEFINED),loadedTypeInitializer);
  when(unloaded.getLoadedTypeInitializers()).thenReturn(loadedTypeInitializers);
  when(unloaded.getBytes()).thenReturn(BAZ);
  when(transformer.transform(builder,new TypeDescription.ForLoadedType(REDEFINED))).thenReturn((DynamicType.Builder)builder);
  when(binaryLocator.initialize(REDEFINED.getClassLoader(),REDEFINED.getName(),QUX)).thenReturn(initialized);
  when(initialized.getTypePool()).thenReturn(typePool);
  when(typePool.describe(REDEFINED.getName())).thenReturn(resolution);
  when(instrumentation.getAllLoadedClasses()).thenReturn(new Class<?>[]{REDEFINED});
}
