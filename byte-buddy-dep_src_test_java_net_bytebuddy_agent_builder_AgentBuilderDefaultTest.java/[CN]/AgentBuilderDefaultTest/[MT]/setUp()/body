{
  when(builder.make(TypeResolver.Disabled.INSTANCE,typePool)).thenReturn((DynamicType.Unloaded)dynamicType);
  when(dynamicType.getTypeDescription()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
  when(typeStrategy.builder(any(TypeDescription.class),eq(byteBuddy),any(ClassFileLocator.class),any(MethodNameTransformer.class))).thenReturn((DynamicType.Builder)builder);
  Map<TypeDescription,LoadedTypeInitializer> loadedTypeInitializers=new HashMap<TypeDescription,LoadedTypeInitializer>();
  loadedTypeInitializers.put(new TypeDescription.ForLoadedType(REDEFINED),loadedTypeInitializer);
  when(dynamicType.getLoadedTypeInitializers()).thenReturn(loadedTypeInitializers);
  when(dynamicType.getBytes()).thenReturn(BAZ);
  when(transformer.transform(builder,new TypeDescription.ForLoadedType(REDEFINED),REDEFINED.getClassLoader())).thenReturn((DynamicType.Builder)builder);
  when(typeLocator.typePool(any(ClassFileLocator.class),any(ClassLoader.class))).thenReturn(typePool);
  when(typePool.describe(REDEFINED.getName())).thenReturn(resolution);
  when(instrumentation.getAllLoadedClasses()).thenReturn(new Class<?>[]{REDEFINED});
  when(initializationStrategy.dispatcher()).thenReturn(dispatcher);
  when(dispatcher.apply(builder)).thenReturn((DynamicType.Builder)builder);
  when(installationStrategy.onError(eq(instrumentation),any(ClassFileTransformer.class),any(Throwable.class))).then(new Answer<ClassFileTransformer>(){
    @Override public ClassFileTransformer answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return (ClassFileTransformer)invocationOnMock.getArguments()[1];
    }
  }
);
  accessControlContext=AccessController.getContext();
}
