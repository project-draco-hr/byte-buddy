{
  classFileTransformers=new LinkedList<ClassFileTransformer>();
  doAnswer(new Answer<Object>(){
    @Override public Object answer(    InvocationOnMock invocation) throws Throwable {
      return classFileTransformers.add((ClassFileTransformer)invocation.getArguments()[0]);
    }
  }
).when(instrumentation).addTransformer(any(ClassFileTransformer.class),anyBoolean());
  when(builder.make()).thenReturn((DynamicType.Unloaded)unloaded);
  when(unloaded.getTypeDescription()).thenReturn(typeDescription);
  when(definitionHandler.builder(any(TypeDescription.class),eq(byteBuddy),any(ClassFileLocator.class),any(MethodRebaseResolver.MethodNameTransformer.class))).thenReturn((DynamicType.Builder)builder);
  Map<TypeDescription,LoadedTypeInitializer> loadedTypeInitializers=new HashMap<TypeDescription,LoadedTypeInitializer>();
  loadedTypeInitializers.put(typeDescription,loadedTypeInitializer);
  when(unloaded.getLoadedTypeInitializers()).thenReturn(loadedTypeInitializers);
  when(transformer.transform(builder,typeDescription)).thenReturn((DynamicType.Builder)builder);
  when(binaryLocator.initialize(FOO,QUX,classLoader)).thenReturn(initialized);
  when(initialized.getTypePool()).thenReturn(typePool);
  when(typePool.describe(FOO)).thenReturn(resolution);
  when(instrumentation.getAllLoadedClasses()).thenReturn(new Class<?>[]{REDEFINED});
}
