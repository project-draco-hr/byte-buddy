{
  when(instrumentation.getAllLoadedClasses()).thenReturn(new Class<?>[]{REDEFINED,OTHER});
  when(typeMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED),REDEFINED.getClassLoader(),JavaModule.ofType(REDEFINED),REDEFINED,REDEFINED.getProtectionDomain())).thenReturn(true);
  when(typeMatcher.matches(new TypeDescription.ForLoadedType(OTHER),OTHER.getClassLoader(),JavaModule.ofType(OTHER),OTHER,OTHER.getProtectionDomain())).thenReturn(true);
  when(instrumentation.isModifiableClass(REDEFINED)).thenReturn(true);
  when(instrumentation.isModifiableClass(OTHER)).thenReturn(true);
  when(instrumentation.isRetransformClassesSupported()).thenReturn(true);
  AgentBuilder.RedefinitionStrategy.BatchAllocator redefinitionBatchAllocator=mock(AgentBuilder.RedefinitionStrategy.BatchAllocator.class);
  when(redefinitionBatchAllocator.batch(Arrays.asList(REDEFINED,OTHER))).thenReturn((Iterable)Arrays.asList(Collections.singletonList(REDEFINED),Collections.singletonList(OTHER)));
  AgentBuilder.RedefinitionStrategy.Listener redefinitionListener=mock(AgentBuilder.RedefinitionStrategy.Listener.class);
  ClassFileTransformer classFileTransformer=new AgentBuilder.Default(byteBuddy).with(initializationStrategy).with(AgentBuilder.RedefinitionStrategy.RETRANSFORMATION).with(redefinitionBatchAllocator).with(redefinitionListener).with(poolStrategy).with(typeStrategy).with(installationStrategy).with(listener).disableNativeMethodPrefix().ignore(none()).type(typeMatcher).transform(transformer).installOn(instrumentation);
  verifyZeroInteractions(listener);
  verify(instrumentation).addTransformer(classFileTransformer,true);
  verify(instrumentation).getAllLoadedClasses();
  verify(instrumentation).isModifiableClass(REDEFINED);
  verify(instrumentation).isModifiableClass(OTHER);
  verify(instrumentation).retransformClasses(REDEFINED);
  verify(instrumentation).retransformClasses(OTHER);
  verify(instrumentation).isRetransformClassesSupported();
  verifyNoMoreInteractions(instrumentation);
  verify(typeMatcher).matches(new TypeDescription.ForLoadedType(REDEFINED),REDEFINED.getClassLoader(),JavaModule.ofType(REDEFINED),REDEFINED,REDEFINED.getProtectionDomain());
  verify(typeMatcher).matches(new TypeDescription.ForLoadedType(OTHER),OTHER.getClassLoader(),JavaModule.ofType(OTHER),OTHER,OTHER.getProtectionDomain());
  verifyNoMoreInteractions(typeMatcher);
  verifyZeroInteractions(initializationStrategy);
  verifyZeroInteractions(installationStrategy);
  verify(redefinitionBatchAllocator).batch(Arrays.asList(REDEFINED,OTHER));
  verifyNoMoreInteractions(redefinitionBatchAllocator);
  verify(redefinitionListener).onBatch(0,Collections.<Class<?>>singletonList(REDEFINED),Arrays.asList(REDEFINED,OTHER));
  verify(redefinitionListener).onBatch(1,Collections.<Class<?>>singletonList(OTHER),Arrays.asList(REDEFINED,OTHER));
  verify(redefinitionListener).onComplete(2,Arrays.asList(REDEFINED,OTHER),Collections.<List<Class<?>>,Throwable>emptyMap());
  verifyNoMoreInteractions(redefinitionListener);
}
