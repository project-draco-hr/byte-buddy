{
  when(unloaded.getRawAuxiliaryTypes()).thenReturn(Collections.<TypeDescription,byte[]>singletonMap(new TypeDescription.ForLoadedType(AUXILIARY),QUX));
  Map<TypeDescription,LoadedTypeInitializer> loadedTypeInitializers=new HashMap<TypeDescription,LoadedTypeInitializer>();
  loadedTypeInitializers.put(new TypeDescription.ForLoadedType(REDEFINED),loadedTypeInitializer);
  LoadedTypeInitializer auxiliaryInitializer=mock(LoadedTypeInitializer.class);
  loadedTypeInitializers.put(new TypeDescription.ForLoadedType(AUXILIARY),auxiliaryInitializer);
  when(unloaded.getLoadedTypeInitializers()).thenReturn(loadedTypeInitializers);
  when(unloaded.getBytes()).thenReturn(BAZ);
  when(resolution.resolve()).thenReturn(new TypeDescription.ForLoadedType(REDEFINED));
  when(rawMatcher.matches(new TypeDescription.ForLoadedType(REDEFINED),REDEFINED.getClassLoader(),null,REDEFINED.getProtectionDomain())).thenReturn(true);
  ClassFileTransformer classFileTransformer=new AgentBuilder.Default(byteBuddy).withInitializationStrategy(initializationStrategy).withBinaryLocator(binaryLocator).withTypeStrategy(typeStrategy).withListener(listener).withoutNativeMethodPrefix().type(rawMatcher).transform(transformer).installOn(instrumentation);
  assertThat(classFileTransformer.transform(REDEFINED.getClassLoader(),REDEFINED.getName(),null,REDEFINED.getProtectionDomain(),QUX),is(BAZ));
  verify(listener).onTransformation(new TypeDescription.ForLoadedType(REDEFINED),unloaded);
  verify(listener).onComplete(REDEFINED.getName());
  verifyNoMoreInteractions(listener);
  verify(instrumentation).addTransformer(classFileTransformer,false);
  verifyNoMoreInteractions(instrumentation);
  verify(initializationStrategy).dispatcher();
  verify(initializationStrategy).initialize(AUXILIARY,auxiliaryInitializer);
  verifyNoMoreInteractions(initializationStrategy);
  verify(dispatcher).apply(builder);
  verify(dispatcher).register(REDEFINED.getName(),REDEFINED.getClassLoader(),loadedTypeInitializer);
  verifyNoMoreInteractions(dispatcher);
}
