{
  List<Object> arguments=new ArrayList<Object>(argument.length);
  for (  Object anArgument : argument) {
    if (anArgument instanceof Class) {
      anArgument=new TypeDescription.ForLoadedType((Class<?>)anArgument);
    }
 else     if (JavaType.METHOD_HANDLE.getTypeStub().isInstance(anArgument)) {
      anArgument=JavaInstance.MethodHandle.of(anArgument);
    }
 else     if (JavaType.METHOD_TYPE.getTypeStub().isInstance(anArgument)) {
      anArgument=JavaInstance.MethodType.of(anArgument);
    }
    arguments.add(anArgument);
  }
  if (!bootstrapMethod.isBootstrap(arguments)) {
    throw new IllegalArgumentException("Not a valid bootstrap method " + bootstrapMethod + " for "+ Arrays.toString(argument));
  }
  List<Object> serializedArguments=new ArrayList<Object>(argument.length);
  for (  Object anArgument : arguments) {
    if (anArgument instanceof TypeDescription) {
      anArgument=Type.getType(((TypeDescription)anArgument).getDescriptor());
    }
 else     if (anArgument instanceof JavaInstance) {
      anArgument=((JavaInstance)anArgument).asConstantPoolValue();
    }
    serializedArguments.add(anArgument);
  }
  return new WithImplicitTarget(bootstrapMethod,serializedArguments,new InvocationProvider.Default(),TerminationHandler.ForMethodReturn.INSTANCE,defaultAssigner(),defaultDynamicallyTyped());
}
