{
  GenericTypeDescription genericTypeDescription=describe(TypeResolution.class.getDeclaredField(BAZ));
  assertThat(genericTypeDescription.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(genericTypeDescription.getParameters().size(),is(1));
  GenericTypeDescription superType=genericTypeDescription.getSuperType();
  assertThat(superType.getSort(),is(TypeDefinition.Sort.NON_GENERIC));
  assertThat(superType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(TypeResolution.NestedIntermediate.class)));
  GenericTypeDescription superSuperType=superType.getSuperType();
  assertThat(superSuperType.getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(superSuperType.asErasure(),is((TypeDescription)new TypeDescription.ForLoadedType(TypeResolution.Base.class)));
  assertThat(superSuperType.getParameters().size(),is(2));
  assertThat(superSuperType.getParameters().get(0).getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(superSuperType.getParameters().get(0).asErasure().represents(List.class),is(true));
  assertThat(superSuperType.getParameters().get(0).getParameters().size(),is(1));
  assertThat(superSuperType.getParameters().get(0).getParameters().getOnly().getSort(),is(TypeDefinition.Sort.NON_GENERIC));
  assertThat(superSuperType.getParameters().get(0).getParameters().getOnly().asErasure().represents(List.class),is(true));
  assertThat(superSuperType.getParameters().get(1).getSort(),is(TypeDefinition.Sort.PARAMETERIZED));
  assertThat(superSuperType.getParameters().get(1).asErasure().represents(List.class),is(true));
  assertThat(superSuperType.getParameters().get(1).getParameters().size(),is(1));
  assertThat(superSuperType.getParameters().get(1).getParameters().getOnly().getSort(),is(TypeDefinition.Sort.NON_GENERIC));
  assertThat(superSuperType.getParameters().get(1).getParameters().getOnly().asErasure().represents(String.class),is(true));
}
