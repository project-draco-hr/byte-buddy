{
  Class<?> innerType=new NestedInnerMethod().foo();
  GenericTypeDescription foo=describe(innerType.getDeclaredMethod(FOO));
  assertThat(foo.getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(foo.getSymbol(),is(T));
  assertThat(foo.getUpperBounds().size(),is(1));
  assertThat(foo.getUpperBounds().getOnly(),is(GenericTypeDescription.OBJECT));
  assertThat(foo.getVariableSource(),is((TypeVariableSource)new TypeDescription.ForLoadedType(NestedInnerMethod.class)));
  GenericTypeDescription bar=describe(innerType.getDeclaredMethod(BAR));
  assertThat(bar.getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(bar.getSymbol(),is(S));
  assertThat(bar.getUpperBounds().size(),is(1));
  assertThat(bar.getUpperBounds().getOnly(),is(foo));
  assertThat(bar.getVariableSource(),is((TypeVariableSource)new MethodDescription.ForLoadedMethod(NestedInnerMethod.class.getDeclaredMethod(FOO))));
  GenericTypeDescription qux=describe(innerType.getDeclaredMethod(QUX));
  assertThat(qux.getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(qux.getSymbol(),is(U));
  assertThat(qux.getUpperBounds().size(),is(1));
  assertThat(qux.getUpperBounds().getOnly(),is(bar));
  assertThat(qux.getVariableSource(),is((TypeVariableSource)new TypeDescription.ForLoadedType(innerType)));
  GenericTypeDescription baz=describe(innerType.getDeclaredMethod(BAZ));
  assertThat(baz.getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(baz.getSymbol(),is(V));
  assertThat(baz.getUpperBounds().size(),is(1));
  assertThat(baz.getUpperBounds().getOnly(),is(qux));
  assertThat(baz.getVariableSource(),is((TypeVariableSource)new MethodDescription.ForLoadedMethod(innerType.getDeclaredMethod(BAZ))));
}
