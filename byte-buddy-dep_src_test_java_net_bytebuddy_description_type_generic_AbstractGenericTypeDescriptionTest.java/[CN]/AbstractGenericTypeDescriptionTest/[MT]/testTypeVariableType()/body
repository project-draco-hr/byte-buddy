{
  GenericTypeDescription genericTypeDescription=describe(SimpleTypeVariableType.class.getDeclaredField(FOO));
  assertThat(genericTypeDescription.getSort(),is(GenericTypeDescription.Sort.VARIABLE));
  assertThat(genericTypeDescription.getSourceCodeName(),is(SimpleTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()));
  assertThat(genericTypeDescription.getTypeName(),is(SimpleTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()));
  assertThat(genericTypeDescription.toString(),is(SimpleTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()));
  assertThat(genericTypeDescription.hashCode(),is(GenericTypeDescription.Sort.describe(SimpleTypeVariableType.class.getDeclaredField(FOO).getGenericType()).hashCode()));
  assertThat(genericTypeDescription,is(GenericTypeDescription.Sort.describe(SimpleTypeVariableType.class.getDeclaredField(FOO).getGenericType())));
  assertThat(genericTypeDescription,CoreMatchers.not(GenericTypeDescription.Sort.describe(SimpleTypeVariableType.class.getDeclaredField(FOO).getType())));
  assertThat(genericTypeDescription,CoreMatchers.not(new Object()));
  assertThat(genericTypeDescription.equals(null),is(false));
  assertThat(genericTypeDescription.getSymbol(),is(T));
  assertThat(genericTypeDescription.getUpperBounds().size(),is(1));
  assertThat(genericTypeDescription.getUpperBounds().getOnly(),is((GenericTypeDescription)TypeDescription.OBJECT));
  assertThat(genericTypeDescription.getUpperBounds().getOnly().getStackSize(),is(StackSize.SINGLE));
  assertThat(genericTypeDescription.getTypeName(),is(SimpleTypeVariableType.class.getDeclaredField(FOO).getGenericType().toString()));
  assertThat(genericTypeDescription.getVariableSource(),is((TypeVariableSource)new TypeDescription.ForLoadedType(SimpleTypeVariableType.class)));
  assertThat(genericTypeDescription.getVariableSource().getTypeVariables().size(),is(1));
  assertThat(genericTypeDescription.getVariableSource().getTypeVariables().getOnly(),is(genericTypeDescription));
}
