{
  String typeName=file.replace('/','.').substring(0,file.length() - CLASS_FILE_EXTENSION.length());
  getLog().debug("Processing class file: " + typeName);
  TypeDescription typeDescription=typePool.describe(typeName).resolve();
  DynamicType.Builder<?> builder=entryPoint.transform(typeDescription,byteBuddy,classFileLocator,methodNameTransformer);
  boolean transformed=false;
  for (  net.bytebuddy.build.Plugin plugin : plugins) {
    if (plugin.matches(typeDescription)) {
      try {
        builder=plugin.apply(builder,typeDescription);
      }
 catch (      Throwable throwable) {
        throw new MojoExecutionException("Cannot apply " + plugin + " on "+ typeName,throwable);
      }
      transformed=true;
    }
  }
  if (transformed) {
    getLog().info("Transformed type: " + typeName);
    DynamicType dynamicType=builder.make();
    for (    Map.Entry<TypeDescription,LoadedTypeInitializer> entry : dynamicType.getLoadedTypeInitializers().entrySet()) {
      if (failOnLiveInitializer && entry.getValue().isAlive()) {
        throw new MojoExecutionException("Cannot apply live initializer for " + entry.getKey());
      }
    }
    try {
      dynamicType.saveIn(root);
    }
 catch (    IOException exception) {
      throw new MojoExecutionException("Cannot save " + typeName,exception);
    }
  }
 else {
    getLog().debug("Skipping non-transformed type: " + typeName);
  }
}
