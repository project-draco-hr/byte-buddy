{
  targetMethod=reachableMethods.get(targetMethod.getUniqueSignature());
  if (targetMethod == null) {
    throw new IllegalArgumentException("Method is not reachable from instrumented type");
  }
  MethodDescription accessorMethod=knownTargetMethodsToAccessorMethod.get(targetMethod);
  if (accessorMethod != null) {
    return accessorMethod;
  }
  String name=String.format("%s$%s$%d",targetMethod.getInternalName(),prefix,Math.abs(random.nextInt()));
  accessorMethod=new MethodDescription.Latent(name,instrumentedType,targetMethod.getReturnType(),targetMethod.getParameterTypes(),(targetMethod.isStatic() ? Opcodes.ACC_STATIC : 0) | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_FINAL);
  knownTargetMethodsToAccessorMethod.put(targetMethod,accessorMethod);
  Entry methodCall=targetMethod.isAbstract() || targetMethod.getDeclaringType().isInterface() || targetMethod.getDeclaringType().equals(instrumentedType) ? AbstractMethodCall.INSTANCE : new SameSignatureMethodCall(bridgeMethodResolver.resolve(targetMethod),instrumentedType);
  registeredAccessorMethodToTargetMethodCall.put(accessorMethod,methodCall);
  orderedAccessorMethods.add(accessorMethod);
  return accessorMethod;
}
