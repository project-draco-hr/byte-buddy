{
  Map<TypeDescription,Class<?>> loadedTypes=new LinkedHashMap<TypeDescription,Class<?>>();
  classLoader=ByteArrayClassLoader.of(classLoader,types,protectionDomain,persistenceHandler,packageDefinitionStrategy,childFirst);
  for (  TypeDescription typeDescription : types.keySet()) {
    try {
      Class<?> type=Class.forName(typeDescription.getName(),false,classLoader);
      if (forbidExisting && type.getClassLoader() != classLoader) {
        throw new IllegalStateException("Class already loaded: " + type);
      }
      loadedTypes.put(typeDescription,type);
    }
 catch (    ClassNotFoundException exception) {
      throw new IllegalStateException("Cannot load class " + typeDescription,exception);
    }
  }
  return loadedTypes;
}
