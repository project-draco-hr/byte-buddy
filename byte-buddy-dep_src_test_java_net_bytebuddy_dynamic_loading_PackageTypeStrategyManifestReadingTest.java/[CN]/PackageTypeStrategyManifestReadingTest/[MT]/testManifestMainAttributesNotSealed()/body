{
  final Manifest manifest=new Manifest();
  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");
  manifest.getMainAttributes().put(Attributes.Name.SPECIFICATION_TITLE,FOO);
  manifest.getMainAttributes().put(Attributes.Name.SPECIFICATION_VERSION,BAR);
  manifest.getMainAttributes().put(Attributes.Name.SPECIFICATION_VENDOR,QUX);
  manifest.getMainAttributes().put(Attributes.Name.IMPLEMENTATION_TITLE,BAZ);
  manifest.getMainAttributes().put(Attributes.Name.IMPLEMENTATION_VERSION,FOO + BAR);
  manifest.getMainAttributes().put(Attributes.Name.IMPLEMENTATION_VENDOR,QUX + BAZ);
  manifest.getMainAttributes().put(Attributes.Name.SEALED,Boolean.FALSE.toString());
  when(classLoader.getResourceAsStream("/META-INF/MANIFEST.MF")).then(new Answer<InputStream>(){
    @Override public InputStream answer(    InvocationOnMock invocationOnMock) throws Throwable {
      ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
      manifest.write(outputStream);
      return new ByteArrayInputStream(outputStream.toByteArray());
    }
  }
);
  PackageDefinitionStrategy packageDefinitionStrategy=new PackageDefinitionStrategy.ManifestReading(sealBaseLocator);
  PackageDefinitionStrategy.Definition definition=packageDefinitionStrategy.define(classLoader,FOO + "." + BAR,FOO + "." + BAR+ "."+ QUX);
  assertThat(definition.isDefined(),is(true));
  assertThat(definition.getSpecificationTitle(),is(FOO));
  assertThat(definition.getSpecificationVersion(),is(BAR));
  assertThat(definition.getSpecificationVendor(),is(QUX));
  assertThat(definition.getImplementationTitle(),is(BAZ));
  assertThat(definition.getImplementationVersion(),is(FOO + BAR));
  assertThat(definition.getImplementationVendor(),is(QUX + BAZ));
  assertThat(definition.getSealBase(),nullValue(URL.class));
  assertThat(definition.isCompatibleTo(getClass().getPackage()),is(true));
  verifyZeroInteractions(sealBaseLocator);
}
