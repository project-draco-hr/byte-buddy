{
  Object target=new Object();
  DynamicType.Loaded<ExplicitTarget> loaded=implement(ExplicitTarget.class,MethodCall.invoke(Object.class.getDeclaredMethod("toString")).onInstanceField(Object.class,FOO));
  assertThat(loaded.getLoadedAuxiliaryTypes().size(),is(0));
  assertThat(loaded.getLoaded().getDeclaredMethods().length,is(1));
  assertThat(loaded.getLoaded().getDeclaredMethod(FOO),not(nullValue(Method.class)));
  assertThat(loaded.getLoaded().getDeclaredConstructors().length,is(1));
  assertThat(loaded.getLoaded().getDeclaredFields().length,is(1));
  ExplicitTarget instance=loaded.getLoaded().getConstructor().newInstance();
  Field field=loaded.getLoaded().getDeclaredField(FOO);
  field.setAccessible(true);
  field.set(instance,target);
  assertThat(instance.getClass(),not(CoreMatchers.<Class<?>>is(ExplicitTarget.class)));
  assertThat(instance,instanceOf(ExplicitTarget.class));
  assertThat(instance.foo(),is(target.toString()));
}
