{
  DynamicType.Loaded<SimpleMethod> loaded=implement(SimpleMethod.class,MethodCall.invoke(Foo.class.getDeclaredMethod(BAR,Object.class,Object.class)).with(JavaConstant.MethodHandle.ofLoaded(makeMethodHandle()),JavaConstant.MethodType.ofLoaded(makeMethodType(void.class))),SimpleMethod.class.getClassLoader(),named(FOO));
  assertThat(loaded.getLoadedAuxiliaryTypes().size(),is(0));
  assertThat(loaded.getLoaded().getDeclaredMethods().length,is(1));
  assertThat(loaded.getLoaded().getDeclaredFields().length,is(0));
  SimpleMethod instance=loaded.getLoaded().newInstance();
  assertThat(instance.foo(),is("" + makeMethodHandle() + makeMethodType(void.class)));
  assertThat(instance.getClass(),not(CoreMatchers.<Class<?>>is(SimpleMethod.class)));
  assertThat(instance,instanceOf(SimpleMethod.class));
}
