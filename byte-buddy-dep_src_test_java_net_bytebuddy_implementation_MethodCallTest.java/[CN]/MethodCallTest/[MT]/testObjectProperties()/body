{
  ObjectPropertyAssertion.of(MethodCall.class).apply();
  ObjectPropertyAssertion.of(MethodCall.WithoutSpecifiedTarget.class).apply();
  ObjectPropertyAssertion.of(MethodCall.Appender.class).apply();
  ObjectPropertyAssertion.of(MethodCall.MethodLocator.ForExplicitMethod.class).apply();
  ObjectPropertyAssertion.of(MethodCall.MethodLocator.ForInstrumentedMethod.class).apply();
  ObjectPropertyAssertion.of(MethodCall.MethodInvoker.ForContextualInvocation.class).apply();
  final Iterator<Class<?>> iterator=Arrays.<Class<?>>asList(String.class,Object.class).iterator();
  ObjectPropertyAssertion.of(MethodCall.MethodInvoker.ForVirtualInvocation.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return iterator.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(MethodCall.MethodInvoker.ForVirtualInvocation.WithImplicitType.class).apply();
  ObjectPropertyAssertion.of(MethodCall.MethodInvoker.ForSuperMethodInvocation.class).apply();
  ObjectPropertyAssertion.of(MethodCall.MethodInvoker.ForDefaultMethodInvocation.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TerminationHandler.ForChainedInvocation.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TerminationHandler.ForMethodReturn.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TargetHandler.ForStaticField.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TargetHandler.ForInstanceField.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TargetHandler.ForSelfOrStaticInvocation.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TargetHandler.ForConstructingInvocation.class).apply();
  ObjectPropertyAssertion.of(MethodCall.TargetHandler.ForMethodParameter.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForNullConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForThisReference.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForThisReference.Factory.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForInstrumentedType.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForInstrumentedType.Factory.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForStaticField.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForStaticField.Factory.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForInstanceField.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForInstanceField.Factory.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForExistingField.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForExistingField.Factory.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForBooleanConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForByteConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForCharacterConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForDoubleConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForFloatConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForIntegerConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForLongConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForMethodParameter.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForMethodParameter.Factory.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForMethodParameter.OfInstrumentedMethod.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForShortConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForTextConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForClassConstant.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForEnumerationValue.class).apply();
  ObjectPropertyAssertion.of(MethodCall.ArgumentLoader.ForJavaInstance.class).apply();
}
