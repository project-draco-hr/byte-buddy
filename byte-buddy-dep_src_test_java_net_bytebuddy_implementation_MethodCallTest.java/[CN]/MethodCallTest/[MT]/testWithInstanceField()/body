{
  DynamicType.Loaded<MethodCallWithExplicitArgument> loaded=implement(MethodCallWithExplicitArgument.class,MethodCall.invokeSuper().withInstanceField(String.class,FOO));
  assertThat(loaded.getLoadedAuxiliaryTypes().size(),is(0));
  assertThat(loaded.getLoaded().getDeclaredMethods().length,is(1));
  assertThat(loaded.getLoaded().getDeclaredMethod(FOO,String.class),not(nullValue(Method.class)));
  assertThat(loaded.getLoaded().getDeclaredConstructors().length,is(1));
  assertThat(loaded.getLoaded().getDeclaredFields().length,is(1));
  MethodCallWithExplicitArgument instance=loaded.getLoaded().newInstance();
  Field field=instance.getClass().getDeclaredField(FOO);
  field.setAccessible(true);
  field.set(instance,FOO);
  assertNotEquals(MethodCallWithExplicitArgument.class,instance.getClass());
  assertThat(instance,instanceOf(MethodCallWithExplicitArgument.class));
  assertThat(instance.foo(BAR),is(FOO));
}
