{
  DynamicType.Loaded<SimpleMethod> loaded=implement(SimpleMethod.class,MethodCall.invoke(Foo.class.getDeclaredMethod(BAR,Object.class,Object.class)).with(new TypeDescription.ForLoadedType(Object.class),new TypeDescription.ForLoadedType(String.class)),SimpleMethod.class.getClassLoader(),named(FOO));
  assertThat(loaded.getLoadedAuxiliaryTypes().size(),is(0));
  assertThat(loaded.getLoaded().getDeclaredMethods().length,is(1));
  assertThat(loaded.getLoaded().getDeclaredFields().length,is(0));
  SimpleMethod instance=loaded.getLoaded().newInstance();
  assertThat(instance.foo(),is("" + Object.class + String.class));
  assertNotEquals(SimpleMethod.class,instance.getClass());
  assertThat(instance,instanceOf(SimpleMethod.class));
}
