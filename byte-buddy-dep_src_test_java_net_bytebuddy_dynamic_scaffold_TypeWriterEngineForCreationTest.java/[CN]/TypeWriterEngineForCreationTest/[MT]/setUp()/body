{
  invokableMethods=Arrays.asList(firstMethod,secondMethod);
  FieldList declaredFields=new FieldList.Explicit(Arrays.asList(firstField,secondField));
  when(instrumentedType.getSupertype()).thenReturn(superType);
  when(instrumentedType.getDeclaredFields()).thenReturn(declaredFields);
  when(instrumentedType.getInterfaces()).thenReturn(new TypeList.Empty());
  when(classFileVersion.getVersionNumber()).thenReturn(Opcodes.V1_6);
  when(classVisitorWrapper.wrap(any(ClassVisitor.class))).thenReturn(classVisitor);
  when(fieldPool.target(firstField)).thenReturn(firstFieldEntry);
  when(fieldPool.target(secondField)).thenReturn(secondFieldEntry);
  when(methodPool.target(firstMethod)).thenReturn(firstMethodEntry);
  when(methodPool.target(secondMethod)).thenReturn(secondMethodEntry);
  when(instrumentedType.getInternalName()).thenReturn(FOO);
  when(instrumentedType.getGenericSignature()).thenReturn(QUX);
  when(instrumentedType.getActualModifiers(any(boolean.class))).thenReturn(TYPE_MODIFIER);
  TypeList interfaceTypes=mock(TypeList.class);
  when(interfaceTypes.toInternalNames()).thenReturn(new String[]{BAZ});
  when(instrumentedType.getInterfaces()).thenReturn(interfaceTypes);
  when(classFileVersion.getVersionNumber()).thenReturn(CLASS_VERSION);
  when(superType.getInternalName()).thenReturn(BAR);
}
