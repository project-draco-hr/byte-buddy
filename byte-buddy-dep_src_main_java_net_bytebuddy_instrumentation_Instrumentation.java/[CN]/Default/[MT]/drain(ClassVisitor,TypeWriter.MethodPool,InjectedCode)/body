{
  canRegisterFieldCache=false;
  MethodDescription typeInitializerMethod=MethodDescription.Latent.typeInitializerOf(instrumentedType);
  InstrumentedType.TypeInitializer typeInitializer=this.typeInitializer;
  if (injectedCode.isDefined()) {
    typeInitializer=typeInitializer.expandWith(injectedCode.getStackManipulation());
  }
  for (  FieldCacheEntry fieldCacheEntry : registeredFieldCacheEntries.keySet()) {
    typeInitializer=typeInitializer.expandWith(fieldCacheEntry);
  }
  TypeWriter.MethodPool.Entry initializerEntry=methodPool.target(typeInitializerMethod);
  for (  FieldDescription fieldDescription : registeredFieldCacheEntries.values()) {
    classVisitor.visitField(fieldDescription.getModifiers(),fieldDescription.getInternalName(),fieldDescription.getDescriptor(),fieldDescription.getGenericSignature(),NO_DEFAULT_VALUE).visitEnd();
  }
  for (  Map.Entry<MethodDescription,TypeWriter.MethodPool.Entry> entry : accessorMethodEntries.entrySet()) {
    entry.getValue().apply(classVisitor,this,entry.getKey());
  }
}
