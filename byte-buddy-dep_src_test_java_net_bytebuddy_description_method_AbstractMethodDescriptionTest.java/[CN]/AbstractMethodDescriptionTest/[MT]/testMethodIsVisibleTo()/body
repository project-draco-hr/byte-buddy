{
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isVisibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isVisibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isVisibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isVisibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isVisibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isVisibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isVisibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isVisibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isVisibleTo(TypeDescription.OBJECT),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isVisibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isVisibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isVisibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isVisibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("publicMethod")).isVisibleTo(TypeDescription.OBJECT),is(true));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("protectedMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("packagePrivateMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("privateMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticPublicMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticProtectedMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticPackagePrivateMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticPrivateMethod")).isVisibleTo(TypeDescription.OBJECT),is(false));
}
