{
  Map<String,AnnotationValue<?,?>> properties=new LinkedHashMap<String,AnnotationValue<?,?>>();
  properties.put("boolean_property",new AnnotationValue.Trivial<Boolean>(true));
  properties.put("boolean_property_array",new AnnotationValue.Trivial<boolean[]>(new boolean[]{true}));
  properties.put("byte_property",new AnnotationValue.Trivial<Byte>((byte)0));
  properties.put("byte_property_array",new AnnotationValue.Trivial<byte[]>(new byte[]{0}));
  properties.put("short_property",new AnnotationValue.Trivial<Short>((short)0));
  properties.put("short_property_array",new AnnotationValue.Trivial<short[]>(new short[]{0}));
  properties.put("int_property",new AnnotationValue.Trivial<Integer>(0));
  properties.put("int_property_array",new AnnotationValue.Trivial<int[]>(new int[]{0}));
  properties.put("long_property",new AnnotationValue.Trivial<Long>(0L));
  properties.put("long_property_array",new AnnotationValue.Trivial<long[]>(new long[]{0}));
  properties.put("float_property",new AnnotationValue.Trivial<Float>(0f));
  properties.put("float_property_array",new AnnotationValue.Trivial<float[]>(new float[]{0}));
  properties.put("double_property",new AnnotationValue.Trivial<Double>(0d));
  properties.put("double_property_array",new AnnotationValue.Trivial<double[]>(new double[]{0d}));
  properties.put("string_property",new AnnotationValue.Trivial<String>("foo"));
  properties.put("string_property_array",new AnnotationValue.Trivial<String[]>(new String[]{"foo"}));
  AnnotationDescription annotationDescription=mock(AnnotationDescription.class);
  when(annotationDescription.getAnnotationType()).thenReturn(new TypeDescription.ForLoadedType(SampleAnnotation.class));
  properties.put("annotation_property",new AnnotationValue.Trivial<AnnotationDescription>(annotationDescription));
  properties.put("annotation_property_array",new AnnotationValue.Trivial<AnnotationDescription[]>(new AnnotationDescription[]{annotationDescription}));
  EnumerationDescription enumerationDescription=mock(EnumerationDescription.class);
  when(enumerationDescription.getEnumerationType()).thenReturn(new TypeDescription.ForLoadedType(SampleEnumeration.class));
  properties.put("enum_property",new AnnotationValue.Trivial<EnumerationDescription>(enumerationDescription));
  properties.put("enum_property_array",new AnnotationValue.Trivial<EnumerationDescription[]>(new EnumerationDescription[]{enumerationDescription}));
  MethodList<?> methods=new TypeDescription.ForLoadedType(AnnotationValues.class).getDeclaredMethods();
  for (  Map.Entry<String,AnnotationValue<?,?>> entry : properties.entrySet()) {
    assertThat(methods.filter(named(entry.getKey())).getOnly().isDefaultValue(entry.getValue()),is(true));
    assertThat(methods.filter(named(entry.getKey())).getOnly().isDefaultValue(mock(AnnotationValue.class)),is(false));
  }
  when(annotationDescription.getAnnotationType()).thenReturn(TypeDescription.OBJECT);
  assertThat(methods.filter(named("annotation_property")).getOnly().isDefaultValue(new AnnotationValue.Trivial<AnnotationDescription>(annotationDescription)),is(false));
  assertThat(methods.filter(named("annotation_property_array")).getOnly().isDefaultValue(new AnnotationValue.Trivial<AnnotationDescription[]>(new AnnotationDescription[]{annotationDescription})),is(false));
  when(enumerationDescription.getEnumerationType()).thenReturn(TypeDescription.OBJECT);
  assertThat(methods.filter(named("enum_property")).getOnly().isDefaultValue(new AnnotationValue.Trivial<EnumerationDescription>(enumerationDescription)),is(false));
  assertThat(methods.filter(named("enum_property_array")).getOnly().isDefaultValue(new AnnotationValue.Trivial<EnumerationDescription[]>(new EnumerationDescription[]{enumerationDescription})),is(false));
}
