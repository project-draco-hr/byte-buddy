{
  MethodDescription identical=describe(firstConstructor);
  assertThat(identical,equalTo(identical));
  assertThat(describe(firstConstructor),equalTo(describe(firstConstructor)));
  assertThat(describe(firstConstructor),not(equalTo(describe(secondConstructor))));
  assertThat(describe(firstConstructor),not(equalTo(describe(firstMethod))));
  assertThat(describe(firstConstructor),not(equalTo(describe(secondMethod))));
  assertThat(describe(firstConstructor),not(equalTo(describe(thirdMethod))));
  assertThat(describe(firstConstructor),equalTo((MethodDescription)new MethodDescription.ForLoadedConstructor(firstConstructor)));
  assertThat(describe(firstConstructor),not(equalTo((MethodDescription)new MethodDescription.ForLoadedConstructor(secondConstructor))));
  assertThat(describe(firstConstructor),not(equalTo((MethodDescription)new MethodDescription.ForLoadedMethod(firstMethod))));
  assertThat(describe(firstConstructor),not(equalTo((MethodDescription)new MethodDescription.ForLoadedMethod(secondMethod))));
  assertThat(describe(firstConstructor),not(equalTo((MethodDescription)new MethodDescription.ForLoadedMethod(thirdMethod))));
  MethodDescription.inDefinedShape equalMethod=mock(MethodDescription.inDefinedShape.class);
  when(equalMethod.getInternalName()).thenReturn(MethodDescription.CONSTRUCTOR_INTERNAL_NAME);
  when(equalMethod.getDeclaringType()).thenReturn(new TypeDescription.ForLoadedType(firstConstructor.getDeclaringClass()));
  when(equalMethod.getReturnType()).thenReturn(new TypeDescription.ForLoadedType(void.class));
  when(equalMethod.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethod,new TypeList.ForLoadedType(firstConstructor.getParameterTypes())));
  assertThat(describe(firstConstructor),equalTo(equalMethod));
  MethodDescription.inDefinedShape equalMethodButName=mock(MethodDescription.inDefinedShape.class);
  when(equalMethodButName.getInternalName()).thenReturn(firstMethod.getName());
  when(equalMethodButName.getDeclaringType()).thenReturn(new TypeDescription.ForLoadedType(firstConstructor.getDeclaringClass()));
  when(equalMethodButName.getReturnType()).thenReturn(new TypeDescription.ForLoadedType(void.class));
  when(equalMethodButName.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButName,new TypeList.ForLoadedType(firstConstructor.getParameterTypes())));
  assertThat(describe(firstConstructor),not(equalTo(equalMethodButName)));
  MethodDescription.inDefinedShape equalMethodButReturnType=mock(MethodDescription.inDefinedShape.class);
  when(equalMethodButReturnType.getInternalName()).thenReturn(MethodDescription.CONSTRUCTOR_INTERNAL_NAME);
  when(equalMethodButReturnType.getDeclaringType()).thenReturn(new TypeDescription.ForLoadedType(Object.class));
  when(equalMethodButReturnType.getReturnType()).thenReturn(new TypeDescription.ForLoadedType(void.class));
  when(equalMethodButReturnType.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButReturnType,new TypeList.ForLoadedType(firstConstructor.getParameterTypes())));
  assertThat(describe(firstConstructor),not(equalTo(equalMethodButReturnType)));
  MethodDescription.inDefinedShape equalMethodButDeclaringType=mock(MethodDescription.inDefinedShape.class);
  when(equalMethodButDeclaringType.getInternalName()).thenReturn(MethodDescription.CONSTRUCTOR_INTERNAL_NAME);
  when(equalMethodButDeclaringType.getDeclaringType()).thenReturn(new TypeDescription.ForLoadedType(firstConstructor.getDeclaringClass()));
  when(equalMethodButDeclaringType.getReturnType()).thenReturn(new TypeDescription.ForLoadedType(Object.class));
  when(equalMethodButDeclaringType.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButDeclaringType,new TypeList.ForLoadedType(firstConstructor.getParameterTypes())));
  assertThat(describe(firstConstructor),not(equalTo(equalMethodButDeclaringType)));
  MethodDescription.inDefinedShape equalMethodButParameterTypes=mock(MethodDescription.inDefinedShape.class);
  when(equalMethodButParameterTypes.getInternalName()).thenReturn(MethodDescription.CONSTRUCTOR_INTERNAL_NAME);
  when(equalMethodButParameterTypes.getDeclaringType()).thenReturn(new TypeDescription.ForLoadedType(firstConstructor.getDeclaringClass()));
  when(equalMethodButParameterTypes.getReturnType()).thenReturn(new TypeDescription.ForLoadedType(void.class));
  when(equalMethodButParameterTypes.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButParameterTypes,new TypeList.ForLoadedType(secondConstructor.getParameterTypes())));
  assertThat(describe(firstConstructor),not(equalTo(equalMethodButParameterTypes)));
  assertThat(describe(firstConstructor),not(equalTo(new Object())));
  assertThat(describe(firstConstructor),not(equalTo(null)));
}
