{
  assertThat(describe(PublicType.class.getDeclaredConstructor()).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Void.class)).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Object.class)).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(String.class)).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor()).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Void.class)).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Object.class)).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(String.class)).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(false));
  assertThat(describe(PublicType.class.getDeclaredConstructor()).isAccessibleTo(TypeDescription.OBJECT),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Void.class)).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Object.class)).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredConstructor(String.class)).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredConstructor()).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Void.class)).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredConstructor(Object.class)).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(false));
  assertThat(describe(PublicType.class.getDeclaredConstructor(String.class)).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredConstructor()).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredConstructor(Void.class)).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredConstructor(Object.class)).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredConstructor(String.class)).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(MethodVisibilityType.class.getDeclaredMethod("packagePrivateArgument",PackagePrivateType.class)).isAccessibleTo(new TypeDescription.ForLoadedType(MethodVisibilityType.class)),is(true));
  assertThat(describe(MethodVisibilityType.class.getDeclaredMethod("packagePrivateReturnType")).isAccessibleTo(new TypeDescription.ForLoadedType(MethodVisibilityType.class)),is(true));
  assertThat(describe(MethodVisibilityType.class.getDeclaredMethod("packagePrivateArgument",PackagePrivateType.class)).isAccessibleTo(TypeDescription.OBJECT),is(true));
  assertThat(describe(MethodVisibilityType.class.getDeclaredMethod("packagePrivateReturnType")).isAccessibleTo(TypeDescription.OBJECT),is(true));
}
