{
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(PublicType.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(Sample.class)),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isAccessibleTo(TypeDescription.OBJECT),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("publicMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("protectedMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(true));
  assertThat(describe(PublicType.class.getDeclaredMethod("packagePrivateMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(false));
  assertThat(describe(PublicType.class.getDeclaredMethod("privateMethod")).isAccessibleTo(new TypeDescription.ForLoadedType(VisibilityMethodTestHelper.class)),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("publicMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("protectedMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("packagePrivateMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("privateMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticPublicMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticProtectedMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticPackagePrivateMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
  assertThat(describe(PackagePrivateType.class.getDeclaredMethod("staticPrivateMethod")).isAccessibleTo(TypeDescription.OBJECT),is(false));
}
