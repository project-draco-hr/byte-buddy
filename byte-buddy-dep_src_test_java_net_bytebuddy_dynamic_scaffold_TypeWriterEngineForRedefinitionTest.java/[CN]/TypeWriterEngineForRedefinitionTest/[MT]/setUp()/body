{
  invokableMethods=Arrays.asList(firstMethod,secondMethod,new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(FOO)),new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(BAR)));
  targetType=new TypeDescription.ForLoadedType(Foo.class);
  FieldList declaredFields=new FieldList.Explicit(Arrays.asList(firstField,secondField));
  when(firstMethod.getUniqueSignature()).thenReturn(FOO);
  when(firstMethod.getUniqueSignature()).thenReturn(BAR);
  when(instrumentedType.getSupertype()).thenReturn(superType);
  when(superType.getInternalName()).thenReturn(BAR);
  when(instrumentedType.getDeclaredFields()).thenReturn(declaredFields);
  when(instrumentedType.getInterfaces()).thenReturn(new TypeList.Empty());
  when(classFileVersion.getVersionNumber()).thenReturn(Opcodes.V1_6);
  when(classVisitorWrapper.wrap(any(ClassVisitor.class))).thenReturn(classVisitor);
  when(fieldPool.target(firstField)).thenReturn(firstFieldEntry);
  when(fieldPool.target(secondField)).thenReturn(secondFieldEntry);
  when(methodPool.target(firstMethod)).thenReturn(firstMethodEntry);
  when(methodPool.target(secondMethod)).thenReturn(secondMethodEntry);
  when(methodPool.target(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(FOO)))).thenReturn(fooEntry);
  when(methodPool.target(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(BAR)))).thenReturn(barEntry);
  when(methodPool.target(new MethodDescription.ForLoadedConstructor(Foo.class.getDeclaredConstructor()))).thenReturn(constructorEntry);
  when(instrumentedType.getInternalName()).thenReturn(FOO);
  when(instrumentedType.getGenericSignature()).thenReturn(QUX);
  when(instrumentedType.getActualModifiers(anyBoolean())).thenReturn(TYPE_MODIFIER);
  TypeList interfaceTypes=mock(TypeList.class);
  when(interfaceTypes.toInternalNames()).thenReturn(new String[]{BAZ});
  when(instrumentedType.getInterfaces()).thenReturn(interfaceTypes);
  when(classFileVersion.getVersionNumber()).thenReturn(CLASS_VERSION);
  when(classVisitor.visitMethod(any(int.class),eq(FOO),any(String.class),any(String.class),any(String[].class))).thenReturn(fooMethodVisitor);
  when(classVisitor.visitMethod(any(int.class),eq(BAR),any(String.class),any(String.class),any(String[].class))).thenReturn(barMethodVisitor);
  when(classVisitor.visitMethod(any(int.class),eq(QUX),any(String.class),any(String.class),any(String[].class))).thenReturn(quxMethodVisitor);
  when(fooEntry.isDefineMethod()).thenReturn(true);
  when(fooEntry.getAttributeAppender()).thenReturn(fooAttributeAppender);
  when(fooEntry.getByteCodeAppender()).thenReturn(fooByteCodeAppender);
  when(fooByteCodeAppender.appendsCode()).thenReturn(true);
  when(barEntry.isDefineMethod()).thenReturn(true);
  when(barEntry.getAttributeAppender()).thenReturn(barAttributeAppender);
  when(barEntry.getByteCodeAppender()).thenReturn(barByteCodeAppender);
  when(barByteCodeAppender.appendsCode()).thenReturn(true);
  when(fooByteCodeAppender.apply(any(MethodVisitor.class),any(Instrumentation.Context.class),any(MethodDescription.class))).thenReturn(new ByteCodeAppender.Size(0,0));
  when(barByteCodeAppender.apply(any(MethodVisitor.class),any(Instrumentation.Context.class),any(MethodDescription.class))).thenReturn(new ByteCodeAppender.Size(0,0));
  when(methodRebaseResolver.resolve(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(BAR)))).thenReturn(barResolution);
  when(barResolution.getResolvedMethod()).thenReturn(barResolutionMethod);
  when(barResolutionMethod.getModifiers()).thenReturn(Opcodes.ACC_PRIVATE | Opcodes.ACC_SYNTHETIC);
  when(barResolutionMethod.getInternalName()).thenReturn(BAR + FOO);
  when(barResolutionMethod.getDescriptor()).thenReturn(BAR + QUX);
  when(barResolutionMethod.getGenericSignature()).thenReturn(QUX + FOO);
  TypeList barExceptionTypes=mock(TypeList.class);
  when(barExceptionTypes.toInternalNames()).thenReturn(new String[]{BAZ + QUX});
  when(barResolutionMethod.getExceptionTypes()).thenReturn(barExceptionTypes);
  when(classFileVersion.compareTo(any(ClassFileVersion.class))).thenReturn(1);
  when(classFileLocator.locate(Foo.class.getName())).thenReturn(resolution);
}
