{
  when(classFileLocator.classFileFor(targetType)).thenReturn(getClass().getClassLoader().getResourceAsStream(Foo.class.getName().replace('.','/') + ".class"));
  assertThat(new TypeWriter.Engine.ForRedefinition(instrumentedType,targetType,classFileVersion,invokableMethods,classVisitorWrapper,typeAttributeAppender,fieldPool,methodPool,classFileLocator,methodRebaseResolver).create(instrumentationContext),notNullValue());
  verify(classVisitor).visit(CLASS_VERSION,TYPE_MODIFIER,FOO,QUX,BAR,new String[]{BAZ});
  verify(classVisitor,atLeast(0)).visitSource(any(String.class),any(String.class));
  verify(classVisitor,atLeast(0)).visitInnerClass(any(String.class),any(String.class),any(String.class),any(int.class));
  verify(classVisitor).visitAnnotation(Type.getDescriptor(Bar.class),true);
  verify(classVisitor).visitField(Opcodes.ACC_PRIVATE,FOO,Type.getDescriptor(Void.class),null,null);
  verify(classVisitor).visitMethod(Opcodes.ACC_PUBLIC,MethodDescription.CONSTRUCTOR_INTERNAL_NAME,"()V",null,null);
  verify(classVisitor).visitMethod(Opcodes.ACC_PUBLIC,FOO,"()V",null,null);
  verify(classVisitor).visitMethod(Opcodes.ACC_PUBLIC,BAR,"()V",null,null);
  verify(classVisitor).visitMethod(Opcodes.ACC_PUBLIC,QUX,"()V",null,null);
  verify(classVisitor).visitMethod(Opcodes.ACC_PRIVATE | Opcodes.ACC_SYNTHETIC,BAR + FOO,BAR + QUX,QUX + FOO,new String[]{BAZ + QUX});
  verify(methodPool).target(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(FOO)));
  verify(fooEntry).isDefineMethod();
  verify(fooAttributeAppender).apply(any(MethodVisitor.class),eq(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(FOO))));
  verify(fooByteCodeAppender,atLeast(1)).appendsCode();
  verify(fooByteCodeAppender).apply(any(MethodVisitor.class),eq(instrumentationContext),eq(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(FOO))));
  verify(methodPool).target(new MethodDescription.ForLoadedMethod(Foo.class.getDeclaredMethod(BAR)));
  verify(barEntry).isDefineMethod();
  verify(methodPool).target(firstMethod);
  verify(firstMethodEntry).apply(classVisitor,instrumentationContext,firstMethod);
  verify(methodPool).target(secondMethod);
  verify(secondMethodEntry).apply(classVisitor,instrumentationContext,secondMethod);
  verify(quxMethodVisitor).visitCode();
  verify(quxMethodVisitor).visitEnd();
  verify(classVisitor).visitEnd();
  verifyNoMoreInteractions(classVisitor);
  verify(typeAttributeAppender).apply(any(ClassVisitor.class),eq(instrumentedType));
  verifyNoMoreInteractions(typeAttributeAppender);
  verify(fieldPool).target(secondField);
  verify(secondFieldEntry).apply(classVisitor,secondField);
  verifyNoMoreInteractions(fieldPool);
  verifyZeroInteractions(firstFieldEntry);
  verifyNoMoreInteractions(secondFieldEntry);
}
