{
  if (superType.isPrimitive() && subType.isPrimitive()) {
    return PrimitiveWideningDelegate.forPrimitive(superType).widenTo(subType);
  }
 else   if (superType.isPrimitive()) {
    return PrimitiveBoxingDelegate.forPrimitive(superType).assignBoxedTo(subType,referenceTypeAwareAssigner,considerRuntimeType);
  }
 else   if (subType.isPrimitive()) {
    return PrimitiveUnboxingDelegate.forReferenceType(superType).assignUnboxedTo(subType,referenceTypeAwareAssigner,considerRuntimeType);
  }
 else {
    return referenceTypeAwareAssigner.assign(superType,subType,considerRuntimeType);
  }
}
