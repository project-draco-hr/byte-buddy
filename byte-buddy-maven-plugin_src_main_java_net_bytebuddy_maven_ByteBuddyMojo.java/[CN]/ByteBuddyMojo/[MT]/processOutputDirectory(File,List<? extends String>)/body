{
  getLog().info("Processing classes in: " + target);
  if (!target.isDirectory()) {
    throw new IOException("Source location does not exist: " + target);
  }
  List<Plugin> plugins=new ArrayList<Plugin>(this.plugins.size());
  for (  String plugin : this.plugins) {
    try {
      plugins.add((Plugin)Class.forName(plugin).getDeclaredConstructor().newInstance());
    }
 catch (    Exception exception) {
      throw new RuntimeException("Cannot create plugin: " + plugin,exception);
    }
  }
  ByteBuddy byteBuddy=new ByteBuddy();
  List<ClassFileLocator> classFileLocators=new ArrayList<ClassFileLocator>(dependencies.size() + 1);
  classFileLocators.add(new ClassFileLocator.ForFolder(target));
  for (  String dependency : dependencies) {
    File artifact=new File(dependency);
    classFileLocators.add(artifact.isFile() ? ClassFileLocator.ForJarFile.of(artifact) : new ClassFileLocator.ForFolder(artifact));
  }
  ClassFileLocator classFileLocator=new ClassFileLocator.Compound(classFileLocators);
  try {
    TypePool typePool=new TypePool.Default.WithLazyResolution(new TypePool.CacheProvider.Simple(),classFileLocator,TypePool.Default.ReaderMode.FAST,TypePool.ClassLoading.of(null));
    processDirectory(target,target,byteBuddy,classFileLocator,typePool,plugins);
  }
  finally {
    classFileLocator.close();
  }
}
