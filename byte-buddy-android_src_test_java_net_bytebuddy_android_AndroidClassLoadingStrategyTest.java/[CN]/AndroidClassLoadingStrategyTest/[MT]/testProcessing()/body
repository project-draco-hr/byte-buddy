{
  AndroidClassLoadingStrategy.DexProcessor dexProcessor=mock(AndroidClassLoadingStrategy.DexProcessor.class);
  Map<String,Class<?>> types=new HashMap<String,Class<?>>();
  types.put(Foo.class.getName(),Foo.class);
  types.put(Bar.class.getName(),Bar.class);
  ClassLoader classLoader=new MapClassLoader(getClass().getClassLoader(),types);
  when(dexProcessor.makeClassLoader(any(File.class),eq(folder),any(ClassLoader.class))).thenReturn(classLoader);
  AndroidClassLoadingStrategy.DexProcessor.Conversion conversion=mock(AndroidClassLoadingStrategy.DexProcessor.Conversion.class);
  when(dexProcessor.create()).thenReturn(conversion);
  ClassLoadingStrategy classLoadingStrategy=new AndroidClassLoadingStrategy(folder,dexProcessor);
  Map<TypeDescription,byte[]> unloaded=new HashMap<TypeDescription,byte[]>();
  unloaded.put(firstType,QUX);
  unloaded.put(secondType,BAZ);
  Map<TypeDescription,Class<?>> loaded=classLoadingStrategy.load(getClass().getClassLoader(),unloaded);
  assertThat(loaded.size(),is(2));
  assertThat(loaded.get(firstType),CoreMatchers.<Class<?>>is(Foo.class));
  assertThat(loaded.get(secondType),CoreMatchers.<Class<?>>is(Bar.class));
  verify(dexProcessor).create();
  verify(dexProcessor).makeClassLoader(any(File.class),eq(folder),eq(getClass().getClassLoader()));
  verifyNoMoreInteractions(dexProcessor);
  verify(conversion).register(Foo.class.getName(),QUX);
  verify(conversion).register(Bar.class.getName(),BAZ);
  verify(conversion).drainTo(any(OutputStream.class));
  verifyNoMoreInteractions(conversion);
}
