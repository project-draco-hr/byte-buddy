{
  when(instrumentedType.getSuperType()).thenReturn(superType);
  when(superType.asRawType()).thenReturn(superType);
  when(superType.getInternalName()).thenReturn(BAR);
  when(superType.getDeclaredMethods()).thenReturn(new MethodList.Explicit<MethodDescription.InDeclaredForm>(Collections.singletonList(superTypeConstructor)));
  when(superTypeConstructor.asToken()).thenReturn(superConstructorToken);
  when(superTypeConstructor.getInternalName()).thenReturn(QUX);
  when(superTypeConstructor.getDescriptor()).thenReturn(BAZ);
  when(superTypeConstructor.asDeclared()).thenReturn(superTypeConstructor);
  when(superTypeConstructor.isConstructor()).thenReturn(true);
  when(superTypeConstructor.getDeclaringType()).thenReturn(superType);
  when(superTypeConstructor.getReturnType()).thenReturn(TypeDescription.VOID);
  when(superTypeConstructor.getParameters()).thenReturn(new ParameterList.Empty());
  super.setUp();
}
