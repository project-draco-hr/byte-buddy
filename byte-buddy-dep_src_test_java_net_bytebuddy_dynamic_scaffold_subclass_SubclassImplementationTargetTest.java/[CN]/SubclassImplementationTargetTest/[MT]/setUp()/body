{
  when(superGraph.locate(Mockito.any(MethodDescription.SignatureToken.class))).thenReturn(MethodGraph.Node.Unresolved.INSTANCE);
  when(superGraph.locate(invokableToken)).thenReturn(new MethodGraph.Node.Simple(invokableMethod));
  when(instrumentedType.getSuperClass()).thenReturn(superClass);
  when(superClass.asErasure()).thenReturn(rawSuperType);
  when(superClass.asGenericType()).thenReturn(superClass);
  when(rawSuperType.asGenericType()).thenReturn(superClass);
  when(rawSuperType.asErasure()).thenReturn(rawSuperType);
  when(rawSuperType.getInternalName()).thenReturn(BAR);
  when(superClass.getDeclaredMethods()).thenReturn(new MethodList.Explicit<MethodDescription.InGenericShape>(superClassConstructor));
  when(superClassConstructor.asDefined()).thenReturn(definedSuperTypeConstructor);
  when(definedSuperTypeConstructor.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
  when(definedSuperTypeConstructor.getDeclaringType()).thenReturn(rawSuperType);
  when(definedSuperTypeConstructor.isConstructor()).thenReturn(true);
  when(superClassConstructor.isVisibleTo(instrumentedType)).thenReturn(true);
  when(superClassConstructor.asSignatureToken()).thenReturn(superConstructorToken);
  when(definedSuperTypeConstructor.getInternalName()).thenReturn(QUX);
  when(definedSuperTypeConstructor.getDescriptor()).thenReturn(BAZ);
  when(superClassConstructor.isConstructor()).thenReturn(true);
  when(superClassConstructor.getDeclaringType()).thenReturn(superClass);
  when(superClassConstructor.getReturnType()).thenReturn(TypeDescription.Generic.VOID);
  when(superClassConstructor.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InGenericShape>());
  when(invokableToken.getName()).thenReturn(FOO);
  when(superConstructorToken.getName()).thenReturn(MethodDescription.CONSTRUCTOR_INTERNAL_NAME);
  super.setUp();
}
