{
  LinkedHashMap<MethodDescription.SignatureToken,MethodGraph.Node> nodes=new LinkedHashMap<MethodDescription.SignatureToken,MethodGraph.Node>();
  MethodDescription callMethod=new MethodDescription.Latent(new TypeDescription.ForLoadedType(Callable.class),"call",Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT,Collections.<TypeVariableToken>emptyList(),TypeDescription.Generic.OBJECT,Collections.<ParameterDescription.Token>emptyList(),Collections.singletonList(new TypeDescription.Generic.OfNonGenericType.ForLoadedType(Exception.class)),Collections.<AnnotationDescription>emptyList(),MethodDescription.NO_DEFAULT_VALUE,TypeDescription.Generic.UNDEFINED);
  nodes.put(callMethod.asSignatureToken(),new MethodGraph.Node.Simple(callMethod));
  MethodDescription runMethod=new MethodDescription.Latent(new TypeDescription.ForLoadedType(Runnable.class),"run",Opcodes.ACC_PUBLIC | Opcodes.ACC_ABSTRACT,Collections.<TypeVariableToken>emptyList(),TypeDescription.Generic.VOID,Collections.<ParameterDescription.Token>emptyList(),Collections.<TypeDescription.Generic>emptyList(),Collections.<AnnotationDescription>emptyList(),MethodDescription.NO_DEFAULT_VALUE,TypeDescription.Generic.UNDEFINED);
  nodes.put(runMethod.asSignatureToken(),new MethodGraph.Node.Simple(runMethod));
  MethodGraph methodGraph=new MethodGraph.Simple(nodes);
  this.methodGraph=new MethodGraph.Linked.Delegation(methodGraph,methodGraph,Collections.<TypeDescription,MethodGraph>emptyMap());
}
