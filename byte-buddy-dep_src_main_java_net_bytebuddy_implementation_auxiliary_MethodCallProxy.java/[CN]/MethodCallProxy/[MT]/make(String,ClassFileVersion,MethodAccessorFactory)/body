{
  MethodDescription accessorMethod=methodAccessorFactory.registerAccessorFor(specialMethodInvocation);
  LinkedHashMap<String,TypeDescription> parameterFields=extractFields(accessorMethod);
  DynamicType.Builder<?> builder=new ByteBuddy(classFileVersion).subclass(Object.class,ConstructorStrategy.Default.NO_CONSTRUCTORS).methodLookupEngine(ProxyMethodLookupEngine.INSTANCE).name(auxiliaryTypeName).modifiers(DEFAULT_TYPE_MODIFIER).implement(Runnable.class,Callable.class).intercept(new MethodCall(accessorMethod,assigner)).implement(serializableProxy ? new Class<?>[]{Serializable.class} : new Class<?>[0]).defineConstructor(new ArrayList<TypeDescription>(parameterFields.values())).intercept(ConstructorCall.INSTANCE);
  for (  Map.Entry<String,TypeDescription> field : parameterFields.entrySet()) {
    builder=builder.defineField(field.getKey(),field.getValue(),Visibility.PRIVATE);
  }
  return builder.make();
}
