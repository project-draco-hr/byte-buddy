{
  when(methodDescription.isConstructor()).thenReturn(true);
  MethodFlatteningResolver.Resolution resolution=new MethodFlatteningResolver.Default(methodMatcher,placeholderType,methodNameTransformer).resolve(methodDescription);
  assertThat(resolution.isRebased(),is(true));
  assertThat(resolution.getResolvedMethod().getInternalName(),is(FOO));
  assertThat(resolution.getResolvedMethod().getModifiers(),is(MethodFlatteningResolver.REBASED_METHOD_MODIFIER));
  assertThat(resolution.getResolvedMethod().getDeclaringType(),is(instrumentedType));
  assertThat(resolution.getResolvedMethod().getParameterTypes(),is((TypeList)new TypeList.Explicit(Arrays.asList(placeholderType))));
  assertThat(resolution.getResolvedMethod().getReturnType(),is(returnType));
  assertThat(resolution.getAdditionalArguments().isValid(),is(true));
  StackManipulation.Size size=resolution.getAdditionalArguments().apply(methodVisitor,instrumentationContext);
  assertThat(size.getSizeImpact(),is(1));
  assertThat(size.getMaximalSize(),is(1));
  verify(methodVisitor).visitInsn(Opcodes.ACONST_NULL);
  verifyNoMoreInteractions(methodVisitor);
  verifyZeroInteractions(instrumentationContext);
}
