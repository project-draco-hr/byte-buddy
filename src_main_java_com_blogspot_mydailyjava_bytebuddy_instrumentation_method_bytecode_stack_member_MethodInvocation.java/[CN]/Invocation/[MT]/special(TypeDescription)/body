{
  validateNonStaticAndTypeCompatibleCall(invocationTarget);
  if ((methodDescription.isPrivate() || methodDescription.isConstructor())) {
    if (this.typeDescription.equals(invocationTarget)) {
      return this;
    }
 else {
      throw new IllegalArgumentException("Cannot invoke " + methodDescription + " on any other type");
    }
  }
  if (invocationTarget.isInterface()) {
    throw new IllegalArgumentException("Cannot call INVOKESPECIAL on interface type");
  }
 else {
    return SPECIAL.new Invocation(methodDescription,invocationTarget);
  }
}
