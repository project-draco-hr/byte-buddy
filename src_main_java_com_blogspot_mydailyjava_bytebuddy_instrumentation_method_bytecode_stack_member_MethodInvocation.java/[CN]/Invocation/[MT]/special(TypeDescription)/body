{
  validateNonStaticAndTypeCompatibleCall(invocationTarget);
  if (methodDescription.isAbstract()) {
    throw new IllegalStateException("Cannot call INVOKESPECIAL on abstract method");
  }
 else   if ((methodDescription.isPrivate() || methodDescription.isConstructor())) {
    if (this.typeDescription.equals(invocationTarget)) {
      return this;
    }
 else {
      throw new IllegalArgumentException("Cannot apply special invocation for " + methodDescription + " on "+ invocationTarget);
    }
  }
  return SPECIAL.new Invocation(methodDescription,invocationTarget);
}
