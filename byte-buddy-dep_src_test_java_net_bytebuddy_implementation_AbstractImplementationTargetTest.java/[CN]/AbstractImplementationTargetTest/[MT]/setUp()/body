{
  when(methodType.asRawType()).thenReturn(methodType);
  when(finding.getTypeDescription()).thenReturn(instrumentedType);
  when(finding.getInvokableMethods()).thenReturn(new MethodList.Explicit(Collections.singletonList(invokableMethod)));
  when(finding.getInvokableDefaultMethods()).thenReturn(Collections.singletonMap(defaultType,Collections.<MethodDescription>singleton(defaultMethod)));
  when(bridgeMethodResolverFactory.make(any(MethodList.class))).thenReturn(bridgeMethodResolver);
  when(invokableMethod.getDeclaringType()).thenReturn(methodType);
  when(invokableMethod.getReturnType()).thenReturn(returnType);
  when(returnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(returnType.asRawType()).thenReturn(returnType);
  when(invokableMethod.getInternalName()).thenReturn(FOO);
  when(invokableMethod.getDescriptor()).thenReturn(QUX);
  when(invokableMethod.asToken()).thenReturn(invokableToken);
  when(defaultMethod.getInternalName()).thenReturn(QUXBAZ);
  when(defaultMethod.getDescriptor()).thenReturn(FOOBAZ);
  when(defaultMethod.getDeclaringType()).thenReturn(defaultType);
  when(defaultMethod.getReturnType()).thenReturn(returnType);
  when(defaultMethod.asToken()).thenReturn(defaultToken);
  when(defaultMethod.asDeclared()).thenReturn(defaultMethod);
  when(defaultType.isInterface()).thenReturn(true);
  when(defaultType.asRawType()).thenReturn(defaultType);
  when(defaultMethod.isSpecializableFor(defaultType)).thenReturn(true);
  when(defaultType.getInternalName()).thenReturn(BAZBAR);
  implementationTarget=makeImplementationTarget();
}
