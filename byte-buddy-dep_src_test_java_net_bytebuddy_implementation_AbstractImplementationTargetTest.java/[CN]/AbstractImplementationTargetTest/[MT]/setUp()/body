{
  when(instrumentedType.asErasure()).thenReturn(instrumentedType);
  when(instrumentedType.getInternalName()).thenReturn(BAZ);
  when(methodGraph.getSuperClassGraph()).thenReturn(superGraph);
  when(superGraph.locate(any(MethodDescription.SignatureToken.class))).thenReturn(MethodGraph.Node.Unresolved.INSTANCE);
  when(superGraph.locate(invokableToken)).thenReturn(new MethodGraph.Node.Simple(invokableMethod));
  when(methodGraph.getInterfaceGraph(defaultMethodDeclaringType)).thenReturn(defaultGraph);
  when(defaultGraph.locate(any(MethodDescription.SignatureToken.class))).thenReturn(MethodGraph.Node.Unresolved.INSTANCE);
  when(defaultGraph.locate(defaultToken)).thenReturn(new MethodGraph.Node.Simple(defaultMethod));
  when(methodDeclaringType.asErasure()).thenReturn(methodDeclaringType);
  when(invokableMethod.getDeclaringType()).thenReturn(methodDeclaringType);
  when(invokableMethod.getReturnType()).thenReturn(genericReturnType);
  when(returnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(genericReturnType.getStackSize()).thenReturn(StackSize.ZERO);
  when(returnType.asErasure()).thenReturn(returnType);
  when(invokableMethod.getInternalName()).thenReturn(FOO);
  when(invokableMethod.getDescriptor()).thenReturn(QUX);
  when(invokableMethod.asSignatureToken()).thenReturn(invokableToken);
  when(invokableMethod.asDefined()).thenReturn(invokableMethod);
  when(defaultMethod.getInternalName()).thenReturn(QUXBAZ);
  when(defaultMethod.getDescriptor()).thenReturn(FOOBAZ);
  when(defaultMethod.getDeclaringType()).thenReturn(defaultMethodDeclaringType);
  when(defaultMethod.getReturnType()).thenReturn(genericReturnType);
  when(defaultMethod.asSignatureToken()).thenReturn(defaultToken);
  when(defaultMethod.asDefined()).thenReturn(defaultMethod);
  when(defaultMethod.isSpecializableFor(defaultMethodDeclaringType)).thenReturn(true);
  when(defaultMethodDeclaringType.isInterface()).thenReturn(true);
  when(defaultMethodDeclaringType.asErasure()).thenReturn(defaultMethodDeclaringType);
  when(defaultMethodDeclaringType.getInternalName()).thenReturn(BAZBAR);
  when(genericReturnType.asErasure()).thenReturn(returnType);
  when(genericReturnType.asGenericType()).thenReturn(genericReturnType);
  when(returnType.asGenericType()).thenReturn(genericReturnType);
  when(genericInstrumentedType.asErasure()).thenReturn(instrumentedType);
  when(genericInstrumentedType.asGenericType()).thenReturn(genericInstrumentedType);
  when(instrumentedType.asGenericType()).thenReturn(genericInstrumentedType);
  defaultMethodInvocation=Implementation.Target.AbstractBase.DefaultMethodInvocation.ENABLED;
}
