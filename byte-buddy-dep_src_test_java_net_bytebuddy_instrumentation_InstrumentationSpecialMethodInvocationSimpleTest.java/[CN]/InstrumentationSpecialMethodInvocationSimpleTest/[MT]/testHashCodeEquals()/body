{
  assertThat(specialMethodInvocation.hashCode(),is(specialMethodInvocation.hashCode()));
  assertThat(specialMethodInvocation,is(specialMethodInvocation));
  MethodDescription otherMethodDescription=mock(MethodDescription.class);
  when(otherMethodDescription.getInternalName()).thenReturn(FOO);
  when(otherMethodDescription.getParameterTypes()).thenReturn(parameterTypes);
  TypeDescription otherType=mock(TypeDescription.class);
  when(otherMethodDescription.getDeclaringType()).thenReturn(otherType);
  when(otherMethodDescription.getReturnType()).thenReturn(returnType);
  when(otherMethodDescription.isSpecializableFor(typeDescription)).thenReturn(true);
  Instrumentation.SpecialMethodInvocation other=Instrumentation.SpecialMethodInvocation.Simple.of(otherMethodDescription,typeDescription);
  assertThat(specialMethodInvocation.hashCode(),is(other.hashCode()));
  assertThat(specialMethodInvocation,is(other));
  assertThat(specialMethodInvocation.hashCode(),not(is(Instrumentation.SpecialMethodInvocation.Illegal.INSTANCE.hashCode())));
  assertThat(specialMethodInvocation,not(is((Instrumentation.SpecialMethodInvocation)Instrumentation.SpecialMethodInvocation.Illegal.INSTANCE)));
  MethodDescription otherUnequalMethodDescription=mock(MethodDescription.class);
  when(otherUnequalMethodDescription.getInternalName()).thenReturn(BAR);
  when(otherUnequalMethodDescription.getDeclaringType()).thenReturn(typeDescription);
  when(otherUnequalMethodDescription.getReturnType()).thenReturn(returnType);
  Instrumentation.SpecialMethodInvocation otherUnequal=Instrumentation.SpecialMethodInvocation.Simple.of(otherUnequalMethodDescription,typeDescription);
  assertThat(specialMethodInvocation.hashCode(),not(is(otherUnequal.hashCode())));
  assertThat(specialMethodInvocation,not(is(otherUnequal)));
}
