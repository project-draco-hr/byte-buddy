{
  ObjectPropertyAssertion.of(FieldProxy.Binder.class).apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.StaticFieldConstructor.class).apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.InstanceFieldConstructor.class).apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.InstanceFieldConstructor.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>(){
    @Override @SuppressWarnings("unchecked") public void apply(    Implementation.Target mock){
      TypeDescription typeDescription=mock(TypeDescription.class);
      when(mock.getInstrumentedType()).thenReturn(typeDescription);
      FieldList fieldList=mock(FieldList.class);
      FieldList filteredFieldList=mock(FieldList.class);
      when(typeDescription.getDeclaredFields()).thenReturn(fieldList);
      when(fieldList.filter(any(ElementMatcher.class))).thenReturn(filteredFieldList);
      when(filteredFieldList.getOnly()).thenReturn(mock(FieldDescription.class));
    }
  }
).skipSynthetic().apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.class).apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Getter.class).apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Getter.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>(){
    @Override public void apply(    Implementation.Target mock){
      when(mock.getInstrumentedType()).thenReturn(mock(TypeDescription.class));
    }
  }
).skipSynthetic().apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Setter.class).apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.AccessType.Setter.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>(){
    @Override public void apply(    Implementation.Target mock){
      when(mock.getInstrumentedType()).thenReturn(mock(TypeDescription.class));
    }
  }
).skipSynthetic().apply();
  ObjectPropertyAssertion.of(FieldProxy.Binder.AccessorProxy.class).apply();
}
