{
  when(target.getType()).thenReturn(genericGetterType);
  doReturn(Foo.class).when(annotation).declaringType();
  when(instrumentedType.isAssignableTo(new TypeDescription.ForLoadedType(Foo.class))).thenReturn(true);
  when(annotation.value()).thenReturn(FOO);
  when(fieldDescription.getInternalName()).thenReturn(FOO);
  when(source.getReturnType()).thenReturn(genericFieldType);
  when(source.getParameters()).thenReturn(new ParameterList.Empty<ParameterDescription.InDefinedShape>());
  when(source.getName()).thenReturn("getFoo");
  when(source.getInternalName()).thenReturn("getFoo");
  when(fieldDescription.isVisibleTo(instrumentedType)).thenReturn(true);
  MethodDelegationBinder.ParameterBinding<?> binding=new FieldProxy.Binder(getterMethod,setterMethod).bind(annotationDescription,source,target,implementationTarget,assigner);
  assertThat(binding.isValid(),is(true));
}
