{
  TypeDescription instrumentedTypeDescription=new TypeDescription.ForLoadedType(instrumentedType);
  when(instrumentationTarget.getTypeDescription()).thenReturn(instrumentedTypeDescription);
  when(instrumentationTarget.invokeSuper(any(MethodDescription.class),any(Instrumentation.Target.MethodLookup.class))).then(new FakeSpecialMethodInvocation(instrumentedTypeDescription));
  when(methodAccessorFactory.registerAccessorFor(any(Instrumentation.SpecialMethodInvocation.class))).then(new AnswerWithFakeAccessorMethod());
  String auxiliaryTypeName=instrumentedType.getName() + "$" + QUX;
  DynamicType dynamicType=new TypeProxy(new TypeDescription.ForLoadedType(proxyType),instrumentationTarget,true).make(auxiliaryTypeName,ClassFileVersion.forCurrentJavaVersion(),methodAccessorFactory);
  DynamicType.Unloaded<?> unloaded=(DynamicType.Unloaded<?>)dynamicType;
  Class<?> auxiliaryType=unloaded.load(getClass().getClassLoader(),ClassLoadingStrategy.Default.INJECTION).getLoaded();
  assertThat(auxiliaryType.getName(),is(auxiliaryTypeName));
  assertThat(auxiliaryType.getModifiers(),is(Opcodes.ACC_SYNTHETIC));
  assertThat(auxiliaryType.getDeclaredConstructors().length,is(1));
  assertThat(auxiliaryType.getDeclaredFields().length,is(1));
  return (Class<T>)auxiliaryType;
}
