{
  TypePool typePool=new TypePool.Default(cacheProvider,classFileLocator,TypePool.Default.ReaderMode.FAST,parentPool);
  when(parentPool.describe(FOO)).thenReturn(resolution);
  when(resolution.isResolved()).thenReturn(false);
  when(classFileLocator.locate(FOO)).thenReturn(new ClassFileLocator.Resolution.Explicit(ClassFileExtraction.extract(Foo.class)));
  when(cacheProvider.register(eq(FOO),any(TypePool.Resolution.class))).then(new Answer<TypePool.Resolution>(){
    @Override public TypePool.Resolution answer(    InvocationOnMock invocationOnMock) throws Throwable {
      return (TypePool.Resolution)invocationOnMock.getArguments()[1];
    }
  }
);
  TypePool.Resolution resolution=typePool.describe(FOO);
  assertThat(resolution.isResolved(),is(true));
  assertThat(resolution.resolve(),is((TypeDescription)new TypeDescription.ForLoadedType(Foo.class)));
  verify(cacheProvider).find(FOO);
  verify(cacheProvider).register(FOO,resolution);
  verifyZeroInteractions(cacheProvider);
  verify(classFileLocator).locate(FOO);
  verifyNoMoreInteractions(classFileLocator);
  verify(parentPool).describe(FOO);
  verifyNoMoreInteractions(parentPool);
  verify(this.resolution).isResolved();
  verifyNoMoreInteractions(this.resolution);
}
