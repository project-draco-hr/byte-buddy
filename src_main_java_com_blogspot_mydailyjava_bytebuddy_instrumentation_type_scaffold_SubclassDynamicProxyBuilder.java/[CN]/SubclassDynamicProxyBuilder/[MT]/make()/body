{
  ClassWriter classWriter=new ClassWriter(ASM_MANUAL_WRITING_OPTIONS);
  ClassVisitor classVisitor=classVisitorWrapperChain.wrap(classWriter);
  InstrumentedType instrumentedType=new InstrumentedType(classVersion,superClass,interfaces,visibility,typeManifestation,syntheticState,namingStrategy);
  classVisitor.visit(instrumentedType.getClassVersion(),instrumentedType.getModifiers(),instrumentedType.getInternalName(),null,instrumentedType.getSupertype().getInternalName(),instrumentedType.getInterfaces().toInternalNames());
  MethodInterception.Handler handler=methodInterceptions.handler(instrumentedType);
  for (  MethodDescription method : instrumentedType.getReachableMethods().filter(not(ignoredMethods).and(new WritableMethodFilter(instrumentedType)))) {
    handler.find(method).handle(classVisitor);
  }
  for (  MethodDescription method : instrumentedType.getSupertype().getDeclaredMethods().filter(not(ignoredMethods).and(isConstructor()).and(not(isPrivate())))) {
    handler.find(method).handle(classVisitor);
  }
  classVisitor.visitEnd();
  return new ByteArrayDynamicProxy<T>(instrumentedType.getName(),classWriter.toByteArray());
}
