{
  when(valueFilter.isRelevant(any(AnnotationDescription.class),any(MethodDescription.InDefinedShape.class))).thenReturn(true);
  ClassWriter classWriter=new ClassWriter(AsmVisitorWrapper.NO_FLAGS);
  classWriter.visit(ClassFileVersion.forThisVm().getMinorMajorVersion(),Opcodes.ACC_PUBLIC,BAR.replace('.','/'),null,Type.getInternalName(Object.class),null);
  AnnotationVisitor annotationVisitor=classWriter.visitAnnotation(Type.getDescriptor(annotation.annotationType()),true);
  when(target.visit(any(String.class),anyBoolean())).thenReturn(annotationVisitor);
  AnnotationDescription annotationDescription=AnnotationDescription.ForLoadedAnnotation.of(annotation);
  annotationAppender.append(annotationDescription,valueFilter);
  classWriter.visitEnd();
  Class<?> bar=new ByteArrayClassLoader(getClass().getClassLoader(),Collections.singletonMap(BAR,classWriter.toByteArray()),DEFAULT_PROTECTION_DOMAIN,ByteArrayClassLoader.PersistenceHandler.LATENT,PackageDefinitionStrategy.NoOp.INSTANCE).loadClass(BAR);
  assertThat(bar.getName(),is(BAR));
  assertThat(bar.getSuperclass(),CoreMatchers.<Class<?>>is(Object.class));
  return bar;
}
