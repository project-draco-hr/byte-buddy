{
  Class<? extends Annotation> typeAnnotationType=(Class<? extends Annotation>)Class.forName(TYPE_VARIABLE_NAME);
  MethodDescription.InDefinedShape value=new TypeDescription.ForLoadedType(typeAnnotationType).getDeclaredMethods().filter(named(VALUE)).getOnly();
  Class<?> type=createPlain().typeVariable(FOO).annotateTypeVariable(AnnotationDescription.Builder.ofType(typeAnnotationType).define(VALUE,INTEGER_VALUE).build()).typeVariable(BAR,TypeDescription.Generic.Builder.typeVariable(FOO).build(AnnotationDescription.Builder.ofType(typeAnnotationType).define(VALUE,INTEGER_VALUE * 3).build())).annotateTypeVariable(AnnotationDescription.Builder.ofType(typeAnnotationType).define(VALUE,INTEGER_VALUE * 2).build()).make().load(typeAnnotationType.getClassLoader(),ClassLoadingStrategy.Default.CHILD_FIRST).getLoaded();
  assertThat(type.getTypeParameters().length,is(2));
  assertThat(type.getTypeParameters()[0].getBounds().length,is(1));
  assertThat(type.getTypeParameters()[0].getBounds()[0],is((Object)Object.class));
  assertThat(type.getTypeParameters()[1].getBounds().length,is(1));
  assertThat(type.getTypeParameters()[1].getBounds()[0],is((Object)type.getTypeParameters()[0]));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveTypeVariable(type.getTypeParameters()[0]).asList().size(),is(1));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveTypeVariable(type.getTypeParameters()[0]).asList().ofType(typeAnnotationType).getValue(value,Integer.class),is(INTEGER_VALUE));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveTypeVariable(type.getTypeParameters()[1]).asList().size(),is(1));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveTypeVariable(type.getTypeParameters()[1]).asList().ofType(typeAnnotationType).getValue(value,Integer.class),is(INTEGER_VALUE * 2));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveTypeVariable(type.getTypeParameters()[1]).ofTypeVariableBoundType(0).asList().size(),is(1));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveTypeVariable(type.getTypeParameters()[1]).ofTypeVariableBoundType(0).asList().ofType(typeAnnotationType).getValue(value,Integer.class),is(INTEGER_VALUE * 3));
}
