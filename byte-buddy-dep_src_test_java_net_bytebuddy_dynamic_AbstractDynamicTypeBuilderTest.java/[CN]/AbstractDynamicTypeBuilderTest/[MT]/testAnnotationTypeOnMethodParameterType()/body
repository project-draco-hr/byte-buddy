{
  Class<? extends Annotation> typeAnnotationType=(Class<? extends Annotation>)Class.forName(TYPE_VARIABLE_NAME);
  MethodDescription.InDefinedShape value=new TypeDescription.ForLoadedType(typeAnnotationType).getDeclaredMethods().filter(named(VALUE)).getOnly();
  Method method=createPlain().merge(TypeManifestation.ABSTRACT).defineMethod(FOO,void.class).withParameters(TypeDescription.Generic.Builder.rawType(Object.class).build(AnnotationDescription.Builder.ofType(typeAnnotationType).define(VALUE,INTEGER_VALUE).build())).withoutCode().make().load(typeAnnotationType.getClassLoader(),ClassLoadingStrategy.Default.CHILD_FIRST).getLoaded().getDeclaredMethod(FOO,Object.class);
  assertThat(method.getParameterTypes().length,is(1));
  assertThat(method.getParameterTypes()[0],is((Object)Object.class));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveParameterType(method,0).asList().size(),is(1));
  assertThat(TypeDescription.Generic.AnnotationReader.DISPATCHER.resolveParameterType(method,0).asList().ofType(typeAnnotationType).getValue(value).resolve(Integer.class),is(INTEGER_VALUE));
}
