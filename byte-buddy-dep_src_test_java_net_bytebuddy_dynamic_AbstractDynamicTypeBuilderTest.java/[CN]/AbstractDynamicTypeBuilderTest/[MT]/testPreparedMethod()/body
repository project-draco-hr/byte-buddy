{
  ClassLoader classLoader=new ByteArrayClassLoader(null,ClassFileExtraction.of(SampleAnnotation.class),DEFAULT_PROTECTION_DOMAIN,AccessController.getContext(),ByteArrayClassLoader.PersistenceHandler.LATENT,PackageDefinitionStrategy.NoOp.INSTANCE);
  Class<?> type=createPlain().defineMethod(BAR,String.class,Collections.<Class<?>>emptyList(),Visibility.PUBLIC).intercept(new PreparedMethod()).make().load(classLoader,ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  assertThat(type.getDeclaredMethods().length,is(2));
  assertThat(type.getDeclaredMethod(FOO,Object.class).getName(),is(FOO));
  assertEquals(Object.class,type.getDeclaredMethod(FOO,Object.class).getReturnType());
  assertThat(type.getDeclaredMethod(FOO,Object.class).getParameterTypes().length,is(1));
  assertEquals(Object.class,type.getDeclaredMethod(FOO,Object.class).getParameterTypes()[0]);
  assertThat(type.getDeclaredMethod(FOO,Object.class).getModifiers(),is(MODIFIERS));
  assertThat(type.getDeclaredMethod(FOO,Object.class).getAnnotations().length,is(1));
  Annotation methodAnnotation=type.getDeclaredMethod(FOO,Object.class).getAnnotations()[0];
  assertThat(methodAnnotation.annotationType().getName(),is(SampleAnnotation.class.getName()));
  Method methodMethod=methodAnnotation.annotationType().getDeclaredMethod(FOO);
  assertThat(methodMethod.invoke(methodAnnotation),is((Object)BAR));
  assertThat(type.getDeclaredMethod(FOO,Object.class).getParameterAnnotations()[0].length,is(1));
  Annotation parameterAnnotation=type.getDeclaredMethod(FOO,Object.class).getParameterAnnotations()[0][0];
  assertThat(parameterAnnotation.annotationType().getName(),is(SampleAnnotation.class.getName()));
  Method parameterMethod=parameterAnnotation.annotationType().getDeclaredMethod(FOO);
  assertThat(parameterMethod.invoke(parameterAnnotation),is((Object)QUX));
}
