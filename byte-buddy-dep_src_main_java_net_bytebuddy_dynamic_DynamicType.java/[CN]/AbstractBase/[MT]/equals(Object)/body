{
  if (this == other)   return true;
  if (other == null || getClass() != other.getClass())   return false;
  AbstractBase that=(AbstractBase)other;
  return modifiers == that.modifiers && attributeAppender.equals(that.attributeAppender) && classFileVersion.equals(that.classFileVersion) && typeInitializer.equals(that.typeInitializer) && classVisitorWrapper.equals(that.classVisitorWrapper) && defaultFieldAttributeAppenderFactory.equals(that.defaultFieldAttributeAppenderFactory) && defaultMethodAttributeAppenderFactory.equals(that.defaultMethodAttributeAppenderFactory) && fieldRegistry.equals(that.fieldRegistry) && fieldTokens.equals(that.fieldTokens) && ignoredMethods.equals(that.ignoredMethods) && interfaceTypes.equals(that.interfaceTypes) && methodGraphCompiler.equals(that.methodGraphCompiler) && methodRegistry.equals(that.methodRegistry) && methodTokens.equals(that.methodTokens) && namingStrategy.equals(that.namingStrategy) && implementationContextFactory.equals(that.implementationContextFactory) && auxiliaryTypeNamingStrategy.equals(that.auxiliaryTypeNamingStrategy);
}
