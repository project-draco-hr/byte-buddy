{
  when(methodDescription.getInternalName()).thenReturn(FOO);
  when(methodDescription.getDescriptor()).thenReturn(BAR);
  when(methodDescription.getGenericSignature()).thenReturn(QUX);
  when(methodDescription.getExceptionTypes()).thenReturn(exceptionTypes);
  when(methodDescription.getAdjustedModifiers(anyBoolean())).thenReturn(MODIFIERS);
  when(exceptionTypes.asErasures()).thenReturn(rawExceptionTypes);
  when(rawExceptionTypes.toInternalNames()).thenReturn(new String[]{BAZ});
  when(classVisitor.visitMethod(MODIFIERS,FOO,BAR,QUX,new String[]{BAZ})).thenReturn(methodVisitor);
  when(methodDescription.getParameters()).thenReturn((ParameterList)new ParameterList.Explicit<ParameterDescription>(Collections.singletonList(parameterDescription)));
  when(parameterDescription.getName()).thenReturn(FOO);
  when(parameterDescription.getModifiers()).thenReturn(MODIFIERS);
  when(methodVisitor.visitAnnotationDefault()).thenReturn(annotationVisitor);
  when(byteCodeAppender.apply(methodVisitor,implementationContext,methodDescription)).thenReturn(new ByteCodeAppender.Size(ONE,TWO));
  when(otherAppender.apply(methodVisitor,implementationContext,methodDescription)).thenReturn(new ByteCodeAppender.Size(ONE * MULTIPLIER,TWO * MULTIPLIER));
  when(annotationValueFilterFactory.on(methodDescription)).thenReturn(valueFilter);
}
