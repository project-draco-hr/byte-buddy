{
  Class<?> foo=new InlineDynamicTypeBuilder<Foo>(ClassFileVersion.forCurrentJavaVersion(),new NamingStrategy.Fixed(FOOBAR),new TypeDescription.ForLoadedType(Foo.class),new TypeList.ForLoadedType(Arrays.<Class<?>>asList(Serializable.class)),Opcodes.ACC_PUBLIC,TypeAttributeAppender.NoOp.INSTANCE,isDeclaredBy(Object.class),BridgeMethodResolver.Simple.Factory.FAIL_FAST,new ClassVisitorWrapper.Chain(),new FieldRegistry.Default(),new MethodRegistry.Default(),MethodLookupEngine.Default.Factory.INSTANCE,FieldAttributeAppender.NoOp.INSTANCE,MethodAttributeAppender.NoOp.INSTANCE,ClassFileLocator.Default.CLASS_PATH,InlineDynamicTypeBuilder.TargetHandler.ForSubclassInstrumentation.INSTANCE).make().load(getClass().getClassLoader(),ClassLoadingStrategy.Default.WRAPPER).getLoaded();
  assertThat(foo.getName(),is(FOOBAR));
  assertThat(foo.getModifiers(),is(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC));
  assertThat(foo.getAnnotation(Bar.class),notNullValue());
  assertThat(Serializable.class.isAssignableFrom(foo),is(true));
  assertThat(foo.getDeclaredFields().length,is(1));
  assertThat(foo.getDeclaredField(FOO).getModifiers(),is(Opcodes.ACC_PRIVATE | Opcodes.ACC_FINAL));
  assertThat(foo.getDeclaredField(FOO).getAnnotation(Bar.class),notNullValue());
  assertEquals(String.class,foo.getDeclaredField(FOO).getType());
  assertThat(foo.getDeclaredMethods().length,is(1));
  assertThat(foo.getDeclaredMethod(FOO).getModifiers(),is(Opcodes.ACC_PUBLIC));
  assertThat(foo.getDeclaredMethod(FOO).getAnnotation(Bar.class),notNullValue());
  assertEquals(String.class,foo.getDeclaredMethod(FOO).getReturnType());
  assertThat(foo.getDeclaredConstructors().length,is(1));
  assertThat(foo.getDeclaredConstructor().getModifiers(),is(Opcodes.ACC_PUBLIC));
  assertThat(foo.getDeclaredConstructor().getAnnotation(Bar.class),notNullValue());
  assertThat(foo.getDeclaredMethod(FOO).invoke(foo.newInstance()),is((Object)FOO));
}
