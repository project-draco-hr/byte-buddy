{
  ObjectPropertyAssertion.of(InlineDynamicTypeBuilder.class).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      return Collections.singletonList(new Object());
    }
  }
).apply();
  ObjectPropertyAssertion.of(InlineDynamicTypeBuilder.TargetHandler.Prepared.ForRebaseInstrumentation.class).refine(new ObjectPropertyAssertion.Refinement<DynamicType>(){
    @Override public void apply(    DynamicType mock){
      when(mock.getTypeDescription()).thenReturn(Mockito.mock(TypeDescription.class));
    }
  }
).refine(new ObjectPropertyAssertion.Refinement<RandomString>(){
    @Override public void apply(    RandomString mock){
      when(mock.nextString()).thenReturn(FOO + System.identityHashCode(mock));
    }
  }
).apply();
  ObjectPropertyAssertion.of(InlineDynamicTypeBuilder.TargetHandler.ForRedefinitionInstrumentation.class).apply();
  ObjectPropertyAssertion.of(InlineDynamicTypeBuilder.TargetHandler.ForRebaseInstrumentation.class).apply();
  ObjectPropertyAssertion.of(InlineDynamicTypeBuilder.TargetHandler.Prepared.ForRebaseInstrumentation.MethodRebaseDelegation.class).apply();
  ObjectPropertyAssertion.of(InlineDynamicTypeBuilder.TargetHandler.Prepared.ForRebaseInstrumentation.MethodRebaseDelegation.Factory.class).apply();
}
