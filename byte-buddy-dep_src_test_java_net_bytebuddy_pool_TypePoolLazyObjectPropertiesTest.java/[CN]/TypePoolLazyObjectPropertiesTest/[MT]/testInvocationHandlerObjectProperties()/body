{
  final Iterator<Class<?>> typeIterator=Arrays.<Class<?>>asList(FirstSample.class,SecondSample.class).iterator();
  ObjectPropertyAssertion.of(TypePool.LazyTypeDescription.AnnotationInvocationHandler.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return typeIterator.next();
    }
  }
).refine(new ObjectPropertyAssertion.Refinement<Map<?,?>>(){
    @Override public void apply(    Map<?,?> mock){
      when(mock.get(Mockito.any(String.class))).thenReturn(Mockito.mock(TypePool.LazyTypeDescription.AnnotationValue.class));
    }
  }
).apply();
  final Iterator<Method> methodIterator=Arrays.asList(Object.class.getDeclaredMethods()).iterator();
  ObjectPropertyAssertion.of(TypePool.LazyTypeDescription.AnnotationInvocationHandler.ResolvedAnnotationValue.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methodIterator.next();
    }
  }
).apply();
}
