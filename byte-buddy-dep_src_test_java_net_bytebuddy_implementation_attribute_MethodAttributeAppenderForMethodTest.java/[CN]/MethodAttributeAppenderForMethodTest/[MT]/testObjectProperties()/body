{
  final Iterator<Method> methods=Arrays.asList(MethodSample.class.getDeclaredMethod(FOO),MethodSample.class.getDeclaredMethod(FOO,Void.class),MethodSample.class.getDeclaredMethod(FOO),MethodSample.class.getDeclaredMethod(FOO,Void.class)).iterator();
  Constructor<?> first=ConstructorSample.class.getDeclaredConstructor(), second=ConstructorSample.class.getDeclaredConstructor(Void.class);
  final Iterator<Constructor<?>> constructors=Arrays.asList(first,second,first,second).iterator();
  ObjectPropertyAssertion.of(MethodAttributeAppender.ForMethod.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methods.next();
    }
  }
).create(new ObjectPropertyAssertion.Creator<Constructor<?>>(){
    @Override public Constructor<?> create(){
      return constructors.next();
    }
  }
).apply();
}
