{
  TypeDescription returnType=mock(TypeDescription.class);
  when(returnType.asRawType()).thenReturn(returnType);
  when(returnType.accept(Mockito.any(GenericTypeDescription.Visitor.class))).thenReturn(returnType);
  TypeDescription parameterType=mock(TypeDescription.class);
  when(parameterType.asRawType()).thenReturn(parameterType);
  when(parameterType.accept(Mockito.any(GenericTypeDescription.Visitor.class))).thenReturn(parameterType);
  TypeDescription exceptionType=mock(TypeDescription.class);
  when(exceptionType.asRawType()).thenReturn(exceptionType);
  when(exceptionType.accept(Mockito.any(GenericTypeDescription.Visitor.class))).thenReturn(exceptionType);
  when(returnType.getName()).thenReturn(FOO);
  when(parameterType.getName()).thenReturn(QUX);
  when(parameterType.getStackSize()).thenReturn(StackSize.ZERO);
  when(exceptionType.getName()).thenReturn(BAZ);
  InstrumentedType instrumentedType=makePlainInstrumentedType();
  assertThat(instrumentedType.getDeclaredFields().size(),is(0));
  instrumentedType=instrumentedType.withMethod(BAR,returnType,Collections.singletonList(parameterType),Collections.singletonList(exceptionType),Opcodes.ACC_PUBLIC);
  assertThat(instrumentedType.getDeclaredMethods().size(),is(1));
  MethodDescription methodDescription=instrumentedType.getDeclaredMethods().get(0);
  assertThat(methodDescription.getReturnType(),is((GenericTypeDescription)returnType));
  assertThat(methodDescription.getParameters().size(),is(1));
  assertThat(methodDescription.getParameters().asTypeList(),is(Collections.<GenericTypeDescription>singletonList(parameterType)));
  assertThat(methodDescription.getExceptionTypes().size(),is(1));
  assertThat(methodDescription.getExceptionTypes(),is(Collections.<GenericTypeDescription>singletonList(exceptionType)));
  assertThat(methodDescription.getModifiers(),is(Opcodes.ACC_PUBLIC));
  assertThat(methodDescription.getName(),is(BAR));
  assertThat(methodDescription.getDeclaringType(),sameInstance((GenericTypeDescription)instrumentedType));
}
