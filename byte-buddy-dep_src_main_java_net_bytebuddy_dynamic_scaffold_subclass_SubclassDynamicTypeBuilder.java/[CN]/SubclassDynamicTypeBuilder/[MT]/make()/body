{
  InstrumentedType instrumentedType=new SubclassInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy);
  MethodRegistry.Compiled compiledMethodRegistry=constructorStrategy.inject(methodRegistry,defaultMethodAttributeAppenderFactory).prepare(applyConstructorStrategy(applyRecordedMembersTo(instrumentedType)),methodLookupEngineFactory.make(classFileVersion.isSupportsDefaultMethods()),new InstrumentableMatcher(ignoredMethods)).compile(new SubclassInstrumentationTarget.Factory(bridgeMethodResolverFactory,SubclassInstrumentationTarget.OriginTypeIdentifier.SUPER_TYPE));
  return TypeWriter.Default.<T>forCreation(compiledMethodRegistry,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),auxiliaryTypeNamingStrategy,classVisitorWrapperChain,attributeAppender,classFileVersion).make();
}
