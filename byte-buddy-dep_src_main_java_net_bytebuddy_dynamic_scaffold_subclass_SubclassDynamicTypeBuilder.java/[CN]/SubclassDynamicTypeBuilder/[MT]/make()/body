{
  MethodRegistry.Prepared preparedMethodRegistry=constructorStrategy.inject(methodRegistry,defaultMethodAttributeAppenderFactory).prepare(applyConstructorStrategy(applyRecordedMembersTo(new SubclassInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy))));
  MethodRegistry.Compiled compiledMethodRegistry=preparedMethodRegistry.compile(new SubclassInstrumentationTarget.Factory(bridgeMethodResolverFactory),methodLookupEngineFactory.make(classFileVersion),MethodRegistry.Compiled.Entry.Skip.INSTANCE);
  TypeExtensionDelegate typeExtensionDelegate=new TypeExtensionDelegate(preparedMethodRegistry.getInstrumentedType(),classFileVersion);
  return new TypeWriter.Builder<T>(preparedMethodRegistry.getInstrumentedType(),preparedMethodRegistry.getLoadedTypeInitializer(),typeExtensionDelegate,classFileVersion,TypeWriter.Builder.ClassWriterProvider.CleanCopy.INSTANCE).build(classVisitorWrapperChain).attributeType(attributeAppender).members().writeFields(preparedMethodRegistry.getInstrumentedType().getDeclaredFields(),fieldRegistry.compile(preparedMethodRegistry.getInstrumentedType(),TypeWriter.FieldPool.Entry.NoOp.INSTANCE)).writeMethods(compiledMethodRegistry.getFinding().getInvokableMethods().filter(isOverridable().and(not(ignoredMethods)).or(isDeclaredBy(preparedMethodRegistry.getInstrumentedType()))),compiledMethodRegistry).writeMethods(Collections.singletonList(MethodDescription.Latent.typeInitializerOf(preparedMethodRegistry.getInstrumentedType())),typeExtensionDelegate.wrapForTypeInitializerInterception(compiledMethodRegistry)).writeMethods(typeExtensionDelegate.getRegisteredAccessors(),typeExtensionDelegate).writeFields(typeExtensionDelegate.getRegisteredFieldCaches(),typeExtensionDelegate).make();
}
