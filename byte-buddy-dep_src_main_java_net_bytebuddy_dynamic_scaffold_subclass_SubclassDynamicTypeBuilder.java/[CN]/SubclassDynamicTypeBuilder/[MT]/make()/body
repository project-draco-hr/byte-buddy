{
  MethodRegistry.Compiled compiledMethodRegistry=constructorStrategy.inject(methodRegistry,defaultMethodAttributeAppenderFactory).compile(applyConstructorStrategy(applyRecordedMembersTo(new SubclassInstrumentedType(classFileVersion,targetType,interfaceTypes,modifiers,namingStrategy))),methodLookupEngineFactory.make(classFileVersion),new SubclassInstrumentationTarget.Factory(bridgeMethodResolverFactory),MethodRegistry.Compiled.Entry.Skip.INSTANCE);
  MethodLookupEngine.Finding finding=compiledMethodRegistry.getFinding();
  TypeExtensionDelegate typeExtensionDelegate=new TypeExtensionDelegate(finding.getTypeDescription(),classFileVersion);
  return new TypeWriter.Builder<T>(finding.getTypeDescription(),compiledMethodRegistry.getLoadedTypeInitializer(),typeExtensionDelegate,classFileVersion,TypeWriter.Builder.ClassWriterProvider.CleanCopy.INSTANCE).build(classVisitorWrapperChain).attributeType(attributeAppender).members().writeFields(finding.getTypeDescription().getDeclaredFields(),fieldRegistry.compile(finding.getTypeDescription(),TypeWriter.FieldPool.Entry.NoOp.INSTANCE)).writeMethods(finding.getInvokableMethods().filter(isOverridable().and(not(ignoredMethods)).or(isDeclaredBy(finding.getTypeDescription()))),compiledMethodRegistry).writeMethods(Collections.singletonList(MethodDescription.Latent.typeInitializerOf(finding.getTypeDescription())),typeExtensionDelegate.wrapForTypeInitializerInterception(compiledMethodRegistry)).writeMethods(typeExtensionDelegate.getRegisteredAccessors(),typeExtensionDelegate).writeFields(typeExtensionDelegate.getRegisteredFieldCaches(),typeExtensionDelegate).make();
}
