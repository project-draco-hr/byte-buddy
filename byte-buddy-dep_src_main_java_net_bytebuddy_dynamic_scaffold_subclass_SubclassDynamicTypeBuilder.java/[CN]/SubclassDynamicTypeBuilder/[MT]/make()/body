{
  MethodRegistry.Compiled compiledMethodRegistry=constructorStrategy.inject(methodRegistry,defaultMethodAttributeAppenderFactory).compile(applyRecordedMembersTo(new SubclassInstrumentedType(classFileVersion,superType,interfaceTypes,modifiers,namingStrategy)),methodLookupEngineFactory.make(classFileVersion),new SubclassInstrumentationTarget.Factory(bridgeMethodResolverFactory),MethodRegistry.Compiled.Entry.Skip.INSTANCE);
  MethodLookupEngine.Finding finding=compiledMethodRegistry.getFinding();
  TypeExtensionDelegate typeExtensionDelegate=new TypeExtensionDelegate(finding.getTypeDescription(),classFileVersion);
  return new TypeWriter.Builder<T>(finding.getTypeDescription(),compiledMethodRegistry.getTypeInitializer(),typeExtensionDelegate,classFileVersion).build(classVisitorWrapperChain).attributeType(attributeAppender).fields().write(finding.getTypeDescription().getDeclaredFields(),fieldRegistry.compile(finding.getTypeDescription(),TypeWriter.FieldPool.Entry.NoOp.INSTANCE)).methods().write(finding.getInvokableMethods().filter(isOverridable().and(not(ignoredMethods)).or(isDeclaredBy(finding.getTypeDescription()))),compiledMethodRegistry).write(typeExtensionDelegate.getRegisteredAccessors(),typeExtensionDelegate).make();
}
