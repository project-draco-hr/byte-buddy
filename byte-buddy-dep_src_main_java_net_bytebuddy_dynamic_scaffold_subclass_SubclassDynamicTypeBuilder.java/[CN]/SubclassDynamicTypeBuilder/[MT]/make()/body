{
  MethodRegistry.Compiled compiledMethodRegistry=constructorStrategy.inject(methodRegistry,defaultMethodAttributeAppenderFactory).prepare(applyConstructorStrategy(new InstrumentedType.Default(namingStrategy.name(new NamingStrategy.UnnamedType.Default(targetType,interfaceTypes,modifiers,classFileVersion)),modifiers,Collections.<GenericTypeDescription>emptyList(),targetType,interfaceTypes,fieldTokens,methodTokens,Collections.<AnnotationDescription>emptyList(),InstrumentedType.TypeInitializer.None.INSTANCE,LoadedTypeInitializer.NoOp.INSTANCE)),methodLookupEngineFactory.make(classFileVersion.isSupportsDefaultMethods()),new InstrumentableMatcher(ignoredMethods)).compile(new SubclassImplementationTarget.Factory(bridgeMethodResolverFactory,SubclassImplementationTarget.OriginTypeIdentifier.SUPER_TYPE));
  return TypeWriter.Default.<T>forCreation(compiledMethodRegistry,fieldRegistry.prepare(compiledMethodRegistry.getInstrumentedType()).compile(TypeWriter.FieldPool.Entry.NoOp.INSTANCE),auxiliaryTypeNamingStrategy,classVisitorWrapperChain,attributeAppender,classFileVersion).make();
}
