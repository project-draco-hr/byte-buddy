{
  TypeDescription objectType=new TypeDescription.ForLoadedType(Object.class);
  TypeDescription classOverridingToStringAbstract=new TypeDescription.ForLoadedType(ClassOverridingToStringAbstract.class);
  TypeDescription classReOverridingToStringManifest=new TypeDescription.ForLoadedType(ClassReOverridingToStringManifest.class);
  MethodLookupEngine.Finding finding=methodLookupEngine.process(classReOverridingToStringManifest);
  assertThat(finding.getTypeDescription(),is(classReOverridingToStringManifest));
  assertThat(finding.getInvokableMethods(),containsAllOf(classReOverridingToStringManifest.getDeclaredMethods()));
  assertThat(finding.getInvokableMethods(),containsAllOf(objectType.getDeclaredMethods().filter(isVirtualTo(classReOverridingToStringManifest)).filter(ElementMatchers.not(named(TO_STRING)))));
  assertThat(finding.getInvokableMethods().filter(named(TO_STRING)).getOnly().isSpecializableFor(classReOverridingToStringManifest),is(true));
  assertThat(finding.getInvokableMethods().filter(named(TO_STRING)).getOnly().isSpecializableFor(classOverridingToStringAbstract),is(false));
  assertThat(finding.getInvokableMethods().filter(named(TO_STRING)).getOnly().isSpecializableFor(objectType),is(true));
  assertThat(finding.getInvokableMethods().size(),is(classReOverridingToStringManifest.getDeclaredMethods().size() + objectType.getDeclaredMethods().filter(isVirtualTo(classReOverridingToStringManifest)).size() - 1));
  assertThat(finding.getInvokableDefaultMethods().size(),is(0));
}
