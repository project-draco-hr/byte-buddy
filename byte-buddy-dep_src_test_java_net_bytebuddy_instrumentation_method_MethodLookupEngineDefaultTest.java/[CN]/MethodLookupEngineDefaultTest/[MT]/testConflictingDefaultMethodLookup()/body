{
  TypeDescription singleDefaultMethodClass=findType(SINGLE_DEFAULT_METHOD_CONFLICTING_CLASS);
  TypeDescription singleDefaultMethodInterface=findType(SINGLE_DEFAULT_METHOD_INTERFACE);
  TypeDescription singleConflictingDefaultMethodInterface=findType(SINGLE_DEFAULT_METHOD_CONFLICTING_INTERFACE);
  MethodLookupEngine.Finding finding=methodLookupEngine.process(singleDefaultMethodClass);
  assertThat(finding.getTypeDescription(),is(singleDefaultMethodClass));
  assertThat(finding.getInvokableDefaultMethods().size(),is(2));
  MethodDescription firstInterfaceMethod=singleDefaultMethodInterface.getDeclaredMethods().getOnly();
  MethodDescription secondInterfaceMethod=singleConflictingDefaultMethodInterface.getDeclaredMethods().getOnly();
  assertThat(finding.getInvokableMethods(),CoreMatchers.not(hasItems(firstInterfaceMethod,secondInterfaceMethod)));
  Set<MethodDescription> singleDefaultMethodInterfaceMethods=finding.getInvokableDefaultMethods().get(singleDefaultMethodInterface);
  assertThat(singleDefaultMethodInterfaceMethods.size(),is(1));
  assertThat(singleDefaultMethodInterfaceMethods,hasItem(firstInterfaceMethod));
  Set<MethodDescription> singleConflictingDefaultMethodInterfaceMethods=finding.getInvokableDefaultMethods().get(singleConflictingDefaultMethodInterface);
  assertThat(singleConflictingDefaultMethodInterfaceMethods.size(),is(1));
  assertThat(singleConflictingDefaultMethodInterfaceMethods,hasItem(secondInterfaceMethod));
}
