{
  TypeDescription singleDefaultMethodAmbiguousInheritanceClass=findType(SINGLE_DEFAULT_METHOD_AMBIGUOUS_INHERITANCE_CLASS);
  TypeDescription singleDefaultMethodNonOverridingInterface=findType(SINGLE_DEFAULT_METHOD_NON_OVERRIDING_INTERFACE);
  TypeDescription singleDefaultMethodAmbiguousInheritanceInterface=findType(SINGLE_DEFAULT_METHOD_AMBIGUOUS_INHERITANCE_INTERFACE);
  TypeDescription singleDefaultMethodInterface=findType(SINGLE_DEFAULT_METHOD_INTERFACE);
  MethodLookupEngine.Finding finding=methodLookupEngine.process(singleDefaultMethodAmbiguousInheritanceClass);
  assertThat(finding.getLookedUpType(),is(singleDefaultMethodAmbiguousInheritanceClass));
  MethodDescription interfaceMethod=singleDefaultMethodInterface.getDeclaredMethods().getOnly();
  assertThat(finding.getInvokableMethods(),hasItem(interfaceMethod));
  assertThat(finding.getInvokableDefaultMethods().size(),is(2));
  assertThat(finding.getInvokableDefaultMethods().get(singleDefaultMethodNonOverridingInterface).size(),is(1));
  assertThat(finding.getInvokableDefaultMethods().get(singleDefaultMethodNonOverridingInterface),hasItem(interfaceMethod));
  assertThat(finding.getInvokableDefaultMethods().get(singleDefaultMethodAmbiguousInheritanceInterface).size(),is(1));
  assertThat(finding.getInvokableDefaultMethods().get(singleDefaultMethodAmbiguousInheritanceInterface),hasItem(interfaceMethod));
}
