{
  when(stackManipulation.isValid()).thenReturn(true);
  TypeDescription firstSourceType=mock(TypeDescription.class);
  TypeDescription secondSourceType=mock(TypeDescription.class);
  when(sourceTypeList.iterator()).thenReturn(Arrays.asList(firstSourceType,secondSourceType).iterator());
  when(source.isStatic()).thenReturn(false);
  TypeDescription targetType=mock(TypeDescription.class);
  TypeDescription componentType=mock(TypeDescription.class);
  when(targetType.isArray()).thenReturn(true);
  when(targetType.getComponentType()).thenReturn(componentType);
  when(componentType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(targetTypeList.get(1)).thenReturn(targetType);
  when(targetTypeList.size()).thenReturn(2);
  when(target.getParameterAnnotations()).thenReturn(targetAnnotations);
  AnnotationDrivenBinder.ArgumentBinder.IdentifiedBinding<?> identifiedBinding=AllArguments.Binder.INSTANCE.bind(annotation,1,source,target,instrumentedType,assigner);
  assertThat(identifiedBinding.isValid(),is(true));
  verify(source,atLeast(1)).getParameterTypes();
  verify(source,atLeast(1)).isStatic();
  verify(target,atLeast(1)).getParameterTypes();
  verify(target,atLeast(1)).getParameterAnnotations();
  verify(assigner).assign(firstSourceType,componentType,considerRuntimeType);
  verify(assigner).assign(secondSourceType,componentType,considerRuntimeType);
  verifyNoMoreInteractions(assigner);
}
