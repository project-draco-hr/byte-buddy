{
switch (targets.size()) {
case 1:
    return targets.get(ONLY);
case 2:
{
    BoundMethodDelegation left=targets.get(LEFT);
    BoundMethodDelegation right=targets.get(RIGHT);
switch (ambiguityResolver.resolve(source,left,right)) {
case LEFT:
      return left;
case RIGHT:
    return right;
case AMBIGUOUS:
case UNKNOWN:
  throw new IllegalArgumentException("Could not resolve ambiguous delegation to " + left + " or "+ right);
default :
throw new AssertionError();
}
}
default :
{
BoundMethodDelegation left=targets.get(LEFT);
BoundMethodDelegation right=targets.get(RIGHT);
switch (ambiguityResolver.resolve(source,left,right)) {
case LEFT:
targets.remove(RIGHT);
return resolve(source,targets);
case RIGHT:
targets.remove(LEFT);
return resolve(source,targets);
case AMBIGUOUS:
case UNKNOWN:
targets.remove(LEFT);
targets.remove(RIGHT);
BoundMethodDelegation subResult=resolve(source,targets);
switch (ambiguityResolver.resolve(source,left,subResult).merge(ambiguityResolver.resolve(source,right,subResult))) {
case RIGHT:
return subResult;
case LEFT:
case AMBIGUOUS:
case UNKNOWN:
throw new IllegalArgumentException("Could not resolve ambiguous delegation to " + left + " or "+ right);
default :
throw new AssertionError();
}
default :
throw new AssertionError();
}
}
}
}
