{
  when(superMethod.isSpecializableFor(superType)).thenReturn(true);
  Instrumentation.SpecialMethodInvocation specialMethodInvocation=instrumentationTarget.invokeSuper(superMethod,methodLookup);
  assertThat(specialMethodInvocation.isValid(),is(true));
  assertThat(specialMethodInvocation.getMethodDescription(),is(superMethod));
  assertThat(specialMethodInvocation.getTypeDescription(),is(superType));
  MethodVisitor methodVisitor=mock(MethodVisitor.class);
  Instrumentation.Context instrumentationContext=mock(Instrumentation.Context.class);
  StackManipulation.Size size=specialMethodInvocation.apply(methodVisitor,instrumentationContext);
  verify(methodVisitor).visitMethodInsn(Opcodes.INVOKESPECIAL,QUX,BAZ,FOOBAR,false);
  verifyNoMoreInteractions(methodVisitor);
  verifyZeroInteractions(instrumentationContext);
  assertThat(size.getSizeImpact(),is(0));
  assertThat(size.getMaximalSize(),is(0));
  verifyZeroInteractions(methodFlatteningResolver);
}
