{
  DexProcessor.Conversion conversion=dexProcessor.create();
  for (  Map.Entry<TypeDescription,byte[]> entry : types.entrySet()) {
    conversion.register(entry.getKey().getName(),entry.getValue());
  }
  File zipFile=new File(privateDirectory,randomString.nextString() + JAR_FILE_EXTENSION);
  try {
    if (!zipFile.createNewFile()) {
      throw new IllegalStateException("Cannot create " + zipFile);
    }
    JarOutputStream zipOutputStream=new JarOutputStream(new FileOutputStream(zipFile));
    try {
      zipOutputStream.putNextEntry(new JarEntry(DEX_CLASS_FILE));
      conversion.drainTo(zipOutputStream);
      zipOutputStream.closeEntry();
    }
  finally {
      zipOutputStream.close();
    }
    ClassLoader dexClassLoader=dexProcessor.makeClassLoader(zipFile,privateDirectory,classLoader);
    Map<TypeDescription,Class<?>> loadedTypes=new HashMap<TypeDescription,Class<?>>();
    for (    TypeDescription typeDescription : types.keySet()) {
      try {
        loadedTypes.put(typeDescription,dexClassLoader.loadClass(typeDescription.getName()));
      }
 catch (      ClassNotFoundException exception) {
        throw new IllegalStateException("Cannot load " + typeDescription,exception);
      }
    }
    return loadedTypes;
  }
 catch (  IOException exception) {
    throw new IllegalStateException("Cannot write to zip file " + zipFile,exception);
  }
 finally {
    if (!zipFile.delete()) {
      Logger.getLogger("net.bytebuddy").warning("Could not delete " + zipFile);
    }
  }
}
