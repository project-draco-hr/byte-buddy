{
  Class<? extends Annotation> typeAnnotation=(Class<? extends Annotation>)Class.forName(TYPE_ANNOTATION);
  MethodDescription.InDefinedShape value=new TypeDescription.ForLoadedType(typeAnnotation).getDeclaredMethods().getOnly();
  TypeDescription typeDescription=describe(Class.forName(TYPE_ANNOTATION_SAMPLES));
  TypeDescription.Generic t=typeDescription.getTypeVariables().filter(named(W)).getOnly();
  assertThat(t.getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(t.getDeclaredAnnotations().size(),is(1));
  assertThat(t.getDeclaredAnnotations().isAnnotationPresent(typeAnnotation),is(true));
  assertThat(t.getDeclaredAnnotations().ofType(typeAnnotation).getValue(value).resolve(Integer.class),is(13));
  assertThat(t.getUpperBounds().size(),is(1));
  assertThat(t.getUpperBounds().getOnly().getSort(),is(TypeDefinition.Sort.VARIABLE));
  assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().size(),is(1));
  assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().isAnnotationPresent(typeAnnotation),is(true));
  assertThat(t.getUpperBounds().getOnly().getDeclaredAnnotations().ofType(typeAnnotation).getValue(value).resolve(Integer.class),is(14));
}
