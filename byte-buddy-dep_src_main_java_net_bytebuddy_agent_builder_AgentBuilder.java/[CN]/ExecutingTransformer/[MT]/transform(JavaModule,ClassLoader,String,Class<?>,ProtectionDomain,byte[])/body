{
  if (internalTypeName == null) {
    return NO_TRANSFORMATION;
  }
  String binaryTypeName=internalTypeName.replace('/','.');
  try {
    ClassFileLocator classFileLocator=ClassFileLocator.Simple.of(binaryTypeName,binaryRepresentation,ClassFileLocator.ForClassLoader.of(classLoader));
    return transformation.resolve(descriptionStrategy.apply(binaryTypeName,classBeingRedefined,typeLocator,classLoader,classFileLocator),classLoader,module,classBeingRedefined,protectionDomain,ignoredTypeMatcher).apply(initializationStrategy,classFileLocator,typeStrategy,byteBuddy,nativeMethodStrategy,bootstrapInjectionStrategy,accessControlContext,listener);
  }
 catch (  Throwable throwable) {
    listener.onError(binaryTypeName,classLoader,module,throwable);
    return NO_TRANSFORMATION;
  }
 finally {
    listener.onComplete(binaryTypeName,classLoader,module);
  }
}
