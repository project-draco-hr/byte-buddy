{
  String binaryTypeName=internalTypeName.replace('/','.');
  try {
    BinaryLocator.Initialized initialized=binaryLocator.initialize(binaryTypeName,binaryRepresentation,classLoader);
    TypeDescription typeDescription=initialized.getTypePool().describe(binaryTypeName).resolve();
    for (    Transformation transformation : transformations) {
      if (transformation.matches(typeDescription,classLoader,classBeingRedefined,protectionDomain)) {
        byte[] transformed=transformation.apply(typeDescription,initialized,classLoader,protectionDomain,initializationStrategy,definitionHandler,byteBuddy,methodNameTransformer,bootstrapInjectionStrategy,accessControlContext);
        listener.onTransformation(typeDescription,null);
        return transformed;
      }
    }
    listener.onIgnored(binaryTypeName);
    return NO_TRANSFORMATION;
  }
 catch (  Throwable throwable) {
    listener.onError(binaryTypeName,throwable);
    return NO_TRANSFORMATION;
  }
 finally {
    listener.onComplete(binaryTypeName);
  }
}
