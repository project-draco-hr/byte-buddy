{
  DynamicType.Unloaded<?> dynamicType=initializationStrategy.apply(transformer.transform(typeStrategy.builder(typeDescription,byteBuddy,classFileLocator,methodNameTransformer.resolve()),typeDescription)).make();
  Map<TypeDescription,LoadedTypeInitializer> loadedTypeInitializers=dynamicType.getLoadedTypeInitializers();
  if (loadedTypeInitializers.size() > 1) {
    ClassInjector classInjector=classLoader == null ? bootstrapInjectionStrategy.make(protectionDomain) : new ClassInjector.UsingReflection(classLoader,protectionDomain,accessControlContext);
    for (    Map.Entry<TypeDescription,Class<?>> auxiliary : classInjector.inject(dynamicType.getRawAuxiliaryTypes()).entrySet()) {
      initializationStrategy.initialize(auxiliary.getValue(),loadedTypeInitializers.get(auxiliary.getKey()));
    }
  }
  initializationStrategy.register(typeDescription.getName(),classLoader,loadedTypeInitializers.get(dynamicType.getTypeDescription()));
  listener.onTransformation(typeDescription,dynamicType);
  return dynamicType.getBytes();
}
