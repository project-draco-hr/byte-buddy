{
  methodVisitor.visitCode();
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitInsn(Opcodes.ICONST_3);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,"java/lang/Integer");
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Integer","intValue","()I",false);
  methodVisitor.visitVarInsn(Opcodes.ISTORE,4);
  methodVisitor.visitInsn(Opcodes.ICONST_4);
  methodVisitor.visitVarInsn(Opcodes.ISTORE,5);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,4);
  methodVisitor.visitInsn(Opcodes.ICONST_2);
  methodVisitor.visitInsn(Opcodes.IAND);
  Label markerInterfaceLoop=new Label();
  methodVisitor.visitJumpInsn(Opcodes.IFEQ,markerInterfaceLoop);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,5);
  methodVisitor.visitIincInsn(5,1);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,"java/lang/Integer");
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Integer","intValue","()I",false);
  methodVisitor.visitVarInsn(Opcodes.ISTORE,7);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,7);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Class");
  methodVisitor.visitVarInsn(Opcodes.ASTORE,6);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,5);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,6);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,7);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/System","arraycopy","(Ljava/lang/Object;ILjava/lang/Object;II)V",false);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,5);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,7);
  methodVisitor.visitInsn(Opcodes.IADD);
  methodVisitor.visitVarInsn(Opcodes.ISTORE,5);
  Label markerInterfaceExit=new Label();
  methodVisitor.visitJumpInsn(Opcodes.GOTO,markerInterfaceExit);
  methodVisitor.visitLabel(markerInterfaceLoop);
  methodVisitor.visitFrame(Opcodes.F_APPEND,2,new Object[]{Opcodes.INTEGER,Opcodes.INTEGER},0,null);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Class");
  methodVisitor.visitVarInsn(Opcodes.ASTORE,6);
  methodVisitor.visitLabel(markerInterfaceExit);
  methodVisitor.visitFrame(Opcodes.F_APPEND,1,new Object[]{"[Ljava/lang/Class;"},0,null);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,4);
  methodVisitor.visitInsn(Opcodes.ICONST_4);
  methodVisitor.visitInsn(Opcodes.IAND);
  Label additionalBridgesLoop=new Label();
  methodVisitor.visitJumpInsn(Opcodes.IFEQ,additionalBridgesLoop);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,5);
  methodVisitor.visitIincInsn(5,1);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,"java/lang/Integer");
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Integer","intValue","()I",false);
  methodVisitor.visitVarInsn(Opcodes.ISTORE,8);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,8);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/invoke/MethodType");
  methodVisitor.visitVarInsn(Opcodes.ASTORE,7);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,5);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,7);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,8);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/System","arraycopy","(Ljava/lang/Object;ILjava/lang/Object;II)V",false);
  Label additionalBridgesExit=new Label();
  methodVisitor.visitJumpInsn(Opcodes.GOTO,additionalBridgesExit);
  methodVisitor.visitLabel(additionalBridgesLoop);
  methodVisitor.visitFrame(Opcodes.F_SAME,0,null,0,null);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/invoke/MethodType");
  methodVisitor.visitVarInsn(Opcodes.ASTORE,7);
  methodVisitor.visitLabel(additionalBridgesExit);
  methodVisitor.visitFrame(Opcodes.F_APPEND,1,new Object[]{"[Ljava/lang/invoke/MethodType;"},0,null);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,UNSAFE_CLASS,"getUnsafe","()L" + UNSAFE_CLASS + ";",false);
  methodVisitor.visitVarInsn(Opcodes.ASTORE,8);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,8);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodHandles$Lookup","lookupClass","()Ljava/lang/Class;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/ClassLoader","getSystemClassLoader","()Ljava/lang/ClassLoader;",false);
  methodVisitor.visitLdcInsn("net.bytebuddy.agent.builder.LambdaFactory");
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/ClassLoader","loadClass","(Ljava/lang/String;)Ljava/lang/Class;",false);
  methodVisitor.visitLdcInsn("make");
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,9);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Class");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/String;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_2);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_3);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_4);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_5);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,6);
  methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/Boolean","TYPE","Ljava/lang/Class;");
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,7);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/util/List;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,8);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/util/List;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Class","getDeclaredMethod","(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;",false);
  methodVisitor.visitInsn(Opcodes.ACONST_NULL);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,9);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Object");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_2);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_3);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_4);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_5);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitInsn(Opcodes.ICONST_2);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,6);
  methodVisitor.visitVarInsn(Opcodes.ILOAD,4);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  methodVisitor.visitInsn(Opcodes.IAND);
  Label callSiteConditional=new Label();
  methodVisitor.visitJumpInsn(Opcodes.IFEQ,callSiteConditional);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  Label callSiteAlternative=new Label();
  methodVisitor.visitJumpInsn(Opcodes.GOTO,callSiteAlternative);
  methodVisitor.visitLabel(callSiteConditional);
  methodVisitor.visitFrame(Opcodes.F_FULL,9,new Object[]{"java/lang/invoke/MethodHandles$Lookup","java/lang/String","java/lang/invoke/MethodType","[Ljava/lang/Object;",Opcodes.INTEGER,Opcodes.INTEGER,"[Ljava/lang/Class;","[Ljava/lang/invoke/MethodType;",UNSAFE_CLASS},7,new Object[]{UNSAFE_CLASS,"java/lang/Class","java/lang/reflect/Method",Opcodes.NULL,"[Ljava/lang/Object;","[Ljava/lang/Object;",Opcodes.INTEGER});
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitLabel(callSiteAlternative);
  methodVisitor.visitFrame(Opcodes.F_FULL,9,new Object[]{"java/lang/invoke/MethodHandles$Lookup","java/lang/String","java/lang/invoke/MethodType","[Ljava/lang/Object;",Opcodes.INTEGER,Opcodes.INTEGER,"[Ljava/lang/Class;","[Ljava/lang/invoke/MethodType;",UNSAFE_CLASS},8,new Object[]{UNSAFE_CLASS,"java/lang/Class","java/lang/reflect/Method",Opcodes.NULL,"[Ljava/lang/Object;","[Ljava/lang/Object;",Opcodes.INTEGER,Opcodes.INTEGER});
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/Boolean","valueOf","(Z)Ljava/lang/Boolean;",false);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,7);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,6);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/util/Arrays","asList","([Ljava/lang/Object;)Ljava/util/List;",false);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitIntInsn(Opcodes.BIPUSH,8);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,7);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/util/Arrays","asList","([Ljava/lang/Object;)Ljava/util/List;",false);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/reflect/Method","invoke","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",false);
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,"[B");
  methodVisitor.visitInsn(Opcodes.ACONST_NULL);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,UNSAFE_CLASS,"defineAnonymousClass","(Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class;",false);
  methodVisitor.visitVarInsn(Opcodes.ASTORE,9);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,8);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,9);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,UNSAFE_CLASS,"ensureClassInitialized","(Ljava/lang/Class;)V",false);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodType","parameterCount","()I",false);
  Label callSiteJump=new Label();
  methodVisitor.visitJumpInsn(Opcodes.IFNE,callSiteJump);
  methodVisitor.visitTypeInsn(Opcodes.NEW,"java/lang/invoke/ConstantCallSite");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodType","returnType","()Ljava/lang/Class;",false);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,9);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Class","getDeclaredConstructors","()[Ljava/lang/reflect/Constructor;",false);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Object");
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/reflect/Constructor","newInstance","([Ljava/lang/Object;)Ljava/lang/Object;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/invoke/MethodHandles","constant","(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/invoke/ConstantCallSite","<init>","(Ljava/lang/invoke/MethodHandle;)V",false);
  Label callSiteExit=new Label();
  methodVisitor.visitJumpInsn(Opcodes.GOTO,callSiteExit);
  methodVisitor.visitLabel(callSiteJump);
  methodVisitor.visitFrame(Opcodes.F_APPEND,1,new Object[]{"java/lang/Class"},0,null);
  methodVisitor.visitTypeInsn(Opcodes.NEW,"java/lang/invoke/ConstantCallSite");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/invoke/MethodHandles$Lookup","IMPL_LOOKUP","Ljava/lang/invoke/MethodHandles$Lookup;");
  methodVisitor.visitVarInsn(Opcodes.ALOAD,9);
  methodVisitor.visitLdcInsn("get$Lambda");
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodHandles$Lookup","findStatic","(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/invoke/ConstantCallSite","<init>","(Ljava/lang/invoke/MethodHandle;)V",false);
  methodVisitor.visitLabel(callSiteExit);
  methodVisitor.visitFrame(Opcodes.F_SAME1,0,null,1,new Object[]{"java/lang/invoke/CallSite"});
  methodVisitor.visitInsn(Opcodes.ARETURN);
  methodVisitor.visitMaxs(9,10);
  methodVisitor.visitEnd();
  return IGNORE_ORIGINAL;
}
