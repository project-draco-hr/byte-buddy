{
  int index=0;
  Map<List<Class<?>>,Throwable> failures=new HashMap<List<Class<?>>,Throwable>();
  for (  List<Class<?>> batch : redefinitionBatchAllocator.batch(types)) {
    List<T> transformations=new ArrayList<T>(batch.size());
    for (    Class<?> type : batch) {
      try {
        transformations.add(transform(type,locationStrategy));
      }
 catch (      Throwable throwable) {
        JavaModule module=JavaModule.ofType(type);
        try {
          listener.onError(TypeDescription.ForLoadedType.getName(type),type.getClassLoader(),module,throwable);
        }
  finally {
          listener.onComplete(TypeDescription.ForLoadedType.getName(type),type.getClassLoader(),module);
        }
      }
    }
    redefinitionListener.onBatch(index,batch,types);
    if (!transformations.isEmpty()) {
      try {
        doApply(transformations,instrumentation);
      }
 catch (      Throwable throwable) {
        if (!redefinitionFailureHandler.onBatchFailure(batch,throwable)) {
          failures.put(batch,throwable);
          redefinitionListener.onError(index,batch,throwable,types);
        }
      }
 finally {
        index++;
      }
    }
  }
  redefinitionListener.onComplete(index,types,failures);
  if (!failures.isEmpty()) {
    redefinitionFailureHandler.onFailure(failures);
  }
}
