{
  JavaConstant.MethodType factoryMethod=JavaConstant.MethodType.ofLoaded(factoryMethodType);
  JavaConstant.MethodType lambdaMethod=JavaConstant.MethodType.ofLoaded(lambdaMethodType);
  JavaConstant.MethodHandle targetMethod=JavaConstant.MethodHandle.ofLoaded(targetMethodHandle,targetTypeLookup);
  JavaConstant.MethodType specializedLambdaMethod=JavaConstant.MethodType.ofLoaded(specializedLambdaMethodType);
  Class<?> targetType=JavaConstant.MethodHandle.lookupType(targetTypeLookup);
  String lambdaClassName=targetType.getName() + LAMBDA_TYPE_INFIX + LAMBDA_NAME_COUNTER.incrementAndGet();
  DynamicType.Builder<?> builder=byteBuddy.subclass(factoryMethod.getReturnType(),ConstructorStrategy.Default.NO_CONSTRUCTORS).modifiers(TypeManifestation.FINAL,Visibility.PUBLIC).implement(markerInterfaces).name(lambdaClassName).defineConstructor(Visibility.PUBLIC).withParameters(factoryMethod.getParameterTypes()).intercept(ConstructorImplementation.INSTANCE).method(named(lambdaMethodName).and(takesArguments(lambdaMethod.getParameterTypes())).and(returns(lambdaMethod.getReturnType()))).intercept(new LambdaMethodImplementation(targetMethod,specializedLambdaMethod));
  int index=0;
  for (  TypeDescription capturedType : factoryMethod.getParameterTypes()) {
    builder=builder.defineField(FIELD_PREFIX + ++index,capturedType,Visibility.PRIVATE,FieldManifestation.FINAL);
  }
  if (!factoryMethod.getParameterTypes().isEmpty()) {
    builder=builder.defineMethod(LAMBDA_FACTORY,factoryMethod.getReturnType(),Visibility.PRIVATE,Ownership.STATIC).withParameters(factoryMethod.getParameterTypes()).intercept(FactoryImplementation.INSTANCE);
  }
  if (serializable) {
    if (!markerInterfaces.contains(Serializable.class)) {
      builder=builder.implement(Serializable.class);
    }
    builder=builder.defineMethod("writeReplace",Object.class,Visibility.PRIVATE).intercept(new SerializationImplementation(new TypeDescription.ForLoadedType(targetType),factoryMethod.getReturnType(),lambdaMethodName,lambdaMethod,targetMethod,JavaConstant.MethodType.ofLoaded(specializedLambdaMethodType)));
  }
 else   if (factoryMethod.getReturnType().isAssignableTo(Serializable.class)) {
    builder=builder.defineMethod("readObject",void.class,Visibility.PRIVATE).withParameters(ObjectInputStream.class).throwing(NotSerializableException.class).intercept(ExceptionMethod.throwing(NotSerializableException.class,"Non-serializable lambda")).defineMethod("writeObject",void.class,Visibility.PRIVATE).withParameters(ObjectOutputStream.class).throwing(NotSerializableException.class).intercept(ExceptionMethod.throwing(NotSerializableException.class,"Non-serializable lambda"));
  }
  for (  Object additionalBridgeType : additionalBridges) {
    JavaConstant.MethodType additionalBridge=JavaConstant.MethodType.ofLoaded(additionalBridgeType);
    builder=builder.defineMethod(lambdaMethodName,additionalBridge.getReturnType(),MethodManifestation.BRIDGE,Visibility.PUBLIC).withParameters(additionalBridge.getParameterTypes()).intercept(new BridgeMethodImplementation(lambdaMethodName,lambdaMethod));
  }
  byte[] classFile=builder.make().getBytes();
  for (  ClassFileTransformer classFileTransformer : classFileTransformers) {
    try {
      byte[] transformedClassFile=classFileTransformer.transform(targetType.getClassLoader(),lambdaClassName.replace('.','/'),NOT_PREVIOUSLY_DEFINED,targetType.getProtectionDomain(),classFile);
      classFile=transformedClassFile == null ? classFile : transformedClassFile;
    }
 catch (    Throwable ignored) {
    }
  }
  return classFile;
}
