{
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"sun/misc/Unsafe","getUnsafe","()Lsun/misc/Unsafe;",false);
  methodVisitor.visitVarInsn(Opcodes.ASTORE,6);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,6);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodHandles$Lookup","lookupClass","()Ljava/lang/Class;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/ClassLoader","getSystemClassLoader","()Ljava/lang/ClassLoader;",false);
  methodVisitor.visitLdcInsn(LambdaFactory.class.getName());
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/ClassLoader","loadClass","(Ljava/lang/String;)Ljava/lang/Class;",false);
  methodVisitor.visitLdcInsn("make");
  methodVisitor.visitInsn(Opcodes.ICONST_5);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Class");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/String;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_2);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_3);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_4);
  methodVisitor.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Class","getDeclaredMethod","(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;",false);
  methodVisitor.visitInsn(Opcodes.ACONST_NULL);
  methodVisitor.visitInsn(Opcodes.ICONST_5);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Object");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,0);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_1);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,1);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_2);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_3);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,3);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitInsn(Opcodes.ICONST_4);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,4);
  methodVisitor.visitInsn(Opcodes.AASTORE);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/reflect/Method","invoke","(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;",false);
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,"[B");
  methodVisitor.visitTypeInsn(Opcodes.CHECKCAST,"[B");
  methodVisitor.visitInsn(Opcodes.ACONST_NULL);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"sun/misc/Unsafe","defineAnonymousClass","(Ljava/lang/Class;[B[Ljava/lang/Object;)Ljava/lang/Class;",false);
  methodVisitor.visitVarInsn(Opcodes.ASTORE,7);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,6);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,7);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"sun/misc/Unsafe","ensureClassInitialized","(Ljava/lang/Class;)V",false);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodType","parameterCount","()I",false);
  Label firstJump=new Label();
  methodVisitor.visitJumpInsn(Opcodes.IFNE,firstJump);
  methodVisitor.visitTypeInsn(Opcodes.NEW,"java/lang/invoke/ConstantCallSite");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodType","returnType","()Ljava/lang/Class;",false);
  methodVisitor.visitVarInsn(Opcodes.ALOAD,7);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/Class","getDeclaredConstructors","()[Ljava/lang/reflect/Constructor;",false);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitInsn(Opcodes.AALOAD);
  methodVisitor.visitInsn(Opcodes.ICONST_0);
  methodVisitor.visitTypeInsn(Opcodes.ANEWARRAY,"java/lang/Object");
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/reflect/Constructor","newInstance","([Ljava/lang/Object;)Ljava/lang/Object;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,"java/lang/invoke/MethodHandles","constant","(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/invoke/MethodHandle;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/invoke/ConstantCallSite","<init>","(Ljava/lang/invoke/MethodHandle;)V",false);
  Label secondJump=new Label();
  methodVisitor.visitJumpInsn(Opcodes.GOTO,secondJump);
  methodVisitor.visitLabel(firstJump);
  methodVisitor.visitFrame(Opcodes.F_APPEND,2,new Object[]{"sun/misc/Unsafe","java/lang/Class"},0,null);
  methodVisitor.visitTypeInsn(Opcodes.NEW,"java/lang/invoke/ConstantCallSite");
  methodVisitor.visitInsn(Opcodes.DUP);
  methodVisitor.visitFieldInsn(Opcodes.GETSTATIC,"java/lang/invoke/MethodHandles","IMPL_LOOKUP","Ljava/lang/invoke/MethodHandles$Lookup;");
  methodVisitor.visitVarInsn(Opcodes.ALOAD,7);
  methodVisitor.visitLdcInsn("get$Lambda");
  methodVisitor.visitVarInsn(Opcodes.ALOAD,2);
  methodVisitor.visitMethodInsn(Opcodes.INVOKEVIRTUAL,"java/lang/invoke/MethodHandles$Lookup","findStatic","(Ljava/lang/Class;Ljava/lang/String;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodHandle;",false);
  methodVisitor.visitMethodInsn(Opcodes.INVOKESPECIAL,"java/lang/invoke/ConstantCallSite","<init>","(Ljava/lang/invoke/MethodHandle;)V",false);
  methodVisitor.visitLabel(secondJump);
  methodVisitor.visitFrame(Opcodes.F_SAME1,0,null,1,new Object[]{"java/lang/invoke/ConstantCallSite"});
  methodVisitor.visitInsn(Opcodes.ARETURN);
  methodVisitor.visitMaxs(8,8);
  methodVisitor.visitEnd();
  return IGNORE_ORIGINAL;
}
