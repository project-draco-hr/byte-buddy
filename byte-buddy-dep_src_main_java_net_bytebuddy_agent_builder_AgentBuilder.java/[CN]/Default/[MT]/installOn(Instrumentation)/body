{
  ClassFileTransformer classFileTransformer=makeRaw();
  instrumentation.addTransformer(classFileTransformer,redefinitionStrategy.isRetransforming(instrumentation));
  if (nativeMethodStrategy.isEnabled(instrumentation)) {
    instrumentation.setNativeMethodPrefix(classFileTransformer,nativeMethodStrategy.getPrefix());
  }
  if (redefinitionStrategy.isEnabled()) {
    RedefinitionStrategy.Collector collector=redefinitionStrategy.makeCollector(transformation);
    for (    Class<?> type : instrumentation.getAllLoadedClasses()) {
      if (instrumentation.isModifiableClass(type)) {
        try {
          collector.consider(type);
        }
 catch (        Throwable throwable) {
          try {
            listener.onError(type.getName(),throwable);
          }
  finally {
            listener.onComplete(type.getName());
          }
        }
      }
    }
    try {
      collector.apply(instrumentation,byteBuddy,binaryLocator,typeStrategy,listener,nativeMethodStrategy,accessControlContext,initializationStrategy,bootstrapInjectionStrategy);
    }
 catch (    UnmodifiableClassException exception) {
      throw new IllegalStateException("Cannot modify at least one class: " + collector,exception);
    }
catch (    ClassNotFoundException exception) {
      throw new IllegalStateException("Cannot find at least one class class: " + collector,exception);
    }
  }
  return classFileTransformer;
}
