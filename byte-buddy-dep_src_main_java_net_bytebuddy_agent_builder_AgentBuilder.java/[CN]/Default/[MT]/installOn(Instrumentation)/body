{
  ResettableClassFileTransformer classFileTransformer=makeRaw();
  instrumentation.addTransformer(classFileTransformer,redefinitionStrategy.isRetransforming(instrumentation));
  try {
    if (nativeMethodStrategy.isEnabled(instrumentation)) {
      instrumentation.setNativeMethodPrefix(classFileTransformer,nativeMethodStrategy.getPrefix());
    }
    lambdaInstrumentationStrategy.apply(byteBuddy,instrumentation,classFileTransformer);
    if (redefinitionStrategy.isEnabled()) {
      RedefinitionStrategy.Delegate<?> delegate=redefinitionStrategy.make(transformation);
      for (      Class<?> type : instrumentation.getAllLoadedClasses()) {
        JavaModule module=JavaModule.ofType(type);
        try {
          TypePool typePool=poolStrategy.typePool(locationStrategy.classFileLocator(type.getClassLoader(),module),type.getClassLoader());
          try {
            delegate.consider(ignoredTypeMatcher,listener,descriptionStrategy.apply(TypeDescription.ForLoadedType.getName(type),type,typePool),type,type,module,!instrumentation.isModifiableClass(type));
          }
 catch (          Throwable throwable) {
            if (descriptionStrategy.isLoadedFirst() && fallbackStrategy.isFallback(type,throwable)) {
              delegate.consider(ignoredTypeMatcher,listener,typePool.describe(TypeDescription.ForLoadedType.getName(type)).resolve(),type,NO_LOADED_TYPE,module);
            }
 else {
              throw throwable;
            }
          }
        }
 catch (        Throwable throwable) {
          try {
            try {
              listener.onError(TypeDescription.ForLoadedType.getName(type),type.getClassLoader(),module,throwable);
            }
  finally {
              listener.onComplete(TypeDescription.ForLoadedType.getName(type),type.getClassLoader(),module);
            }
          }
 catch (          Throwable ignored) {
          }
        }
      }
      delegate.apply(instrumentation,locationStrategy,listener,redefinitionBatchAllocator,redefinitionListener,redefinitionFailureHandler);
    }
    return classFileTransformer;
  }
 catch (  Throwable throwable) {
    return installationStrategy.onError(instrumentation,classFileTransformer,throwable);
  }
}
