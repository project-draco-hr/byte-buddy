{
  ClassFileTransformer classFileTransformer=makeRaw();
  instrumentation.addTransformer(classFileTransformer,retransformation);
  if (nativeMethodStrategy.isEnabled()) {
    instrumentation.setNativeMethodPrefix(classFileTransformer,nativeMethodStrategy.getPrefix());
  }
  if (retransformation) {
    List<Class<?>> retransformedTypes=new LinkedList<Class<?>>();
    for (    Class<?> type : instrumentation.getAllLoadedClasses()) {
      if (instrumentation.isModifiableClass(type) && transformation.resolve(new TypeDescription.ForLoadedType(type),type.getClassLoader(),type,type.getProtectionDomain()).isResolved()) {
        retransformedTypes.add(type);
      }
    }
    if (!retransformedTypes.isEmpty()) {
      try {
        instrumentation.retransformClasses(retransformedTypes.toArray(new Class<?>[retransformedTypes.size()]));
      }
 catch (      UnmodifiableClassException exception) {
        throw new IllegalStateException("Cannot retransform classes: " + retransformedTypes,exception);
      }
    }
  }
  return classFileTransformer;
}
