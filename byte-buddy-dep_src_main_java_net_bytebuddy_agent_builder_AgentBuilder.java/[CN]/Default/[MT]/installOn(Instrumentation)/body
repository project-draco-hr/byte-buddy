{
  ClassFileTransformer classFileTransformer=makeRaw();
  instrumentation.addTransformer(classFileTransformer,retransformation);
  if (!NO_NATIVE_PREFIX.equals(nonNull(nativeMethodPrefix))) {
    instrumentation.setNativeMethodPrefix(classFileTransformer,nativeMethodPrefix);
  }
  if (retransformation) {
    List<Class<?>> retransformedTypes=new LinkedList<Class<?>>();
    for (    Class<?> type : instrumentation.getAllLoadedClasses()) {
      for (      Transformation transformation : transformations) {
        if (transformation.matches(new TypeDescription.ForLoadedType(type),type.getClassLoader(),type,type.getProtectionDomain())) {
          retransformedTypes.add(type);
          break;
        }
      }
    }
    if (retransformedTypes.size() > 0) {
      try {
        instrumentation.retransformClasses(retransformedTypes.toArray(new Class<?>[retransformedTypes.size()]));
      }
 catch (      UnmodifiableClassException exception) {
        throw new IllegalStateException("Cannot retransform classes: " + retransformedTypes,exception);
      }
    }
  }
  return classFileTransformer;
}
