{
  ClassFileTransformer classFileTransformer=makeRaw();
  instrumentation.addTransformer(classFileTransformer,redefinitionStrategy.isRetransforming(instrumentation));
  try {
    if (nativeMethodStrategy.isEnabled(instrumentation)) {
      instrumentation.setNativeMethodPrefix(classFileTransformer,nativeMethodStrategy.getPrefix());
    }
    lambdaInstrumentationStrategy.apply(byteBuddy,instrumentation,classFileTransformer,accessControlContext);
    if (redefinitionStrategy.isEnabled()) {
      RedefinitionStrategy.Collector collector=redefinitionStrategy.makeCollector(transformation);
      for (      Class<?> type : instrumentation.getAllLoadedClasses()) {
        JavaModule module=JavaModule.ofType(type);
        try {
          TypeDescription typeDescription=descriptionStrategy.apply(type,typeLocator,locationStrategy,accessControlContext);
          if (!instrumentation.isModifiableClass(type) || !collector.consider(typeDescription,type,ignoredTypeMatcher,accessControlContext)) {
            try {
              try {
                listener.onIgnored(typeDescription,ClassLoaderAction.apply(type,accessControlContext),module);
              }
  finally {
                listener.onComplete(typeDescription.getName(),ClassLoaderAction.apply(type,accessControlContext),module);
              }
            }
 catch (            Throwable ignored) {
            }
          }
        }
 catch (        Throwable throwable) {
          try {
            try {
              listener.onError(TypeDescription.ForLoadedType.getName(type),ClassLoaderAction.apply(type,accessControlContext),module,throwable);
            }
  finally {
              listener.onComplete(TypeDescription.ForLoadedType.getName(type),ClassLoaderAction.apply(type,accessControlContext),module);
            }
          }
 catch (          Throwable ignored) {
          }
        }
      }
      collector.apply(instrumentation,typeLocator,locationStrategy,listener,accessControlContext);
    }
    return classFileTransformer;
  }
 catch (  Throwable throwable) {
    return installationStrategy.onError(instrumentation,classFileTransformer,throwable);
  }
}
