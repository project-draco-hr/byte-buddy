{
  Method loadClass=ClassLoader.class.getDeclaredMethod("loadClass",String.class,boolean.class);
  loadClass.setAccessible(true);
  when(loadClass.invoke(first,FOO,false)).thenReturn(Foo.class);
  when(loadClass.invoke(first,BAR,false)).thenReturn(BarFirst.class);
  when(loadClass.invoke(first,QUX,false)).thenThrow(new ClassNotFoundException());
  when(loadClass.invoke(first,BAZ,false)).thenThrow(new ClassNotFoundException());
  when(loadClass.invoke(second,BAR,false)).thenReturn(BarSecond.class);
  when(loadClass.invoke(second,QUX,false)).thenReturn(Qux.class);
  when(loadClass.invoke(second,BAZ,false)).thenThrow(new ClassNotFoundException());
  fooUrl=new URL(SCHEME + FOO);
  barFirstUrl=new URL(SCHEME + BAR);
  barSecondUrl=new URL(SCHEME + BAZ);
  quxUrl=new URL(SCHEME + QUX);
  when(first.getResource(FOO)).thenReturn(fooUrl);
  when(first.getResource(BAR)).thenReturn(barFirstUrl);
  when(second.getResource(BAR)).thenReturn(barSecondUrl);
  when(second.getResource(QUX)).thenReturn(quxUrl);
  when(first.getResources(FOO)).thenReturn(new SingleElementEnumeration(fooUrl));
  when(first.getResources(BAR)).thenReturn(new SingleElementEnumeration(barFirstUrl));
  when(second.getResources(BAR)).thenReturn(new SingleElementEnumeration(barSecondUrl));
  when(second.getResources(QUX)).thenReturn(new SingleElementEnumeration(quxUrl));
}
