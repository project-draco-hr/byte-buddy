{
  MethodDescription proxiedMethod=new MethodDescription.ForMethod(proxiedType.getDeclaredMethod(FOO,proxiedMethodParameters));
  MethodCallProxy0 methodCallProxy=new MethodCallProxy0(proxiedMethod);
  DynamicType<?> dynamicType=methodCallProxy.make(proxyName(proxiedType),null,null);
  ClassLoader proxyClassLoader=new ByteArrayClassLoader(getClass().getClassLoader(),Collections.singletonMap(dynamicType.getName(),dynamicType.getBytes()));
  Class<?> proxyType=Class.forName(proxyName(proxiedType),false,proxyClassLoader);
  Constructor<?> proxyConstructor=assertProxyType(proxyType,proxiedMethod);
  InvocationCountable invocationCountable=proxiedType.newInstance();
  Object[] methodArgument=new Object[this.methodArgument.length + (proxiedMethod.isStatic() ? 0 : 1)];
  int index=0;
  if (!proxiedMethod.isStatic()) {
    methodArgument[index++]=invocationCountable;
  }
  for (  Object argument : this.methodArgument) {
    methodArgument[index++]=argument;
  }
  Object methodCallProxyInstance=proxyConstructor.newInstance(methodArgument);
  assertProxyInvocations(invocationCountable,methodCallProxyInstance);
}
