{
  when(instrumentationTarget.getTypeDescription()).thenReturn(foo);
  when(invocationFactory.invoke(eq(instrumentationTarget),eq(foo),any(MethodDescription.class))).thenReturn(specialMethodInvocation);
  when(specialMethodInvocation.isValid()).thenReturn(true);
  when(specialMethodInvocation.apply(any(MethodVisitor.class),any(Instrumentation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(methodAccessorFactory.registerAccessorFor(specialMethodInvocation)).thenReturn(proxyMethod);
  StackManipulation stackManipulation=new TypeProxy.ForSuperMethodByConstructor(foo,instrumentationTarget,Collections.<TypeDescription>singletonList(new TypeDescription.ForLoadedType(Void.class)),true,false);
  MethodVisitor methodVisitor=mock(MethodVisitor.class);
  Instrumentation.Context instrumentationContext=mock(Instrumentation.Context.class);
  when(instrumentationContext.register(any(AuxiliaryType.class))).thenReturn(foo);
  assertThat(stackManipulation.isValid(),is(true));
  StackManipulation.Size size=stackManipulation.apply(methodVisitor,instrumentationContext);
  assertThat(size.getSizeImpact(),is(1));
  assertThat(size.getMaximalSize(),is(3));
  verify(instrumentationContext).register(any(AuxiliaryType.class));
  verifyNoMoreInteractions(instrumentationContext);
  verify(methodVisitor).visitTypeInsn(Opcodes.NEW,Type.getInternalName(Foo.class));
  verify(methodVisitor,times(2)).visitInsn(Opcodes.DUP);
  verify(methodVisitor).visitInsn(Opcodes.ACONST_NULL);
  verify(methodVisitor).visitMethodInsn(Opcodes.INVOKESPECIAL,foo.getInternalName(),MethodDescription.CONSTRUCTOR_INTERNAL_NAME,foo.getDeclaredMethods().filter(isConstructor()).getOnly().getDescriptor(),false);
  verify(methodVisitor).visitFieldInsn(Opcodes.PUTFIELD,foo.getInternalName(),TypeProxy.INSTANCE_FIELD,Type.getDescriptor(Void.class));
  verify(methodVisitor).visitInsn(MoreOpcodes.ALOAD_0);
  verifyNoMoreInteractions(methodVisitor);
}
