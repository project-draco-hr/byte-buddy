{
  when(assignmentBinding.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(assigner.assign(any(TypeDescription.class),any(TypeDescription.class),anyBoolean())).thenReturn(assignmentBinding);
  when(methodInvoker.invoke(any(MethodDescription.class))).thenReturn(methodInvocation);
  when(methodInvocation.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  when(assignmentBinding.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
  TypeDescription declaringType=mock(TypeDescription.class);
  when(declaringType.getInternalName()).thenReturn(FOO);
  when(declaringType.isInterface()).thenReturn(false);
  when(targetMethod.getInternalName()).thenReturn(BAR);
  when(targetMethod.isStatic()).thenReturn(true);
  when(targetMethod.getDeclaringType()).thenReturn(declaringType);
  when(targetMethod.getDescriptor()).thenReturn(BAZ);
  when(firstParameter.getDeclaringMethod()).thenReturn(targetMethod);
  when(firstParameter.getIndex()).thenReturn(0);
  when(secondParameter.getDeclaringMethod()).thenReturn(targetMethod);
  when(secondParameter.getIndex()).thenReturn(1);
  when(targetMethod.getParameters()).thenReturn((ParameterList)new ParameterList.Explicit<ParameterDescription>(Arrays.asList(firstParameter,secondParameter)));
  when(firstPseudoAnnotation.getAnnotationType()).thenReturn(new TypeDescription.ForLoadedType(FirstPseudoAnnotation.class));
  when(firstPseudoAnnotation.prepare(FirstPseudoAnnotation.class)).thenReturn(firstPseudoAnnotation);
  when(secondPseudoAnnotation.getAnnotationType()).thenReturn(new TypeDescription.ForLoadedType(SecondPseudoAnnotation.class));
  when(secondPseudoAnnotation.prepare(SecondPseudoAnnotation.class)).thenReturn(secondPseudoAnnotation);
  when(sourceTypeDescription.getStackSize()).thenReturn(StackSize.ZERO);
  when(targetTypeDescription.getStackSize()).thenReturn(StackSize.ZERO);
  when(sourceMethod.getReturnType()).thenReturn(sourceTypeDescription);
  when(targetMethod.getReturnType()).thenReturn(targetTypeDescription);
  when(terminationHandler.resolve(assigner,sourceMethod,targetMethod)).thenReturn(termination);
  when(termination.apply(any(MethodVisitor.class),any(Implementation.Context.class))).thenReturn(new StackManipulation.Size(0,0));
}
