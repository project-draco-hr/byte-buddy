{
switch (observed.getSort()) {
case RAW:
    return resolve(observed.asRawType(),substitute,substitutionMatcher);
case GENERIC_ARRAY:
  return GenericTypeDescription.ForGenericArray.Latent.of(resolve(observed.getComponentType(),substitute,substitutionMatcher),1);
case PARAMETERIZED:
GenericTypeDescription ownerType=observed.getOwnerType();
return new GenericTypeDescription.ForParameterizedType.Latent(resolve(observed.asRawType(),substitute,substitutionMatcher),resolve(observed.getParameters(),substitute,substitutionMatcher),ownerType == null ? null : resolve(ownerType,substitute,substitutionMatcher));
case WILDCARD:
GenericTypeList lowerBounds=observed.getLowerBounds(), upperBounds=observed.getUpperBounds();
return lowerBounds.isEmpty() ? GenericTypeDescription.ForWildcardType.Latent.boundedAbove(resolve(upperBounds.getOnly(),substitute,substitutionMatcher)) : GenericTypeDescription.ForWildcardType.Latent.boundedBelow(resolve(lowerBounds.getOnly(),substitute,substitutionMatcher));
case VARIABLE:
return observed.getVariableSource().accept(new TypeVariableProxy.Extractor(substitute,substitutionMatcher)).resolve(observed);
default :
throw new AssertionError("Unexpected generic type: " + observed.getSort());
}
}
