{
  when(methodDescription.getDeclaringType()).thenReturn(declaringType);
  when(declaringType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(firstParameterType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(firstParameterType.asErasure()).thenReturn(firstRawParameterType);
  when(firstParameterType.asGenericType()).thenReturn(firstParameterType);
  when(secondParameterType.asErasure()).thenReturn(secondRawParameterType);
  when(secondParameterType.getStackSize()).thenReturn(StackSize.SINGLE);
  when(secondParameterType.asGenericType()).thenReturn(secondParameterType);
  when(methodDescription.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(methodDescription,firstParameterType,secondParameterType));
  when(bridgeMethod.getDeclaringType()).thenReturn(declaringType);
  when(secondRawParameterType.getInternalName()).thenReturn(FOO);
  when(firstParameterType.accept(any(TypeDescription.Generic.Visitor.class))).thenReturn(firstParameterType);
  when(secondParameterType.accept(any(TypeDescription.Generic.Visitor.class))).thenReturn(secondParameterType);
}
