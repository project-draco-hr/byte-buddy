{
  final int sourceIndex=2, targetIndex=1;
  when(stackManipulation.isValid()).thenReturn(true);
  when(annotation.value()).thenReturn(sourceIndex);
  TypeList sourceParameters=mock(TypeList.class);
  when(sourceParameters.size()).thenReturn(sourceIndex + 1);
  TypeDescription sourceType=mock(TypeDescription.class);
  when(sourceParameters.get(sourceIndex)).thenReturn(sourceType);
  when(source.getParameterTypes()).thenReturn(sourceParameters);
  when(source.isStatic()).thenReturn(false);
  TypeList targetParameters=mock(TypeList.class);
  when(targetParameters.size()).thenReturn(targetIndex + 1);
  TypeDescription targetType=mock(TypeDescription.class);
  when(targetParameters.get(targetIndex)).thenReturn(targetType);
  when(target.getParameterTypes()).thenReturn(targetParameters);
  when(target.getParameterAnnotations()).thenReturn(annotations);
  AnnotationDrivenBinder.ArgumentBinder.IdentifiedBinding<?> identifiedBinding=Argument.Binder.INSTANCE.bind(annotation,targetIndex,source,target,instrumentedType,assigner);
  assertThat(identifiedBinding.isValid(),is(true));
  Object expectedToken=new MostSpecificTypeResolver.ParameterIndexToken(sourceIndex);
  assertThat(identifiedBinding.getIdentificationToken(),equalTo(expectedToken));
  assertThat(identifiedBinding.getIdentificationToken().hashCode(),equalTo(expectedToken.hashCode()));
  verify(annotation,atLeast(1)).value();
  verify(source,atLeast(1)).getParameterTypes();
  verify(source,atLeast(1)).isStatic();
  verify(target,atLeast(1)).getParameterTypes();
  verify(target,atLeast(1)).getParameterAnnotations();
  verify(assigner).assign(sourceType,targetType,considerRuntimeType);
  verifyNoMoreInteractions(assigner);
}
