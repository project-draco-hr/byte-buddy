{
  return (ExampleInterface)Proxy.newProxyInstance(newClassLoader(),new Class<?>[]{BASE_CLASS},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      Class<?> returnType=method.getReturnType();
      if (returnType.isPrimitive()) {
        if (returnType == boolean.class) {
          return DEFAULT_BOOLEAN_VALUE;
        }
 else         if (returnType == byte.class) {
          return DEFAULT_BYTE_VALUE;
        }
 else         if (returnType == short.class) {
          return DEFAULT_SHORT_VALUE;
        }
 else         if (returnType == char.class) {
          return DEFAULT_CHAR_VALUE;
        }
 else         if (returnType == int.class) {
          return DEFAULT_INT_VALUE;
        }
 else         if (returnType == long.class) {
          return DEFAULT_LONG_VALUE;
        }
 else         if (returnType == float.class) {
          return DEFAULT_FLOAT_VALUE;
        }
 else {
          return DEFAULT_DOUBLE_VALUE;
        }
      }
 else {
        return DEFAULT_REFERENCE_VALUE;
      }
    }
  }
);
}
