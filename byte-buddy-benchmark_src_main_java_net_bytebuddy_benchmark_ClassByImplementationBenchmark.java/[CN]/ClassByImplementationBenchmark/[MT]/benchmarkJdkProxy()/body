{
  return (ExampleInterface)Proxy.newProxyInstance(newClassLoader(),new Class<?>[]{baseClass},new InvocationHandler(){
    @Override public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      Class<?> returnType=method.getReturnType();
      if (returnType.isPrimitive()) {
        if (returnType == boolean.class) {
          return defaultBooleanValue;
        }
 else         if (returnType == byte.class) {
          return defaultByteValue;
        }
 else         if (returnType == short.class) {
          return defaultShortValue;
        }
 else         if (returnType == char.class) {
          return defaultCharValue;
        }
 else         if (returnType == int.class) {
          return defaultIntValue;
        }
 else         if (returnType == long.class) {
          return defaultLongValue;
        }
 else         if (returnType == float.class) {
          return defaultFloatValue;
        }
 else {
          return defaultDoubleValue;
        }
      }
 else {
        return defaultReferenceValue;
      }
    }
  }
);
}
