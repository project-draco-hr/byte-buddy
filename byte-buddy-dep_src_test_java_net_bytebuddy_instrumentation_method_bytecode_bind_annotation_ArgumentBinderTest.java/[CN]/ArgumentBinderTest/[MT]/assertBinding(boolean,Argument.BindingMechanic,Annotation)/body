{
  final int sourceIndex=2;
  when(stackManipulation.isValid()).thenReturn(true);
  when(annotation.value()).thenReturn(sourceIndex);
  when(annotation.bindingMechanic()).thenReturn(bindingMechanic);
  List<TypeDescription> typeDescriptions=new ArrayList<TypeDescription>(sourceIndex + 1);
  for (int i=0; i < sourceIndex; i++) {
    TypeDescription typeDescription=mock(TypeDescription.class);
    when(typeDescription.getStackSize()).thenReturn(StackSize.ZERO);
    typeDescriptions.add(i,typeDescription);
  }
  when(sourceType.getStackSize()).thenReturn(StackSize.ZERO);
  typeDescriptions.add(sourceIndex,sourceType);
  ParameterList parameterList=ParameterList.Explicit.latent(source,typeDescriptions);
  when(source.getParameters()).thenReturn(parameterList);
  when(source.isStatic()).thenReturn(false);
  when(target.getTypeDescription()).thenReturn(targetType);
  when(target.getDeclaredAnnotations()).thenReturn(new AnnotationList.ForLoadedAnnotation(annotations));
  MethodDelegationBinder.ParameterBinding<?> parameterBinding=Argument.Binder.INSTANCE.bind(annotationDescription,source,target,instrumentationTarget,assigner);
  assertThat(parameterBinding.isValid(),is(true));
  Object expectedToken=new ArgumentTypeResolver.ParameterIndexToken(sourceIndex);
  if (bindingMechanic == Argument.BindingMechanic.UNIQUE) {
    assertThat(parameterBinding.getIdentificationToken(),equalTo(expectedToken));
    assertThat(parameterBinding.getIdentificationToken().hashCode(),equalTo(expectedToken.hashCode()));
  }
 else {
    assertThat(parameterBinding.getIdentificationToken(),not(equalTo(expectedToken)));
    assertThat(parameterBinding.getIdentificationToken().hashCode(),not(equalTo(expectedToken.hashCode())));
  }
  verify(annotation,atLeast(1)).value();
  verify(source,atLeast(1)).getParameters();
  verify(target,atLeast(1)).getTypeDescription();
  verify(target,atLeast(1)).getDeclaredAnnotations();
  verify(assigner).assign(sourceType,targetType,dynamicallyTyped);
  verifyNoMoreInteractions(assigner);
}
