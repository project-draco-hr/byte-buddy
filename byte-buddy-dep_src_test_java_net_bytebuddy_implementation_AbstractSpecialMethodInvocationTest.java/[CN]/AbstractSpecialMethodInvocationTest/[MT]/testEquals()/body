{
  Implementation.SpecialMethodInvocation identical=make(FOO,returnType,parameterTypes,targetType);
  assertThat(identical,is(identical));
  assertThat(make(FOO,returnType,parameterTypes,targetType),is(make(FOO,returnType,parameterTypes,targetType)));
  Implementation.SpecialMethodInvocation equal=mock(Implementation.SpecialMethodInvocation.class);
  when(equal.getTypeDescription()).thenReturn(targetType);
  MethodDescription.InDeclaredForm equalMethod=mock(MethodDescription.InDeclaredForm.class);
  when(equalMethod.getDeclaringType()).thenReturn(otherType);
  when(equal.getMethodDescription()).thenReturn(equalMethod);
  when(equalMethod.getInternalName()).thenReturn(FOO);
  when(equalMethod.getReturnType()).thenReturn(returnType);
  when(equalMethod.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethod,parameterTypes));
  assertThat(make(FOO,returnType,parameterTypes,targetType),is(equal));
  Implementation.SpecialMethodInvocation equalButType=mock(Implementation.SpecialMethodInvocation.class);
  when(equalButType.getTypeDescription()).thenReturn(mock(TypeDescription.class));
  when(equalButType.getMethodDescription()).thenReturn(equalMethod);
  assertThat(make(FOO,returnType,parameterTypes,targetType),not(is(equalButType)));
  Implementation.SpecialMethodInvocation equalButName=mock(Implementation.SpecialMethodInvocation.class);
  when(equalButName.getTypeDescription()).thenReturn(targetType);
  MethodDescription.InDeclaredForm equalMethodButName=mock(MethodDescription.InDeclaredForm.class);
  when(equalMethodButName.getDeclaringType()).thenReturn(otherType);
  when(equalButName.getMethodDescription()).thenReturn(equalMethodButName);
  when(equalMethodButName.getInternalName()).thenReturn(BAR);
  when(equalMethodButName.getReturnType()).thenReturn(returnType);
  when(equalMethodButName.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButName,parameterTypes));
  assertThat(make(FOO,returnType,parameterTypes,targetType),not(is(equalButName)));
  Implementation.SpecialMethodInvocation equalButReturn=mock(Implementation.SpecialMethodInvocation.class);
  when(equalButName.getTypeDescription()).thenReturn(targetType);
  MethodDescription.InDeclaredForm equalMethodButReturn=mock(MethodDescription.InDeclaredForm.class);
  when(equalMethodButReturn.getDeclaringType()).thenReturn(otherType);
  when(equalButName.getMethodDescription()).thenReturn(equalMethodButReturn);
  when(equalMethodButReturn.getInternalName()).thenReturn(FOO);
  when(equalMethodButReturn.getReturnType()).thenReturn(mock(TypeDescription.class));
  when(equalMethodButReturn.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButReturn,parameterTypes));
  assertThat(make(FOO,returnType,parameterTypes,targetType),not(is(equalButReturn)));
  Implementation.SpecialMethodInvocation equalButParameter=mock(Implementation.SpecialMethodInvocation.class);
  when(equalButParameter.getTypeDescription()).thenReturn(targetType);
  MethodDescription.InDeclaredForm equalMethodButParameter=mock(MethodDescription.InDeclaredForm.class);
  when(equalMethodButParameter.getDeclaringType()).thenReturn(otherType);
  when(equalButParameter.getMethodDescription()).thenReturn(equalMethodButParameter);
  when(equalMethodButParameter.getInternalName()).thenReturn(FOO);
  when(equalMethodButParameter.getReturnType()).thenReturn(returnType);
  TypeDescription parameterType=mock(TypeDescription.class);
  when(parameterType.getStackSize()).thenReturn(StackSize.ZERO);
  when(parameterType.accept(any(GenericTypeDescription.Visitor.class))).thenReturn(parameterType);
  when(equalMethodButParameter.getParameters()).thenReturn(new ParameterList.Explicit.ForTypes(equalMethodButParameter,Collections.singletonList(parameterType)));
  assertThat(make(FOO,returnType,parameterTypes,targetType),not(is(equalButParameter)));
  assertThat(make(FOO,returnType,parameterTypes,targetType),not(is(new Object())));
  assertThat(make(FOO,returnType,parameterTypes,targetType),not(is((Object)null)));
}
