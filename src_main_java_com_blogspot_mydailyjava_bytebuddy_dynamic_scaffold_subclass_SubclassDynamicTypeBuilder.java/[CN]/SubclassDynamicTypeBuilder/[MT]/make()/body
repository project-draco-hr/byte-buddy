{
  InstrumentedType instrumentedType=applyRecordedMembersTo(new SubclassInstumentedType(classFormatVersion,superType,interfaceTypes,modifiers,namingStrategy));
  SubclassInstrumentationContextDelegate contextDelegate=new SubclassInstrumentationContextDelegate(instrumentedType);
  Instrumentation.Context instrumentationContext=new Instrumentation.Context.Default(classFormatVersion,contextDelegate,contextDelegate);
  MethodRegistry.Compiled compiledMethodRegistry=methodRegistry.compile(instrumentedType,MethodRegistry.Compiled.Entry.Skip.INSTANCE);
  instrumentedType=compiledMethodRegistry.getInstrumentedType();
  return new TypeWriter.Builder<T>(instrumentedType,instrumentationContext,classFormatVersion).build(classVisitorWrapperChain).attributeType(attributeAppender).fields().write(instrumentedType.getDeclaredFields(),fieldRegistry.compile(instrumentedType,TypeWriter.FieldPool.Entry.NoOp.INSTANCE)).methods().write(instrumentedType.getReachableMethods().filter(isOverridable().and(not(ignoredMethods)).or(isDeclaredBy(instrumentedType))),compiledMethodRegistry).write(contextDelegate.getProxiedMethods(),contextDelegate).make();
}
