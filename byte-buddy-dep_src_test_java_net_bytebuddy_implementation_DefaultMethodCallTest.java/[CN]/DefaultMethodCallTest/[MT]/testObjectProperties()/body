{
  ObjectPropertyAssertion.of(DefaultMethodCall.class).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      TypeDescription typeDescription=mock(TypeDescription.class);
      when(typeDescription.isInterface()).thenReturn(true);
      when(typeDescription.asRawType()).thenReturn(typeDescription);
      when(typeDescription.getSort()).thenReturn(GenericTypeDescription.Sort.RAW);
      return Collections.singletonList(typeDescription);
    }
  }
).apply();
  final TypeDescription removalType=mock(TypeDescription.class);
  ObjectPropertyAssertion.of(DefaultMethodCall.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>(){
    @Override public void apply(    Implementation.Target mock){
      TypeDescription typeDescription=mock(TypeDescription.class);
      when(typeDescription.getInterfaces()).thenReturn(new TypeList.Explicit(Arrays.asList(removalType,mock(TypeDescription.class))));
      when(mock.getTypeDescription()).thenReturn(typeDescription);
    }
  }
).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      return Arrays.asList(removalType,mock(TypeDescription.class));
    }
  }
).apply();
}
