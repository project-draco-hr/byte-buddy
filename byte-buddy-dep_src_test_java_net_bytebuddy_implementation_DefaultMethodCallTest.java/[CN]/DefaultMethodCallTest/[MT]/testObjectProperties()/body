{
  ObjectPropertyAssertion.of(DefaultMethodCall.class).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      TypeDescription typeDescription=mock(TypeDescription.class);
      when(typeDescription.isInterface()).thenReturn(true);
      when(typeDescription.asErasure()).thenReturn(typeDescription);
      when(typeDescription.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
      return Collections.singletonList(typeDescription);
    }
  }
).apply();
  final TypeDescription removalType=mock(TypeDescription.class);
  final GenericTypeDescription genericRemovalType=mock(GenericTypeDescription.class);
  when(genericRemovalType.asGenericType()).thenReturn(genericRemovalType);
  when(genericRemovalType.asErasure()).thenReturn(removalType);
  ObjectPropertyAssertion.of(DefaultMethodCall.Appender.class).refine(new ObjectPropertyAssertion.Refinement<Implementation.Target>(){
    @Override public void apply(    Implementation.Target mock){
      TypeDescription typeDescription=mock(TypeDescription.class), otherType=mock(TypeDescription.class);
      GenericTypeDescription otherGenericType=mock(GenericTypeDescription.class);
      when(otherGenericType.asErasure()).thenReturn(otherType);
      when(otherGenericType.asGenericType()).thenReturn(otherGenericType);
      when(typeDescription.getInterfaces()).thenReturn(new GenericTypeList.Explicit(genericRemovalType,otherGenericType));
      when(mock.getInstrumentedType()).thenReturn(typeDescription);
    }
  }
).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      TypeDescription typeDescription=mock(TypeDescription.class);
      when(typeDescription.asErasure()).thenReturn(typeDescription);
      return Arrays.asList(removalType,typeDescription);
    }
  }
).apply();
}
