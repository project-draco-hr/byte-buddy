{
  ObjectPropertyAssertion.of(RedefinitionDynamicTypeBuilder.class).create(new ObjectPropertyAssertion.Creator<List<?>>(){
    @Override public List<?> create(){
      TypeDescription typeDescription=mock(TypeDescription.class);
      when(typeDescription.asErasure()).thenReturn(typeDescription);
      return Collections.singletonList(typeDescription);
    }
  }
).create(new ObjectPropertyAssertion.Creator<TypeDescription>(){
    @Override public TypeDescription create(){
      TypeDescription rawTypeDescription=mock(TypeDescription.class);
      when(rawTypeDescription.getDeclaredAnnotations()).thenReturn(new AnnotationList.Empty());
      when(rawTypeDescription.getTypeVariables()).thenReturn(new TypeList.Generic.Empty());
      TypeDescription.Generic typeDescription=mock(TypeDescription.Generic.class);
      when(typeDescription.asErasure()).thenReturn(rawTypeDescription);
      when(typeDescription.asGenericType()).thenReturn(typeDescription);
      when(rawTypeDescription.getInterfaces()).thenReturn(new TypeList.Generic.Explicit(typeDescription));
      when(rawTypeDescription.getDeclaredFields()).thenReturn(new FieldList.Empty<FieldDescription.InDefinedShape>());
      when(rawTypeDescription.getDeclaredMethods()).thenReturn(new MethodList.Empty<MethodDescription.InDefinedShape>());
      return rawTypeDescription;
    }
  }
).apply();
}
