{
  Set<String> locallyProcessedMethods=new HashSet<String>(processedMethodsInHierarchy);
  if (processedTypes.add(typeDescription)) {
    defaultMethodLookup.begin(typeDescription);
    for (    MethodDescription methodDescription : typeDescription.getDeclaredMethods().filter(virtualMethodMatcher)) {
      String uniqueSignature=methodDescription.getUniqueSignature();
      if (locallyProcessedMethods.add(uniqueSignature)) {
        MethodDescription conflictingMethod=interfaceMethods.get(uniqueSignature);
        MethodDescription resolvedMethod=methodDescription;
        if (conflictingMethod != null && !conflictingMethod.getDeclaringType().isAssignableFrom(typeDescription)) {
          resolvedMethod=ConflictingInterfaceMethod.of(typeOfInterest,conflictingMethod,methodDescription);
        }
        interfaceMethods.put(uniqueSignature,resolvedMethod);
      }
      defaultMethodLookup.register(methodDescription);
    }
    for (    TypeDescription interfaceType : typeDescription.getInterfaces()) {
      pushInterface(interfaceType,locallyProcessedMethods,defaultMethodLookup);
    }
    defaultMethodLookup.complete(typeDescription);
  }
}
