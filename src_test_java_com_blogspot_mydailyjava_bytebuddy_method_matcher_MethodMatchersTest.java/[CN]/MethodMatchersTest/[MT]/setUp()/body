{
  testClassBase$foo=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(FOO_METHOD_NAME));
  testClassBase$bar=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(BAR_METHOD_NAME,Object.class));
  testClassBase$baz=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(BAZ_METHOD_NAME));
  testClassBase$qux=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(QUX_METHOD_NAME));
  testClassBase$fin=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(FIN_METHOD_NAME + "1"));
  testClassBase$stat=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(STAT_METHOD_NAME));
  testClassBase$compareTo$synth=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(GENERIC_INTERFACE_METHOD_NAME,Object.class));
  testClassBase$compareTo=new JavaMethod.ForMethod(TestClassBase.class.getDeclaredMethod(GENERIC_INTERFACE_METHOD_NAME,String.class));
  testClassExtension$foo=new JavaMethod.ForMethod(TestClassExtension.class.getDeclaredMethod(FOO_METHOD_NAME));
  testClassExtension$bar=new JavaMethod.ForMethod(TestClassExtension.class.getDeclaredMethod(BAR_METHOD_NAME,Object.class));
  testClassExtension$baz=new JavaMethod.ForMethod(TestClassExtension.class.getDeclaredMethod(BAZ_METHOD_NAME));
  testClassExtension$qux=new JavaMethod.ForMethod(TestClassExtension.class.getDeclaredMethod(QUX_METHOD_NAME));
  testClassExtension$fin=new JavaMethod.ForMethod(TestClassExtension.class.getDeclaredMethod(FIN_METHOD_NAME + "2"));
  testClassExtension$stat=new JavaMethod.ForMethod(TestClassExtension.class.getDeclaredMethod(STAT_METHOD_NAME));
}
