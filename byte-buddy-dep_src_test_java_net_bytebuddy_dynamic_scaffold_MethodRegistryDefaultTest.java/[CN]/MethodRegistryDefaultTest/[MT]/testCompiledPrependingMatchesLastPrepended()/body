{
  when(resolvedMethodFilter.matches(instrumentedMethod)).thenReturn(true);
  when(firstFilter.matches(instrumentedMethod)).thenReturn(true);
  when(secondFilter.matches(instrumentedMethod)).thenReturn(true);
  when(resolvedMethodFilter.matches(instrumentedMethod)).thenReturn(true);
  MethodRegistry.Compiled methodRegistry=new MethodRegistry.Default().append(secondMatcher,secondHandler,secondFactory,transformer).prepend(firstMatcher,firstHandler,firstFactory,transformer).prepare(firstType,methodGraphCompiler,TypeValidation.ENABLED,methodFilter).compile(implementationTargetFactory,classFileVersion);
  assertThat(methodRegistry.getInstrumentedType(),is(typeDescription));
  assertThat(methodRegistry.getInstrumentedMethods(),is((MethodList)new MethodList.Explicit(instrumentedMethod)));
  assertThat(methodRegistry.getTypeInitializer(),is(typeInitializer));
  assertThat(methodRegistry.getLoadedTypeInitializer(),is(loadedTypeInitializer));
  verify(firstHandler).prepare(firstType);
  verify(secondHandler).prepare(secondType);
  verify(firstFactory).make(typeDescription);
  verifyZeroInteractions(secondFactory);
  assertThat(methodRegistry.target(instrumentedMethod),is(firstRecord));
}
