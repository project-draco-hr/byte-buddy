{
  when(firstHandler.prepare(firstType)).thenReturn(secondType);
  when(secondHandler.prepare(secondType)).thenReturn(thirdType);
  when(firstHandler.compile(implementationTarget)).thenReturn(firstCompiledHandler);
  when(secondHandler.compile(implementationTarget)).thenReturn(secondCompiledHandler);
  when(thirdType.getTypeInitializer()).thenReturn(typeInitializer);
  when(thirdType.getLoadedTypeInitializer()).thenReturn(loadedTypeInitializer);
  when(methodLookupEngine.process(thirdType)).thenReturn(finding);
  when(finding.getTypeDescription()).thenReturn(typeDescription);
  when(finding.getInvokableMethods()).thenReturn(new MethodList.Explicit(Collections.singletonList(instrumentedMethod)));
  when(firstType.getDeclaredMethods()).thenReturn(new MethodList.Explicit(Collections.singletonList(firstMethod)));
  when(secondType.getDeclaredMethods()).thenReturn(new MethodList.Explicit(Collections.singletonList(secondMethod)));
  when(thirdType.getDeclaredMethods()).thenReturn(new MethodList.Explicit(Collections.singletonList(thirdMethod)));
  when(methodFilter.resolve(thirdType)).thenReturn((ElementMatcher)resolvedMethodFilter);
  when(firstMatcher.resolve(thirdType)).thenReturn((ElementMatcher)firstFilter);
  when(secondMatcher.resolve(thirdType)).thenReturn((ElementMatcher)secondFilter);
  when(firstFactory.make(typeDescription)).thenReturn(firstAppender);
  when(secondFactory.make(typeDescription)).thenReturn(secondAppender);
  when(implementationTargetFactory.make(finding,new MethodList.Explicit(Collections.singletonList(instrumentedMethod)))).thenReturn(implementationTarget);
  when(firstCompiledHandler.assemble(firstAppender)).thenReturn(firstEntry);
  when(secondCompiledHandler.assemble(secondAppender)).thenReturn(secondEntry);
}
