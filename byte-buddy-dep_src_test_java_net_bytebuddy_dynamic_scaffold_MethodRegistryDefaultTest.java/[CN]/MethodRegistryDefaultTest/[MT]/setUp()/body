{
  when(firstHandler.prepare(firstType)).thenReturn(secondType);
  when(secondHandler.prepare(secondType)).thenReturn(thirdType);
  when(firstHandler.compile(implementationTarget)).thenReturn(firstCompiledHandler);
  when(secondHandler.compile(implementationTarget)).thenReturn(secondCompiledHandler);
  when(thirdType.getTypeInitializer()).thenReturn(typeInitializer);
  when(thirdType.getLoadedTypeInitializer()).thenReturn(loadedTypeInitializer);
  when(methodGraphCompiler.compile(thirdType)).thenReturn(methodGraph);
  when(methodGraph.listNodes()).thenReturn(new MethodGraph.NodeList(Collections.singletonList(new MethodGraph.Node.Simple(instrumentedMethod))));
  when(firstType.getDeclaredMethods()).thenReturn(new MethodList.Empty<MethodDescription.InDefinedShape>());
  when(secondType.getDeclaredMethods()).thenReturn(new MethodList.Empty<MethodDescription.InDefinedShape>());
  when(thirdType.getDeclaredMethods()).thenReturn(new MethodList.Empty<MethodDescription.InDefinedShape>());
  when(methodFilter.resolve(thirdType)).thenReturn((ElementMatcher)resolvedMethodFilter);
  when(firstMatcher.resolve(thirdType)).thenReturn((ElementMatcher)firstFilter);
  when(secondMatcher.resolve(thirdType)).thenReturn((ElementMatcher)secondFilter);
  when(firstFactory.make(typeDescription)).thenReturn(firstAppender);
  when(secondFactory.make(typeDescription)).thenReturn(secondAppender);
  when(implementationTargetFactory.make(typeDescription,methodGraph)).thenReturn(implementationTarget);
  when(firstCompiledHandler.assemble(instrumentedMethod,firstAppender)).thenReturn(firstRecord);
  when(secondCompiledHandler.assemble(instrumentedMethod,secondAppender)).thenReturn(secondRecord);
  when(methodTransformer.transform(thirdType,instrumentedMethod)).thenReturn(instrumentedMethod);
  when(thirdType.validated()).thenReturn(typeDescription);
  when(implementationTarget.getInstrumentedType()).thenReturn(typeDescription);
  when(genericReturnType.asErasure()).thenReturn(returnType);
  when(genericReturnType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
  when(returnType.isVisibleTo(thirdType)).thenReturn(true);
  when(genericParameterType.asErasure()).thenReturn(parameterType);
  when(genericParameterType.getSort()).thenReturn(TypeDefinition.Sort.NON_GENERIC);
  when(parameterType.isVisibleTo(thirdType)).thenReturn(true);
  when(instrumentedMethod.getReturnType()).thenReturn(genericReturnType);
  when(instrumentedMethod.getParameters()).thenReturn((ParameterList)new ParameterList.Explicit<ParameterDescription>(parameterDescription));
  when(parameterDescription.getType()).thenReturn(genericParameterType);
}
