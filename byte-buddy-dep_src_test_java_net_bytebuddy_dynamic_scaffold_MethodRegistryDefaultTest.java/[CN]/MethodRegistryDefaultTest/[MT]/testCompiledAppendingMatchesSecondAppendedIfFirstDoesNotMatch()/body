{
  when(resolvedMethodFilter.matches(instrumentedMethod)).thenReturn(true);
  when(firstFilter.matches(instrumentedMethod)).thenReturn(false);
  when(secondFilter.matches(instrumentedMethod)).thenReturn(true);
  when(resolvedMethodFilter.matches(instrumentedMethod)).thenReturn(true);
  MethodRegistry.Compiled methodRegistry=new MethodRegistry.Default().append(firstMatcher,firstHandler,firstFactory,methodTransformer).append(secondMatcher,secondHandler,secondFactory,methodTransformer).prepare(firstType,methodGraphCompiler,methodFilter).compile(implementationTargetFactory);
  assertThat(methodRegistry.getInstrumentedType(),is((TypeDescription)typeDescription));
  assertThat(methodRegistry.getInstrumentedMethods(),is((MethodList)new MethodList.Explicit(instrumentedMethod)));
  assertThat(methodRegistry.getTypeInitializer(),is(typeInitializer));
  assertThat(methodRegistry.getLoadedTypeInitializer(),is(loadedTypeInitializer));
  verify(firstHandler).prepare(firstType);
  verify(secondHandler).prepare(secondType);
  verifyZeroInteractions(firstFactory);
  verify(secondFactory).make(typeDescription);
  assertThat(methodRegistry.target(instrumentedMethod),is(secondRecord));
}
