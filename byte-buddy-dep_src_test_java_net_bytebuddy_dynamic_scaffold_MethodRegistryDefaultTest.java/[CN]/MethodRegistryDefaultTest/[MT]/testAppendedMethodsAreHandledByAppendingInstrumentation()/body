{
  MethodRegistry.Compiled compiled=new MethodRegistry.Default().append(latentMatchesKnownMethod,extendingInstrumentation,simpleAttributeAppenderFactory).compile(basicInstrumentedType,instrumentationTargetFactory,fallback);
  assertThat(compiled.target(knownMethod).isDefineMethod(),is(true));
  assertThat(compiled.target(knownMethod).getAttributeAppender(),is(simpleAttributeAppender));
  assertThat(compiled.target(knownMethod).getByteCodeAppender(),is(simpleByteCodeAppender));
  assertThat(compiled.target(unknownMethod),is(fallback));
  verify(extendingInstrumentation).prepare(basicInstrumentedType);
  verify(extendingInstrumentation).appender(extendedInstrumentationTarget);
  verify(simpleAttributeAppenderFactory).make(extendedInstrumentedType);
  verifyNoMoreInteractions(simpleInstrumentation);
  verifyNoMoreInteractions(simpleAttributeAppenderFactory);
  verify(extendedMethodList).subList(BASIC_SIZE,EXTENDED_SIZE);
  assertThat(compiled.target(instrumentationAppendedMethod).isDefineMethod(),is(true));
  assertThat(compiled.target(instrumentationAppendedMethod).getByteCodeAppender(),is(simpleByteCodeAppender));
  assertThat(compiled.target(instrumentationAppendedMethod).getAttributeAppender(),is((MethodAttributeAppender)MethodAttributeAppender.NoOp.INSTANCE));
  verify(croppedMethodList,times(7)).filter(any(MethodMatcher.class));
}
