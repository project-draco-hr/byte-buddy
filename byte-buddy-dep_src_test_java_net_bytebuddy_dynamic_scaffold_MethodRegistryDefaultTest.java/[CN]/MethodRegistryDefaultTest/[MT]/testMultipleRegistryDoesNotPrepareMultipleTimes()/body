{
  when(resolvedMethodFilter.matches(instrumentedMethod)).thenReturn(true);
  when(firstFilter.matches(instrumentedMethod)).thenReturn(true);
  when(secondFilter.matches(instrumentedMethod)).thenReturn(true);
  MethodRegistry.Prepared methodRegistry=new MethodRegistry.Default().append(firstMatcher,firstHandler,firstFactory).append(firstMatcher,firstHandler,firstFactory).append(secondMatcher,firstHandler,firstFactory).append(secondMatcher,firstHandler,secondFactory).append(secondMatcher,secondHandler,secondFactory).append(firstMatcher,secondHandler,secondFactory).append(firstMatcher,firstHandler,secondFactory).append(firstMatcher,secondHandler,firstFactory).prepare(firstType,methodGraphCompiler,methodFilter);
  assertThat(methodRegistry.getInstrumentedType(),is((TypeDescription)typeDescription));
  assertThat(methodRegistry.getInstrumentedMethods(),is((MethodList)new MethodList.Explicit(Collections.singletonList(instrumentedMethod))));
  assertThat(methodRegistry.getTypeInitializer(),is(typeInitializer));
  assertThat(methodRegistry.getLoadedTypeInitializer(),is(loadedTypeInitializer));
  verify(firstHandler).prepare(firstType);
  verify(secondHandler).prepare(secondType);
}
