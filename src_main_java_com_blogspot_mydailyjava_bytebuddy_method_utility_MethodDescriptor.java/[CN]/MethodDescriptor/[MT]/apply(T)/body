{
  int argumentIndex=0, cursor=0;
  while (cursor != argumentTypesInternalForm.length()) {
switch (argumentTypesInternalForm.charAt(cursor)) {
case OBJECT_REFERENCE_SYMBOL:
{
        int nextCursor=endOfObject(argumentTypesInternalForm,argumentIndex);
        visitor.visitObject(argumentTypesInternalForm.substring(cursor,nextCursor),argumentIndex++);
        cursor=nextCursor;
        break;
      }
case ARRAY_REFERENCE_SYMBOL:
{
      int nextCursor=endOfArray(argumentTypesInternalForm,argumentIndex);
      visitor.visitArray(argumentTypesInternalForm.substring(cursor,nextCursor),argumentIndex++);
      cursor=nextCursor;
      break;
    }
case INT_SYMBOL:
  visitor.visitInt(argumentIndex++);
cursor++;
break;
case DOUBLE_SYMBOL:
visitor.visitDouble(argumentIndex+=2);
cursor++;
break;
case LONG_SYMBOL:
visitor.visitLong(argumentIndex+=2);
cursor++;
break;
case BOOLEAN_SYMBOL:
visitor.visitBoolean(argumentIndex++);
cursor++;
break;
case BYTE_SYMBOL:
visitor.visitByte(argumentIndex++);
cursor++;
break;
case CHAR_SYMBOL:
visitor.visitChar(argumentIndex++);
cursor++;
break;
case FLOAT_SYMBOL:
visitor.visitFloat(argumentIndex++);
cursor++;
break;
case SHORT_SYMBOL:
visitor.visitShort(argumentIndex++);
cursor++;
break;
default :
throw new IllegalStateException("Unknown type symbol found: " + argumentTypesInternalForm.charAt(cursor));
}
}
return visitor;
}
