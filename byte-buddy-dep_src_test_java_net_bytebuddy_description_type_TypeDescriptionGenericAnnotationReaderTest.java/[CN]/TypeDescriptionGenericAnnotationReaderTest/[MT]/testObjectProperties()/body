{
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.NoOp.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.ForComponentType.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.ForOwnerType.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.ForTypeArgument.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.ForTypeVariableBoundType.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.ForWildcardLowerBoundType.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.ForWildcardUpperBoundType.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForLegacyVm.class).apply();
  final Iterator<Method> methods=CompoundList.of(Arrays.asList(Object.class.getDeclaredMethods()),Arrays.asList(String.class.getDeclaredMethods())).iterator();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methods.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.Resolved.class).apply();
  final Iterator<Field> fields=Arrays.asList(Thread.class.getDeclaredFields()).iterator();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedFieldType.class).create(new ObjectPropertyAssertion.Creator<Field>(){
    @Override public Field create(){
      return fields.next();
    }
  }
).apply();
  final Iterator<Class<?>> types=Arrays.<Class<?>>asList(Object.class,String.class,Integer.class,Number.class).iterator();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedInterfaceType.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return types.next();
    }
  }
).apply();
  final Iterator<AccessibleObject> iterator=Arrays.<AccessibleObject>asList(Object.class.getDeclaredMethods()).iterator();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedParameterizedType.class).create(new ObjectPropertyAssertion.Creator<AccessibleObject>(){
    @Override public AccessibleObject create(){
      return iterator.next();
    }
  }
).apply();
  final Iterator<Method> methods2=Arrays.asList(Object.class.getDeclaredMethods()).iterator();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedReturnType.class).create(new ObjectPropertyAssertion.Creator<Method>(){
    @Override public Method create(){
      return methods2.next();
    }
  }
).apply();
  final Iterator<Class<?>> types2=Arrays.<Class<?>>asList(Object.class,String.class,Integer.class,Number.class).iterator();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedSuperClass.class).create(new ObjectPropertyAssertion.Creator<Class<?>>(){
    @Override public Class<?> create(){
      return types2.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedTypeVariableType.class).apply();
  ObjectPropertyAssertion.of(TypeDescription.Generic.AnnotationReader.Dispatcher.ForJava8CapableVm.AnnotatedExceptionType.class).create(new ObjectPropertyAssertion.Creator<AccessibleObject>(){
    @Override public AccessibleObject create(){
      return iterator.next();
    }
  }
).apply();
}
