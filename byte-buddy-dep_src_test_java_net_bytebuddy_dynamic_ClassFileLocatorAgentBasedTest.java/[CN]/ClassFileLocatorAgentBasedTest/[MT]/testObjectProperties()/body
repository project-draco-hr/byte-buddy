{
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.class).refine(new ObjectPropertyAssertion.Refinement<Instrumentation>(){
    @Override public void apply(    Instrumentation mock){
      when(mock.isRetransformClassesSupported()).thenReturn(true);
    }
  }
).apply();
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.ClassLoadingDelegate.Default.class).apply();
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.class).apply();
  final Iterator<Field> iterator=Arrays.asList(Foo.class.getDeclaredFields()).iterator();
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.JavaField.ForResolvedField.class).create(new ObjectPropertyAssertion.Creator<Field>(){
    @Override public Field create(){
      return iterator.next();
    }
  }
).apply();
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.ClassLoadingDelegate.ForDelegatingClassLoader.JavaField.ForNonResolvedField.class).apply();
  final Iterator<Class<?>> otherIterator=Arrays.asList(Integer.class,String.class,Object.class,Byte.class).iterator();
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.ClassLoadingDelegate.Explicit.class).create(new ObjectPropertyAssertion.Creator<Collection<Class<?>>>(){
    @Override public Collection<Class<?>> create(){
      return Arrays.<Class<?>>asList(otherIterator.next());
    }
  }
).apply();
  ObjectPropertyAssertion.of(ClassFileLocator.AgentBased.ExtractionClassFileTransformer.class).apply(new ClassFileLocator.AgentBased.ExtractionClassFileTransformer(mock(ClassLoader.class),"foo"));
}
